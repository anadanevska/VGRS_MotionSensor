
MotionSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013984  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ddc  08013b84  08013b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015960  08015960  000171f4  2**0
                  CONTENTS
  4 .ARM          00000008  08015960  08015960  00016960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015968  08015968  000171f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015968  08015968  00016968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801596c  0801596c  0001696c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  08015970  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000b4  08015a24  000170b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000154  08015ac4  00017154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005e08  200001f4  08015b64  000171f4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005ffc  08015b64  00017ffc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000171f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042ccd  00000000  00000000  00017222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000079ea  00000000  00000000  00059eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003490  00000000  00000000  000618e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000028e7  00000000  00000000  00064d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a1d1  00000000  00000000  00067657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00043f5e  00000000  00000000  00071828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00158b04  00000000  00000000  000b5786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020e28a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e584  00000000  00000000  0020e2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  0021c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f4 	.word	0x200001f4
 800021c:	00000000 	.word	0x00000000
 8000220:	08013b6c 	.word	0x08013b6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f8 	.word	0x200001f8
 800023c:	08013b6c 	.word	0x08013b6c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <DrawButton>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void DrawButton(void)
{
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
    uint16_t squareSize = 10;
 8000536:	230a      	movs	r3, #10
 8000538:	81fb      	strh	r3, [r7, #14]
    uint16_t radius = BUTTON_RADIUS;
 800053a:	2332      	movs	r3, #50	@ 0x32
 800053c:	81bb      	strh	r3, [r7, #12]

    //calculate the top left corner
    uint16_t startX = BUTTON_X - radius;
 800053e:	f004 f829 	bl	8004594 <BSP_LCD_GetXSize>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	89bb      	ldrh	r3, [r7, #12]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	b29b      	uxth	r3, r3
 800054c:	3b3c      	subs	r3, #60	@ 0x3c
 800054e:	817b      	strh	r3, [r7, #10]
    uint16_t startY = BUTTON_Y - radius;
 8000550:	f004 f82c 	bl	80045ac <BSP_LCD_GetYSize>
 8000554:	4603      	mov	r3, r0
 8000556:	b29a      	uxth	r2, r3
 8000558:	89bb      	ldrh	r3, [r7, #12]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	b29b      	uxth	r3, r3
 800055e:	3b3c      	subs	r3, #60	@ 0x3c
 8000560:	813b      	strh	r3, [r7, #8]

    for (uint16_t y = 0; y < 2 * radius; y += squareSize)
 8000562:	2300      	movs	r3, #0
 8000564:	82fb      	strh	r3, [r7, #22]
 8000566:	e0b0      	b.n	80006ca <DrawButton+0x19a>
    {
        for (uint16_t x = 0; x < 2 * radius; x += squareSize)
 8000568:	2300      	movs	r3, #0
 800056a:	82bb      	strh	r3, [r7, #20]
 800056c:	e0a3      	b.n	80006b6 <DrawButton+0x186>
        {
            //calculate the square center
            uint16_t centerX = startX + x + squareSize / 2;
 800056e:	897a      	ldrh	r2, [r7, #10]
 8000570:	8abb      	ldrh	r3, [r7, #20]
 8000572:	4413      	add	r3, r2
 8000574:	b29a      	uxth	r2, r3
 8000576:	89fb      	ldrh	r3, [r7, #14]
 8000578:	085b      	lsrs	r3, r3, #1
 800057a:	b29b      	uxth	r3, r3
 800057c:	4413      	add	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
            uint16_t centerY = startY + y + squareSize / 2;
 8000580:	893a      	ldrh	r2, [r7, #8]
 8000582:	8afb      	ldrh	r3, [r7, #22]
 8000584:	4413      	add	r3, r2
 8000586:	b29a      	uxth	r2, r3
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	085b      	lsrs	r3, r3, #1
 800058c:	b29b      	uxth	r3, r3
 800058e:	4413      	add	r3, r2
 8000590:	80bb      	strh	r3, [r7, #4]

            //is it in the button
            if ((centerX - BUTTON_X) * (centerX - BUTTON_X) + (centerY - BUTTON_Y) * (centerY - BUTTON_Y) <= radius * radius)
 8000592:	88fc      	ldrh	r4, [r7, #6]
 8000594:	f003 fffe 	bl	8004594 <BSP_LCD_GetXSize>
 8000598:	4603      	mov	r3, r0
 800059a:	1ae3      	subs	r3, r4, r3
 800059c:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 80005a0:	88fd      	ldrh	r5, [r7, #6]
 80005a2:	f003 fff7 	bl	8004594 <BSP_LCD_GetXSize>
 80005a6:	4603      	mov	r3, r0
 80005a8:	1aeb      	subs	r3, r5, r3
 80005aa:	333c      	adds	r3, #60	@ 0x3c
 80005ac:	fb03 f404 	mul.w	r4, r3, r4
 80005b0:	88bd      	ldrh	r5, [r7, #4]
 80005b2:	f003 fffb 	bl	80045ac <BSP_LCD_GetYSize>
 80005b6:	4603      	mov	r3, r0
 80005b8:	1aeb      	subs	r3, r5, r3
 80005ba:	f103 053c 	add.w	r5, r3, #60	@ 0x3c
 80005be:	88be      	ldrh	r6, [r7, #4]
 80005c0:	f003 fff4 	bl	80045ac <BSP_LCD_GetYSize>
 80005c4:	4603      	mov	r3, r0
 80005c6:	1af3      	subs	r3, r6, r3
 80005c8:	333c      	adds	r3, #60	@ 0x3c
 80005ca:	fb05 f303 	mul.w	r3, r5, r3
 80005ce:	4423      	add	r3, r4
 80005d0:	89ba      	ldrh	r2, [r7, #12]
 80005d2:	89b9      	ldrh	r1, [r7, #12]
 80005d4:	fb01 f202 	mul.w	r2, r1, r2
 80005d8:	4293      	cmp	r3, r2
 80005da:	d868      	bhi.n	80006ae <DrawButton+0x17e>
            {
                if (((x / squareSize) % 2 == (y / squareSize) % 2))
 80005dc:	8aba      	ldrh	r2, [r7, #20]
 80005de:	89fb      	ldrh	r3, [r7, #14]
 80005e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	8af9      	ldrh	r1, [r7, #22]
 80005e8:	89fb      	ldrh	r3, [r7, #14]
 80005ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4053      	eors	r3, r2
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d104      	bne.n	8000608 <DrawButton+0xd8>
                {
                    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80005fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000602:	f004 f881 	bl	8004708 <BSP_LCD_SetTextColor>
 8000606:	e003      	b.n	8000610 <DrawButton+0xe0>
                }
                else
                {
                    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000608:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800060c:	f004 f87c 	bl	8004708 <BSP_LCD_SetTextColor>
                }

                //limit the square to the boundary of the circle
                for (uint16_t i = 0; i < squareSize; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	827b      	strh	r3, [r7, #18]
 8000614:	e047      	b.n	80006a6 <DrawButton+0x176>
                {
                    for (uint16_t j = 0; j < squareSize; j++)
 8000616:	2300      	movs	r3, #0
 8000618:	823b      	strh	r3, [r7, #16]
 800061a:	e03d      	b.n	8000698 <DrawButton+0x168>
                    {
                        uint16_t pixelX = startX + x + i;
 800061c:	897a      	ldrh	r2, [r7, #10]
 800061e:	8abb      	ldrh	r3, [r7, #20]
 8000620:	4413      	add	r3, r2
 8000622:	b29a      	uxth	r2, r3
 8000624:	8a7b      	ldrh	r3, [r7, #18]
 8000626:	4413      	add	r3, r2
 8000628:	807b      	strh	r3, [r7, #2]
                        uint16_t pixelY = startY + y + j;
 800062a:	893a      	ldrh	r2, [r7, #8]
 800062c:	8afb      	ldrh	r3, [r7, #22]
 800062e:	4413      	add	r3, r2
 8000630:	b29a      	uxth	r2, r3
 8000632:	8a3b      	ldrh	r3, [r7, #16]
 8000634:	4413      	add	r3, r2
 8000636:	803b      	strh	r3, [r7, #0]

                        if ((pixelX - BUTTON_X) * (pixelX - BUTTON_X) + (pixelY - BUTTON_Y) * (pixelY - BUTTON_Y) <= radius * radius)
 8000638:	887c      	ldrh	r4, [r7, #2]
 800063a:	f003 ffab 	bl	8004594 <BSP_LCD_GetXSize>
 800063e:	4603      	mov	r3, r0
 8000640:	1ae3      	subs	r3, r4, r3
 8000642:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8000646:	887d      	ldrh	r5, [r7, #2]
 8000648:	f003 ffa4 	bl	8004594 <BSP_LCD_GetXSize>
 800064c:	4603      	mov	r3, r0
 800064e:	1aeb      	subs	r3, r5, r3
 8000650:	333c      	adds	r3, #60	@ 0x3c
 8000652:	fb03 f404 	mul.w	r4, r3, r4
 8000656:	883d      	ldrh	r5, [r7, #0]
 8000658:	f003 ffa8 	bl	80045ac <BSP_LCD_GetYSize>
 800065c:	4603      	mov	r3, r0
 800065e:	1aeb      	subs	r3, r5, r3
 8000660:	f103 053c 	add.w	r5, r3, #60	@ 0x3c
 8000664:	883e      	ldrh	r6, [r7, #0]
 8000666:	f003 ffa1 	bl	80045ac <BSP_LCD_GetYSize>
 800066a:	4603      	mov	r3, r0
 800066c:	1af3      	subs	r3, r6, r3
 800066e:	333c      	adds	r3, #60	@ 0x3c
 8000670:	fb05 f303 	mul.w	r3, r5, r3
 8000674:	4423      	add	r3, r4
 8000676:	89ba      	ldrh	r2, [r7, #12]
 8000678:	89b9      	ldrh	r1, [r7, #12]
 800067a:	fb01 f202 	mul.w	r2, r1, r2
 800067e:	4293      	cmp	r3, r2
 8000680:	d807      	bhi.n	8000692 <DrawButton+0x162>
                        {
                            BSP_LCD_DrawPixel(pixelX, pixelY, BSP_LCD_GetTextColor());
 8000682:	f004 f859 	bl	8004738 <BSP_LCD_GetTextColor>
 8000686:	4602      	mov	r2, r0
 8000688:	8839      	ldrh	r1, [r7, #0]
 800068a:	887b      	ldrh	r3, [r7, #2]
 800068c:	4618      	mov	r0, r3
 800068e:	f004 fb0f 	bl	8004cb0 <BSP_LCD_DrawPixel>
                    for (uint16_t j = 0; j < squareSize; j++)
 8000692:	8a3b      	ldrh	r3, [r7, #16]
 8000694:	3301      	adds	r3, #1
 8000696:	823b      	strh	r3, [r7, #16]
 8000698:	8a3a      	ldrh	r2, [r7, #16]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	429a      	cmp	r2, r3
 800069e:	d3bd      	bcc.n	800061c <DrawButton+0xec>
                for (uint16_t i = 0; i < squareSize; i++)
 80006a0:	8a7b      	ldrh	r3, [r7, #18]
 80006a2:	3301      	adds	r3, #1
 80006a4:	827b      	strh	r3, [r7, #18]
 80006a6:	8a7a      	ldrh	r2, [r7, #18]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d3b3      	bcc.n	8000616 <DrawButton+0xe6>
        for (uint16_t x = 0; x < 2 * radius; x += squareSize)
 80006ae:	8aba      	ldrh	r2, [r7, #20]
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	4413      	add	r3, r2
 80006b4:	82bb      	strh	r3, [r7, #20]
 80006b6:	8aba      	ldrh	r2, [r7, #20]
 80006b8:	89bb      	ldrh	r3, [r7, #12]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	429a      	cmp	r2, r3
 80006be:	f6ff af56 	blt.w	800056e <DrawButton+0x3e>
    for (uint16_t y = 0; y < 2 * radius; y += squareSize)
 80006c2:	8afa      	ldrh	r2, [r7, #22]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	4413      	add	r3, r2
 80006c8:	82fb      	strh	r3, [r7, #22]
 80006ca:	8afa      	ldrh	r2, [r7, #22]
 80006cc:	89bb      	ldrh	r3, [r7, #12]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	429a      	cmp	r2, r3
 80006d2:	f6ff af49 	blt.w	8000568 <DrawButton+0x38>
                    }
                }
            }
        }
    }
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	371c      	adds	r7, #28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080006e0 <StartTouchTask>:

void StartTouchTask(void *argument) {
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    for (;;) {
        BSP_TS_GetState(&TS_State);
 80006e8:	4858      	ldr	r0, [pc, #352]	@ (800084c <StartTouchTask+0x16c>)
 80006ea:	f004 fe0d 	bl	8005308 <BSP_TS_GetState>

        if (TS_State.touchDetected) {
 80006ee:	4b57      	ldr	r3, [pc, #348]	@ (800084c <StartTouchTask+0x16c>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 80a6 	beq.w	8000844 <StartTouchTask+0x164>
            uint16_t x = TS_State.touchX[0];
 80006f8:	4b54      	ldr	r3, [pc, #336]	@ (800084c <StartTouchTask+0x16c>)
 80006fa:	885b      	ldrh	r3, [r3, #2]
 80006fc:	81fb      	strh	r3, [r7, #14]
            uint16_t y = TS_State.touchY[0];
 80006fe:	4b53      	ldr	r3, [pc, #332]	@ (800084c <StartTouchTask+0x16c>)
 8000700:	88db      	ldrh	r3, [r3, #6]
 8000702:	81bb      	strh	r3, [r7, #12]

            uint32_t distSquared = (x - BUTTON_X) * (x - BUTTON_X) + (y - BUTTON_Y) * (y - BUTTON_Y);
 8000704:	89fc      	ldrh	r4, [r7, #14]
 8000706:	f003 ff45 	bl	8004594 <BSP_LCD_GetXSize>
 800070a:	4603      	mov	r3, r0
 800070c:	1ae3      	subs	r3, r4, r3
 800070e:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 8000712:	89fd      	ldrh	r5, [r7, #14]
 8000714:	f003 ff3e 	bl	8004594 <BSP_LCD_GetXSize>
 8000718:	4603      	mov	r3, r0
 800071a:	1aeb      	subs	r3, r5, r3
 800071c:	333c      	adds	r3, #60	@ 0x3c
 800071e:	fb03 f404 	mul.w	r4, r3, r4
 8000722:	89bd      	ldrh	r5, [r7, #12]
 8000724:	f003 ff42 	bl	80045ac <BSP_LCD_GetYSize>
 8000728:	4603      	mov	r3, r0
 800072a:	1aeb      	subs	r3, r5, r3
 800072c:	f103 053c 	add.w	r5, r3, #60	@ 0x3c
 8000730:	89be      	ldrh	r6, [r7, #12]
 8000732:	f003 ff3b 	bl	80045ac <BSP_LCD_GetYSize>
 8000736:	4603      	mov	r3, r0
 8000738:	1af3      	subs	r3, r6, r3
 800073a:	333c      	adds	r3, #60	@ 0x3c
 800073c:	fb05 f303 	mul.w	r3, r5, r3
 8000740:	4423      	add	r3, r4
 8000742:	60bb      	str	r3, [r7, #8]
            if (distSquared <= BUTTON_RADIUS * BUTTON_RADIUS) {
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800074a:	4293      	cmp	r3, r2
 800074c:	d87a      	bhi.n	8000844 <StartTouchTask+0x164>
                colorIndex = (colorIndex + 1) % COLOR_LIST_SIZE;
 800074e:	4b40      	ldr	r3, [pc, #256]	@ (8000850 <StartTouchTask+0x170>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	4b3f      	ldr	r3, [pc, #252]	@ (8000854 <StartTouchTask+0x174>)
 8000756:	fb83 3102 	smull	r3, r1, r3, r2
 800075a:	17d3      	asrs	r3, r2, #31
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	460b      	mov	r3, r1
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	440b      	add	r3, r1
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	1ad1      	subs	r1, r2, r3
 8000768:	b2ca      	uxtb	r2, r1
 800076a:	4b39      	ldr	r3, [pc, #228]	@ (8000850 <StartTouchTask+0x170>)
 800076c:	701a      	strb	r2, [r3, #0]

                osSemaphoreAcquire(syncSemaphoreHandle, 0);
 800076e:	4b3a      	ldr	r3, [pc, #232]	@ (8000858 <StartTouchTask+0x178>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f00f ff09 	bl	801058c <osSemaphoreAcquire>

                BSP_LCD_Clear(colors[colorIndex]);
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <StartTouchTask+0x170>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b36      	ldr	r3, [pc, #216]	@ (800085c <StartTouchTask+0x17c>)
 8000782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000786:	4618      	mov	r0, r3
 8000788:	f004 f834 	bl	80047f4 <BSP_LCD_Clear>

                if (motionDetected == 1) {
 800078c:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <StartTouchTask+0x180>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	2b01      	cmp	r3, #1
 8000794:	d115      	bne.n	80007c2 <StartTouchTask+0xe2>
                    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000796:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800079a:	f003 ffe1 	bl	8004760 <BSP_LCD_SetBackColor>
                    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800079e:	f04f 30ff 	mov.w	r0, #4294967295
 80007a2:	f003 ffb1 	bl	8004708 <BSP_LCD_SetTextColor>
                    BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Motion Detected!", CENTER_MODE);
 80007a6:	f004 f80f 	bl	80047c8 <BSP_LCD_GetFont>
 80007aa:	4603      	mov	r3, r0
 80007ac:	88db      	ldrh	r3, [r3, #6]
 80007ae:	461a      	mov	r2, r3
 80007b0:	00d2      	lsls	r2, r2, #3
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b299      	uxth	r1, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	4a2a      	ldr	r2, [pc, #168]	@ (8000864 <StartTouchTask+0x184>)
 80007bc:	2000      	movs	r0, #0
 80007be:	f004 f885 	bl	80048cc <BSP_LCD_DisplayStringAt>
                }

                DrawButton();
 80007c2:	f7ff feb5 	bl	8000530 <DrawButton>

                BSP_LCD_SetFont(&Font24);
 80007c6:	4828      	ldr	r0, [pc, #160]	@ (8000868 <StartTouchTask+0x188>)
 80007c8:	f003 ffe4 	bl	8004794 <BSP_LCD_SetFont>
                BSP_LCD_SetBackColor(colors[colorIndex]);
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <StartTouchTask+0x170>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b22      	ldr	r3, [pc, #136]	@ (800085c <StartTouchTask+0x17c>)
 80007d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d8:	4618      	mov	r0, r3
 80007da:	f003 ffc1 	bl	8004760 <BSP_LCD_SetBackColor>
                BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80007de:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80007e2:	f003 ff91 	bl	8004708 <BSP_LCD_SetTextColor>
                BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Welcome to MotionSensor!", CENTER_MODE);
 80007e6:	f003 ffef 	bl	80047c8 <BSP_LCD_GetFont>
 80007ea:	4603      	mov	r3, r0
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	461a      	mov	r2, r3
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	b299      	uxth	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	4a1c      	ldr	r2, [pc, #112]	@ (800086c <StartTouchTask+0x18c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f004 f866 	bl	80048cc <BSP_LCD_DisplayStringAt>
                BSP_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)"Tap the button to change background color", CENTER_MODE);
 8000800:	f003 ffe2 	bl	80047c8 <BSP_LCD_GetFont>
 8000804:	4603      	mov	r3, r0
 8000806:	88db      	ldrh	r3, [r3, #6]
 8000808:	461a      	mov	r2, r3
 800080a:	0092      	lsls	r2, r2, #2
 800080c:	4413      	add	r3, r2
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	b299      	uxth	r1, r3
 8000812:	2301      	movs	r3, #1
 8000814:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <StartTouchTask+0x190>)
 8000816:	2000      	movs	r0, #0
 8000818:	f004 f858 	bl	80048cc <BSP_LCD_DisplayStringAt>
                BSP_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)"LED is activated on motion", CENTER_MODE);
 800081c:	f003 ffd4 	bl	80047c8 <BSP_LCD_GetFont>
 8000820:	4603      	mov	r3, r0
 8000822:	88db      	ldrh	r3, [r3, #6]
 8000824:	461a      	mov	r2, r3
 8000826:	0092      	lsls	r2, r2, #2
 8000828:	441a      	add	r2, r3
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	4413      	add	r3, r2
 800082e:	b299      	uxth	r1, r3
 8000830:	2301      	movs	r3, #1
 8000832:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <StartTouchTask+0x194>)
 8000834:	2000      	movs	r0, #0
 8000836:	f004 f849 	bl	80048cc <BSP_LCD_DisplayStringAt>

                osSemaphoreRelease(syncSemaphoreHandle);
 800083a:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <StartTouchTask+0x178>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4618      	mov	r0, r3
 8000840:	f00f ff0a 	bl	8010658 <osSemaphoreRelease>
            }
        }

        osDelay(100);
 8000844:	2064      	movs	r0, #100	@ 0x64
 8000846:	f00f fdd7 	bl	80103f8 <osDelay>
        BSP_TS_GetState(&TS_State);
 800084a:	e74d      	b.n	80006e8 <StartTouchTask+0x8>
 800084c:	200010d4 	.word	0x200010d4
 8000850:	200010d1 	.word	0x200010d1
 8000854:	2aaaaaab 	.word	0x2aaaaaab
 8000858:	200010e0 	.word	0x200010e0
 800085c:	20000000 	.word	0x20000000
 8000860:	200010d0 	.word	0x200010d0
 8000864:	08013b9c 	.word	0x08013b9c
 8000868:	20000058 	.word	0x20000058
 800086c:	08013bb0 	.word	0x08013bb0
 8000870:	08013bcc 	.word	0x08013bcc
 8000874:	08013bf8 	.word	0x08013bf8

08000878 <StartMotionTask>:
    }
}

void StartMotionTask(void *argument) {
 8000878:	b5b0      	push	{r4, r5, r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    for (;;) {
        osSemaphoreAcquire(motionSemaphoreHandle, osWaitForever);
 8000880:	4b38      	ldr	r3, [pc, #224]	@ (8000964 <StartMotionTask+0xec>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f04f 31ff 	mov.w	r1, #4294967295
 8000888:	4618      	mov	r0, r3
 800088a:	f00f fe7f 	bl	801058c <osSemaphoreAcquire>

        if (motionDetected == 1) {
 800088e:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <StartMotionTask+0xf0>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b01      	cmp	r3, #1
 8000896:	d1f3      	bne.n	8000880 <StartMotionTask+0x8>
            BSP_LCD_SetFont(&Font24);
 8000898:	4834      	ldr	r0, [pc, #208]	@ (800096c <StartMotionTask+0xf4>)
 800089a:	f003 ff7b 	bl	8004794 <BSP_LCD_SetFont>
            BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800089e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80008a2:	f003 ff5d 	bl	8004760 <BSP_LCD_SetBackColor>
            BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80008a6:	f04f 30ff 	mov.w	r0, #4294967295
 80008aa:	f003 ff2d 	bl	8004708 <BSP_LCD_SetTextColor>
            BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"Motion Detected!", CENTER_MODE);
 80008ae:	f003 ff8b 	bl	80047c8 <BSP_LCD_GetFont>
 80008b2:	4603      	mov	r3, r0
 80008b4:	88db      	ldrh	r3, [r3, #6]
 80008b6:	461a      	mov	r2, r3
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	b299      	uxth	r1, r3
 80008c0:	2301      	movs	r3, #1
 80008c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000970 <StartMotionTask+0xf8>)
 80008c4:	2000      	movs	r0, #0
 80008c6:	f004 f801 	bl	80048cc <BSP_LCD_DisplayStringAt>

            for (int i = 0; i < 4; i++) {  //in total 6 s
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	e01e      	b.n	800090e <StartMotionTask+0x96>
                //blink between blue and red
                HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2102      	movs	r1, #2
 80008d4:	4827      	ldr	r0, [pc, #156]	@ (8000974 <StartMotionTask+0xfc>)
 80008d6:	f008 fab9 	bl	8008e4c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	4825      	ldr	r0, [pc, #148]	@ (8000974 <StartMotionTask+0xfc>)
 80008e0:	f008 fab4 	bl	8008e4c <HAL_GPIO_WritePin>
                osDelay(500);
 80008e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008e8:	f00f fd86 	bl	80103f8 <osDelay>

                HAL_GPIO_WritePin(LED_PORT, LED_BLUE_PIN, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2110      	movs	r1, #16
 80008f0:	4820      	ldr	r0, [pc, #128]	@ (8000974 <StartMotionTask+0xfc>)
 80008f2:	f008 faab 	bl	8008e4c <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2102      	movs	r1, #2
 80008fa:	481e      	ldr	r0, [pc, #120]	@ (8000974 <StartMotionTask+0xfc>)
 80008fc:	f008 faa6 	bl	8008e4c <HAL_GPIO_WritePin>
                osDelay(500);
 8000900:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000904:	f00f fd78 	bl	80103f8 <osDelay>
            for (int i = 0; i < 4; i++) {  //in total 6 s
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b03      	cmp	r3, #3
 8000912:	dddd      	ble.n	80008d0 <StartMotionTask+0x58>
            }

            BSP_LCD_SetTextColor(colors[colorIndex]);
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <StartMotionTask+0x100>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <StartMotionTask+0x104>)
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 fef1 	bl	8004708 <BSP_LCD_SetTextColor>
            BSP_LCD_FillRect(0, LINE(14), BSP_LCD_GetXSize(), BSP_LCD_GetFont()->Height);
 8000926:	f003 ff4f 	bl	80047c8 <BSP_LCD_GetFont>
 800092a:	4603      	mov	r3, r0
 800092c:	88db      	ldrh	r3, [r3, #6]
 800092e:	461a      	mov	r2, r3
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	1ad3      	subs	r3, r2, r3
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	b29c      	uxth	r4, r3
 8000938:	f003 fe2c 	bl	8004594 <BSP_LCD_GetXSize>
 800093c:	4603      	mov	r3, r0
 800093e:	b29d      	uxth	r5, r3
 8000940:	f003 ff42 	bl	80047c8 <BSP_LCD_GetFont>
 8000944:	4603      	mov	r3, r0
 8000946:	88db      	ldrh	r3, [r3, #6]
 8000948:	462a      	mov	r2, r5
 800094a:	4621      	mov	r1, r4
 800094c:	2000      	movs	r0, #0
 800094e:	f004 f885 	bl	8004a5c <BSP_LCD_FillRect>
            HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN | LED_BLUE_PIN, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2112      	movs	r1, #18
 8000956:	4807      	ldr	r0, [pc, #28]	@ (8000974 <StartMotionTask+0xfc>)
 8000958:	f008 fa78 	bl	8008e4c <HAL_GPIO_WritePin>

            motionDetected = 0;
 800095c:	4b02      	ldr	r3, [pc, #8]	@ (8000968 <StartMotionTask+0xf0>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
        osSemaphoreAcquire(motionSemaphoreHandle, osWaitForever);
 8000962:	e78d      	b.n	8000880 <StartMotionTask+0x8>
 8000964:	200010e4 	.word	0x200010e4
 8000968:	200010d0 	.word	0x200010d0
 800096c:	20000058 	.word	0x20000058
 8000970:	08013b9c 	.word	0x08013b9c
 8000974:	40022400 	.word	0x40022400
 8000978:	200010d1 	.word	0x200010d1
 800097c:	20000000 	.word	0x20000000

08000980 <HAL_GPIO_EXTI_Callback>:
        }
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0)  //motion detected
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d107      	bne.n	80009a0 <HAL_GPIO_EXTI_Callback+0x20>
	{
	    motionDetected = 1;
 8000990:	4b05      	ldr	r3, [pc, #20]	@ (80009a8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
	    osSemaphoreRelease(motionSemaphoreHandle);
 8000996:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <HAL_GPIO_EXTI_Callback+0x2c>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4618      	mov	r0, r3
 800099c:	f00f fe5c 	bl	8010658 <osSemaphoreRelease>
	}
}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200010d0 	.word	0x200010d0
 80009ac:	200010e4 	.word	0x200010e4

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f004 fdbb 	bl	8005530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f8f1 	bl	8000ba0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009be:	f000 f96b 	bl	8000c98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c2:	f001 f9f7 	bl	8001db4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009c6:	f000 f991 	bl	8000cec <MX_ADC1_Init>
  MX_ADC3_Init();
 80009ca:	f000 f9e1 	bl	8000d90 <MX_ADC3_Init>
  MX_CRC_Init();
 80009ce:	f000 fa31 	bl	8000e34 <MX_CRC_Init>
  MX_DMA2D_Init();
 80009d2:	f000 fa89 	bl	8000ee8 <MX_DMA2D_Init>
  MX_DSIHOST_DSI_Init();
 80009d6:	f000 fabf 	bl	8000f58 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 80009da:	f000 fbbd 	bl	8001158 <MX_ETH_Init>
  MX_FMC_Init();
 80009de:	f001 f999 	bl	8001d14 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 80009e2:	f000 fc07 	bl	80011f4 <MX_HDMI_CEC_Init>
  MX_I2C1_Init();
 80009e6:	f000 fc39 	bl	800125c <MX_I2C1_Init>
  MX_I2C4_Init();
 80009ea:	f000 fc77 	bl	80012dc <MX_I2C4_Init>
  MX_LTDC_Init();
 80009ee:	f000 fcb5 	bl	800135c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80009f2:	f000 fd33 	bl	800145c <MX_QUADSPI_Init>
  MX_RTC_Init();
 80009f6:	f000 fd5d 	bl	80014b4 <MX_RTC_Init>
  MX_SAI1_Init();
 80009fa:	f000 fdf7 	bl	80015ec <MX_SAI1_Init>
  MX_SAI2_Init();
 80009fe:	f000 fe9d 	bl	800173c <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 8000a02:	f000 fec7 	bl	8001794 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000a06:	f000 fef7 	bl	80017f8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000a0a:	f000 ff31 	bl	8001870 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a0e:	f000 ff83 	bl	8001918 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000a12:	f000 ffdb 	bl	80019cc <MX_TIM10_Init>
  MX_TIM11_Init();
 8000a16:	f001 f827 	bl	8001a68 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000a1a:	f001 f873 	bl	8001b04 <MX_TIM12_Init>
  MX_UART5_Init();
 8000a1e:	f001 f8b7 	bl	8001b90 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000a22:	f001 f8e5 	bl	8001bf0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a26:	f001 f913 	bl	8001c50 <MX_USART6_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000a2a:	f001 f941 	bl	8001cb0 <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 8000a2e:	f000 fa23 	bl	8000e78 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t lcd_status = LCD_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
  lcd_status = BSP_LCD_Init();
 8000a36:	f003 fc28 	bl	800428a <BSP_LCD_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if (lcd_status != LCD_OK)
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <main+0x98>
  {
	  Error_Handler();
 8000a44:	f001 fb54 	bl	80020f0 <Error_Handler>
  }

  // LCD setup
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a48:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f003 fdb9 	bl	80045c4 <BSP_LCD_LayerDefaultInit>

  BSP_LCD_SelectLayer(0);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f003 fe0a 	bl	800466c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(colors[colorIndex]);
 8000a58:	4b43      	ldr	r3, [pc, #268]	@ (8000b68 <main+0x1b8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b43      	ldr	r3, [pc, #268]	@ (8000b6c <main+0x1bc>)
 8000a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fec5 	bl	80047f4 <BSP_LCD_Clear>
  BSP_LCD_SetLayerVisible(0, ENABLE);
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f003 fe0d 	bl	800468c <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetBrightness(100);
 8000a72:	2064      	movs	r0, #100	@ 0x64
 8000a74:	f004 f860 	bl	8004b38 <BSP_LCD_SetBrightness>

  BSP_LCD_SetFont(&Font24);
 8000a78:	483d      	ldr	r0, [pc, #244]	@ (8000b70 <main+0x1c0>)
 8000a7a:	f003 fe8b 	bl	8004794 <BSP_LCD_SetFont>
  BSP_LCD_SetBackColor(colors[colorIndex]);
 8000a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b68 <main+0x1b8>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b39      	ldr	r3, [pc, #228]	@ (8000b6c <main+0x1bc>)
 8000a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f003 fe68 	bl	8004760 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a90:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8000a94:	f003 fe38 	bl	8004708 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)"Welcome to MotionSensor!", CENTER_MODE);
 8000a98:	f003 fe96 	bl	80047c8 <BSP_LCD_GetFont>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	88db      	ldrh	r3, [r3, #6]
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4413      	add	r3, r2
 8000aa6:	b299      	uxth	r1, r3
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4a32      	ldr	r2, [pc, #200]	@ (8000b74 <main+0x1c4>)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f003 ff0d 	bl	80048cc <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, LINE(10), (uint8_t *)"Tap the button to change background color", CENTER_MODE);
 8000ab2:	f003 fe89 	bl	80047c8 <BSP_LCD_GetFont>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	88db      	ldrh	r3, [r3, #6]
 8000aba:	461a      	mov	r2, r3
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b78 <main+0x1c8>)
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f003 feff 	bl	80048cc <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, LINE(11), (uint8_t *)"LED is activated on motion", CENTER_MODE);
 8000ace:	f003 fe7b 	bl	80047c8 <BSP_LCD_GetFont>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	88db      	ldrh	r3, [r3, #6]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	0092      	lsls	r2, r2, #2
 8000ada:	441a      	add	r2, r3
 8000adc:	0052      	lsls	r2, r2, #1
 8000ade:	4413      	add	r3, r2
 8000ae0:	b299      	uxth	r1, r3
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4a25      	ldr	r2, [pc, #148]	@ (8000b7c <main+0x1cc>)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f003 fef0 	bl	80048cc <BSP_LCD_DisplayStringAt>

  DrawButton();
 8000aec:	f7ff fd20 	bl	8000530 <DrawButton>

  // Ensure LCD is on
  BSP_LCD_DisplayOn();
 8000af0:	f004 f80e 	bl	8004b10 <BSP_LCD_DisplayOn>

  //touch screen setup
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 8000af4:	f003 fd4e 	bl	8004594 <BSP_LCD_GetXSize>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29c      	uxth	r4, r3
 8000afc:	f003 fd56 	bl	80045ac <BSP_LCD_GetYSize>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4619      	mov	r1, r3
 8000b06:	4620      	mov	r0, r4
 8000b08:	f004 fba0 	bl	800524c <BSP_TS_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <main+0x166>
  {
      Error_Handler();
 8000b12:	f001 faed 	bl	80020f0 <Error_Handler>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b16:	f00f fb5f 	bl	80101d8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  syncSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f00f fc98 	bl	8010454 <osSemaphoreNew>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <main+0x1d0>)
 8000b28:	6013      	str	r3, [r2, #0]
  motionSemaphoreHandle = osSemaphoreNew(1, 0, NULL);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f00f fc90 	bl	8010454 <osSemaphoreNew>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4a13      	ldr	r2, [pc, #76]	@ (8000b84 <main+0x1d4>)
 8000b38:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b3a:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <main+0x1d8>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <main+0x1dc>)
 8000b40:	f00f fbb4 	bl	80102ac <osThreadNew>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <main+0x1e0>)
 8000b48:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(StartMotionTask, NULL, NULL);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <main+0x1e4>)
 8000b50:	f00f fbac 	bl	80102ac <osThreadNew>
  osThreadNew(StartTouchTask, NULL, &touchTask_attributes);
 8000b54:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <main+0x1e8>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4810      	ldr	r0, [pc, #64]	@ (8000b9c <main+0x1ec>)
 8000b5a:	f00f fba7 	bl	80102ac <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b5e:	f00f fb6f 	bl	8010240 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b62:	bf00      	nop
 8000b64:	e7fd      	b.n	8000b62 <main+0x1b2>
 8000b66:	bf00      	nop
 8000b68:	200010d1 	.word	0x200010d1
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000058 	.word	0x20000058
 8000b74:	08013bb0 	.word	0x08013bb0
 8000b78:	08013bcc 	.word	0x08013bcc
 8000b7c:	08013bf8 	.word	0x08013bf8
 8000b80:	200010e0 	.word	0x200010e0
 8000b84:	200010e4 	.word	0x200010e4
 8000b88:	08013c2c 	.word	0x08013c2c
 8000b8c:	080020bd 	.word	0x080020bd
 8000b90:	200010bc 	.word	0x200010bc
 8000b94:	08000879 	.word	0x08000879
 8000b98:	08013c50 	.word	0x08013c50
 8000b9c:	080006e1 	.word	0x080006e1

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b094      	sub	sp, #80	@ 0x50
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2234      	movs	r2, #52	@ 0x34
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f012 fef4 	bl	801399c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bc4:	f00a fc06 	bl	800b3d4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	4b31      	ldr	r3, [pc, #196]	@ (8000c90 <SystemClock_Config+0xf0>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a30      	ldr	r2, [pc, #192]	@ (8000c90 <SystemClock_Config+0xf0>)
 8000bce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8000c90 <SystemClock_Config+0xf0>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c94 <SystemClock_Config+0xf4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a2b      	ldr	r2, [pc, #172]	@ (8000c94 <SystemClock_Config+0xf4>)
 8000be6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b29      	ldr	r3, [pc, #164]	@ (8000c94 <SystemClock_Config+0xf4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c16:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c18:	2319      	movs	r3, #25
 8000c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000c1c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8000c20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c22:	2302      	movs	r3, #2
 8000c24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c26:	2304      	movs	r3, #4
 8000c28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4618      	mov	r0, r3
 8000c34:	f00a fcf0 	bl	800b618 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000c3e:	f001 fa57 	bl	80020f0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c42:	f00a fbd7 	bl	800b3f4 <HAL_PWREx_EnableOverDrive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c4c:	f001 fa50 	bl	80020f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	2107      	movs	r1, #7
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00a ff80 	bl	800bb74 <HAL_RCC_ClockConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000c7a:	f001 fa39 	bl	80020f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2000      	movs	r0, #0
 8000c84:	f00b f862 	bl	800bd4c <HAL_RCC_MCOConfig>
}
 8000c88:	bf00      	nop
 8000c8a:	3750      	adds	r7, #80	@ 0x50
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0a4      	sub	sp, #144	@ 0x90
 8000c9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2290      	movs	r2, #144	@ 0x90
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f012 fe79 	bl	801399c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 8000caa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <PeriphCommonClock_Config+0x50>)
 8000cac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000cae:	23c0      	movs	r3, #192	@ 0xc0
 8000cb0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f00b f9cb 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8000cdc:	f001 fa08 	bl	80020f0 <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3790      	adds	r7, #144	@ 0x90
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	00180008 	.word	0x00180008

08000cec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d00:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <MX_ADC1_Init+0x9c>)
 8000d02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d06:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d2e:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <MX_ADC1_Init+0xa0>)
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d32:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d4e:	f004 fc41 	bl	80055d4 <HAL_ADC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d58:	f001 f9ca 	bl	80020f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d5c:	230c      	movs	r3, #12
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_ADC1_Init+0x98>)
 8000d6e:	f004 fc75 	bl	800565c <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d78:	f001 f9ba 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000248 	.word	0x20000248
 8000d88:	40012000 	.word	0x40012000
 8000d8c:	0f000001 	.word	0x0f000001

08000d90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000da2:	4b21      	ldr	r3, [pc, #132]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000da4:	4a21      	ldr	r2, [pc, #132]	@ (8000e2c <MX_ADC3_Init+0x9c>)
 8000da6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000daa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000dae:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dd2:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <MX_ADC3_Init+0xa0>)
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000df0:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000df2:	f004 fbef 	bl	80055d4 <HAL_ADC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000dfc:	f001 f978 	bl	80020f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e00:	2306      	movs	r3, #6
 8000e02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_ADC3_Init+0x98>)
 8000e12:	f004 fc23 	bl	800565c <HAL_ADC_ConfigChannel>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e1c:	f001 f968 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000290 	.word	0x20000290
 8000e2c:	40012200 	.word	0x40012200
 8000e30:	0f000001 	.word	0x0f000001

08000e34 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <MX_CRC_Init+0x40>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <MX_CRC_Init+0x3c>)
 8000e5e:	f005 f8bd 	bl	8005fdc <HAL_CRC_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e68:	f001 f942 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200002d8 	.word	0x200002d8
 8000e74:	40023000 	.word	0x40023000

08000e78 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e7e:	4a19      	ldr	r2, [pc, #100]	@ (8000ee4 <MX_DFSDM1_Init+0x6c>)
 8000e80:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8000e82:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e90:	2202      	movs	r2, #2
 8000e92:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e9a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_DFSDM1_Init+0x68>)
 8000ece:	f005 f977 	bl	80061c0 <HAL_DFSDM_ChannelInit>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000ed8:	f001 f90a 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200002fc 	.word	0x200002fc
 8000ee4:	40017400 	.word	0x40017400

08000ee8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000eec:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <MX_DMA2D_Init+0x6c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f28:	4809      	ldr	r0, [pc, #36]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f2a:	f005 fc13 	bl	8006754 <HAL_DMA2D_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 8000f34:	f001 f8dc 	bl	80020f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_DMA2D_Init+0x68>)
 8000f3c:	f005 fe88 	bl	8006c50 <HAL_DMA2D_ConfigLayer>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 8000f46:	f001 f8d3 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000334 	.word	0x20000334
 8000f54:	4002b000 	.word	0x4002b000

08000f58 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0aa      	sub	sp, #168	@ 0xa8
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000f5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000f6a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000f6e:	2224      	movs	r2, #36	@ 0x24
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f012 fd12 	bl	801399c <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000f78:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000f8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f8e:	2234      	movs	r2, #52	@ 0x34
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f012 fd02 	bl	801399c <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000f98:	463b      	mov	r3, r7
 8000f9a:	222c      	movs	r2, #44	@ 0x2c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f012 fcfc 	bl	801399c <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000fa6:	4a6b      	ldr	r2, [pc, #428]	@ (8001154 <MX_DSIHOST_DSI_Init+0x1fc>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000faa:	4b69      	ldr	r3, [pc, #420]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000fb0:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000fb6:	4b66      	ldr	r3, [pc, #408]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000fbc:	2314      	movs	r3, #20
 8000fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000fce:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	485e      	ldr	r0, [pc, #376]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8000fd6:	f005 ffbd 	bl	8006f54 <HAL_DSI_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DSIHOST_DSI_Init+0x8c>
  {
    Error_Handler();
 8000fe0:	f001 f886 	bl	80020f0 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  HostTimeouts.BTATimeout = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8001016:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800101a:	4619      	mov	r1, r3
 800101c:	484c      	ldr	r0, [pc, #304]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 800101e:	f006 ff23 	bl	8007e68 <HAL_DSI_ConfigHostTimeouts>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_DSIHOST_DSI_Init+0xd4>
  {
    Error_Handler();
 8001028:	f001 f862 	bl	80020f0 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 800102c:	231c      	movs	r3, #28
 800102e:	663b      	str	r3, [r7, #96]	@ 0x60
  PhyTimings.ClockLaneLP2HSTime = 33;
 8001030:	2321      	movs	r3, #33	@ 0x21
 8001032:	667b      	str	r3, [r7, #100]	@ 0x64
  PhyTimings.DataLaneHS2LPTime = 15;
 8001034:	230f      	movs	r3, #15
 8001036:	66bb      	str	r3, [r7, #104]	@ 0x68
  PhyTimings.DataLaneLP2HSTime = 25;
 8001038:	2319      	movs	r3, #25
 800103a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	673b      	str	r3, [r7, #112]	@ 0x70
  PhyTimings.StopWaitTime = 10;
 8001040:	230a      	movs	r3, #10
 8001042:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8001044:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001048:	4619      	mov	r1, r3
 800104a:	4841      	ldr	r0, [pc, #260]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 800104c:	f006 fea2 	bl	8007d94 <HAL_DSI_ConfigPhyTimer>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DSIHOST_DSI_Init+0x102>
  {
    Error_Handler();
 8001056:	f001 f84b 	bl	80020f0 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800105a:	2104      	movs	r1, #4
 800105c:	483c      	ldr	r0, [pc, #240]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 800105e:	f006 fe71 	bl	8007d44 <HAL_DSI_ConfigFlowControl>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_DSIHOST_DSI_Init+0x114>
  {
    Error_Handler();
 8001068:	f001 f842 	bl	80020f0 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800106c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001070:	4837      	ldr	r0, [pc, #220]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001072:	f007 f8b7 	bl	80081e4 <HAL_DSI_SetLowPowerRXFilter>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DSIHOST_DSI_Init+0x128>
  {
    Error_Handler();
 800107c:	f001 f838 	bl	80020f0 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	4833      	ldr	r0, [pc, #204]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001084:	f006 f95a 	bl	800733c <HAL_DSI_ConfigErrorMonitor>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_DSIHOST_DSI_Init+0x13a>
  {
    Error_Handler();
 800108e:	f001 f82f 	bl	80020f0 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 8001092:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8001098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800109c:	633b      	str	r3, [r7, #48]	@ 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800109e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 80010a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 80010aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 80010b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b4:	643b      	str	r3, [r7, #64]	@ 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 80010b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80010ba:	647b      	str	r3, [r7, #68]	@ 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 80010bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 80010c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 80010c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80010cc:	653b      	str	r3, [r7, #80]	@ 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 80010ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010d2:	657b      	str	r3, [r7, #84]	@ 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 80010d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 80010de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010e2:	4619      	mov	r1, r3
 80010e4:	481a      	ldr	r0, [pc, #104]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 80010e6:	f006 fdcf 	bl	8007c88 <HAL_DSI_ConfigCommand>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_DSIHOST_DSI_Init+0x19c>
  {
    Error_Handler();
 80010f0:	f000 fffe 	bl	80020f0 <Error_Handler>
  }
  CmdCfg.VirtualChannelID = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 80010f8:	2305      	movs	r3, #5
 80010fa:	607b      	str	r3, [r7, #4]
  CmdCfg.CommandSize = 400;
 80010fc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001100:	60bb      	str	r3, [r7, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001102:	2310      	movs	r3, #16
 8001104:	60fb      	str	r3, [r7, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800110a:	2304      	movs	r3, #4
 800110c:	617b      	str	r3, [r7, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800111a:	2340      	movs	r3, #64	@ 0x40
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800111e:	2301      	movs	r3, #1
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	480a      	ldr	r0, [pc, #40]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 8001128:	f006 fcd4 	bl	8007ad4 <HAL_DSI_ConfigAdaptedCommandMode>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_DSIHOST_DSI_Init+0x1de>
  {
    Error_Handler();
 8001132:	f000 ffdd 	bl	80020f0 <Error_Handler>
  }
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <MX_DSIHOST_DSI_Init+0x1f8>)
 800113a:	f006 faa2 	bl	8007682 <HAL_DSI_SetGenericVCID>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_DSIHOST_DSI_Init+0x1f0>
  {
    Error_Handler();
 8001144:	f000 ffd4 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	37a8      	adds	r7, #168	@ 0xa8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2000038c 	.word	0x2000038c
 8001154:	40016c00 	.word	0x40016c00

08001158 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <MX_ETH_Init+0x84>)
 800115e:	4a20      	ldr	r2, [pc, #128]	@ (80011e0 <MX_ETH_Init+0x88>)
 8001160:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_ETH_Init+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_ETH_Init+0x8c>)
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_ETH_Init+0x8c>)
 8001170:	22e1      	movs	r2, #225	@ 0xe1
 8001172:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_ETH_Init+0x8c>)
 8001176:	2200      	movs	r2, #0
 8001178:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_ETH_Init+0x8c>)
 800117c:	2200      	movs	r2, #0
 800117e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_ETH_Init+0x8c>)
 8001182:	2200      	movs	r2, #0
 8001184:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_ETH_Init+0x84>)
 8001188:	4a16      	ldr	r2, [pc, #88]	@ (80011e4 <MX_ETH_Init+0x8c>)
 800118a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800118c:	4b13      	ldr	r3, [pc, #76]	@ (80011dc <MX_ETH_Init+0x84>)
 800118e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001192:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_ETH_Init+0x84>)
 8001196:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <MX_ETH_Init+0x90>)
 8001198:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_ETH_Init+0x84>)
 800119c:	4a13      	ldr	r2, [pc, #76]	@ (80011ec <MX_ETH_Init+0x94>)
 800119e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_ETH_Init+0x84>)
 80011a2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80011a6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011a8:	480c      	ldr	r0, [pc, #48]	@ (80011dc <MX_ETH_Init+0x84>)
 80011aa:	f007 f849 	bl	8008240 <HAL_ETH_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80011b4:	f000 ff9c 	bl	80020f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011b8:	2238      	movs	r2, #56	@ 0x38
 80011ba:	2100      	movs	r1, #0
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <MX_ETH_Init+0x98>)
 80011be:	f012 fbed 	bl	801399c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <MX_ETH_Init+0x98>)
 80011c4:	2221      	movs	r2, #33	@ 0x21
 80011c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <MX_ETH_Init+0x98>)
 80011ca:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80011ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <MX_ETH_Init+0x98>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003a8 	.word	0x200003a8
 80011e0:	40028000 	.word	0x40028000
 80011e4:	200010e8 	.word	0x200010e8
 80011e8:	20000154 	.word	0x20000154
 80011ec:	200000b4 	.word	0x200000b4
 80011f0:	20000210 	.word	0x20000210

080011f4 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 80011fa:	4a16      	ldr	r2, [pc, #88]	@ (8001254 <MX_HDMI_CEC_Init+0x60>)
 80011fc:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 800120c:	2210      	movs	r2, #16
 800120e:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8001228:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 800122a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800122e:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001232:	2200      	movs	r2, #0
 8001234:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <MX_HDMI_CEC_Init+0x64>)
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_HDMI_CEC_Init+0x5c>)
 800123e:	f004 fc5d 	bl	8005afc <HAL_CEC_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8001248:	f000 ff52 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000458 	.word	0x20000458
 8001254:	40006c00 	.word	0x40006c00
 8001258:	200010c0 	.word	0x200010c0

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001262:	4a1c      	ldr	r2, [pc, #112]	@ (80012d4 <MX_I2C1_Init+0x78>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <MX_I2C1_Init+0x7c>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001278:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800127e:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <MX_I2C1_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001290:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001296:	480e      	ldr	r0, [pc, #56]	@ (80012d0 <MX_I2C1_Init+0x74>)
 8001298:	f007 fe0a 	bl	8008eb0 <HAL_I2C_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012a2:	f000 ff25 	bl	80020f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a6:	2100      	movs	r1, #0
 80012a8:	4809      	ldr	r0, [pc, #36]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012aa:	f008 fbcb 	bl	8009a44 <HAL_I2CEx_ConfigAnalogFilter>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012b4:	f000 ff1c 	bl	80020f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <MX_I2C1_Init+0x74>)
 80012bc:	f008 fc0d 	bl	8009ada <HAL_I2CEx_ConfigDigitalFilter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012c6:	f000 ff13 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000049c 	.word	0x2000049c
 80012d4:	40005400 	.word	0x40005400
 80012d8:	20404768 	.word	0x20404768

080012dc <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <MX_I2C4_Init+0x74>)
 80012e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001354 <MX_I2C4_Init+0x78>)
 80012e4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <MX_I2C4_Init+0x74>)
 80012e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001358 <MX_I2C4_Init+0x7c>)
 80012ea:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80012ec:	4b18      	ldr	r3, [pc, #96]	@ (8001350 <MX_I2C4_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f2:	4b17      	ldr	r3, [pc, #92]	@ (8001350 <MX_I2C4_Init+0x74>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_I2C4_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <MX_I2C4_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001304:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <MX_I2C4_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_I2C4_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <MX_I2C4_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001316:	480e      	ldr	r0, [pc, #56]	@ (8001350 <MX_I2C4_Init+0x74>)
 8001318:	f007 fdca 	bl	8008eb0 <HAL_I2C_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001322:	f000 fee5 	bl	80020f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001326:	2100      	movs	r1, #0
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <MX_I2C4_Init+0x74>)
 800132a:	f008 fb8b 	bl	8009a44 <HAL_I2CEx_ConfigAnalogFilter>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001334:	f000 fedc 	bl	80020f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001338:	2100      	movs	r1, #0
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_I2C4_Init+0x74>)
 800133c:	f008 fbcd 	bl	8009ada <HAL_I2CEx_ConfigDigitalFilter>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001346:	f000 fed3 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200004f0 	.word	0x200004f0
 8001354:	40006000 	.word	0x40006000
 8001358:	20404768 	.word	0x20404768

0800135c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08e      	sub	sp, #56	@ 0x38
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2234      	movs	r2, #52	@ 0x34
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f012 fb17 	bl	801399c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800136e:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <MX_LTDC_Init+0xf8>)
 8001370:	4a39      	ldr	r2, [pc, #228]	@ (8001458 <MX_LTDC_Init+0xfc>)
 8001372:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001374:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <MX_LTDC_Init+0xf8>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800137a:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <MX_LTDC_Init+0xf8>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001380:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <MX_LTDC_Init+0xf8>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001386:	4b33      	ldr	r3, [pc, #204]	@ (8001454 <MX_LTDC_Init+0xf8>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 800138c:	4b31      	ldr	r3, [pc, #196]	@ (8001454 <MX_LTDC_Init+0xf8>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 0;
 8001392:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <MX_LTDC_Init+0xf8>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 1;
 8001398:	4b2e      	ldr	r3, [pc, #184]	@ (8001454 <MX_LTDC_Init+0xf8>)
 800139a:	2201      	movs	r2, #1
 800139c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800139e:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 801;
 80013a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013a6:	f240 3221 	movw	r2, #801	@ 0x321
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 80013ac:	4b29      	ldr	r3, [pc, #164]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013ae:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 802;
 80013b4:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013b6:	f240 3222 	movw	r2, #802	@ 0x322
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 482;
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013be:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80013c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013c4:	4b23      	ldr	r3, [pc, #140]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013cc:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80013dc:	481d      	ldr	r0, [pc, #116]	@ (8001454 <MX_LTDC_Init+0xf8>)
 80013de:	f008 fbc9 	bl	8009b74 <HAL_LTDC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80013e8:	f000 fe82 	bl	80020f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 200;
 80013f0:	23c8      	movs	r3, #200	@ 0xc8
 80013f2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 80013f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013fc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80013fe:	2302      	movs	r3, #2
 8001400:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001402:	23ff      	movs	r3, #255	@ 0xff
 8001404:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800140a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800140e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001410:	2307      	movs	r3, #7
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001414:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 200;
 800141a:	23c8      	movs	r3, #200	@ 0xc8
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 480;
 800141e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_LTDC_Init+0xf8>)
 800143e:	f008 fd2b 	bl	8009e98 <HAL_LTDC_ConfigLayer>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001448:	f000 fe52 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3738      	adds	r7, #56	@ 0x38
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000544 	.word	0x20000544
 8001458:	40016800 	.word	0x40016800

0800145c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <MX_QUADSPI_Init+0x54>)
 8001464:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001466:	4b11      	ldr	r3, [pc, #68]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001468:	2201      	movs	r2, #1
 800146a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 16;
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 800146e:	2210      	movs	r2, #16
 8001470:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001474:	2210      	movs	r2, #16
 8001476:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 800147a:	221a      	movs	r2, #26
 800147c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001480:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001484:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800148c:	4b07      	ldr	r3, [pc, #28]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001492:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <MX_QUADSPI_Init+0x50>)
 800149a:	f009 fffb 	bl	800b494 <HAL_QSPI_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80014a4:	f000 fe24 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200005ec 	.word	0x200005ec
 80014b0:	a0001000 	.word	0xa0001000

080014b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b090      	sub	sp, #64	@ 0x40
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2228      	movs	r2, #40	@ 0x28
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f012 fa61 	bl	801399c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014da:	4b42      	ldr	r3, [pc, #264]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014dc:	4a42      	ldr	r2, [pc, #264]	@ (80015e8 <MX_RTC_Init+0x134>)
 80014de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014e0:	4b40      	ldr	r3, [pc, #256]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014e6:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014e8:	227f      	movs	r2, #127	@ 0x7f
 80014ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014ec:	4b3d      	ldr	r3, [pc, #244]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014ee:	22ff      	movs	r2, #255	@ 0xff
 80014f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_ALARMA;
 80014f2:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014f4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80014f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014fa:	4b3a      	ldr	r3, [pc, #232]	@ (80015e4 <MX_RTC_Init+0x130>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <MX_RTC_Init+0x130>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001506:	4837      	ldr	r0, [pc, #220]	@ (80015e4 <MX_RTC_Init+0x130>)
 8001508:	f00b fb46 	bl	800cb98 <HAL_RTC_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001512:	f000 fded 	bl	80020f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001530:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	482a      	ldr	r0, [pc, #168]	@ (80015e4 <MX_RTC_Init+0x130>)
 800153a:	f00b fbb1 	bl	800cca0 <HAL_RTC_SetTime>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001544:	f000 fdd4 	bl	80020f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001554:	2301      	movs	r3, #1
 8001556:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001560:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	481e      	ldr	r0, [pc, #120]	@ (80015e4 <MX_RTC_Init+0x130>)
 800156a:	f00b fc33 	bl	800cdd4 <HAL_RTC_SetDate>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001574:	f000 fdbc 	bl	80020f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001578:	2300      	movs	r3, #0
 800157a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800157c:	2300      	movs	r3, #0
 800157e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001580:	2300      	movs	r3, #0
 8001582:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800159c:	2301      	movs	r3, #1
 800159e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80015a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	2201      	movs	r2, #1
 80015ac:	4619      	mov	r1, r3
 80015ae:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <MX_RTC_Init+0x130>)
 80015b0:	f00b fc94 	bl	800cedc <HAL_RTC_SetAlarm>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80015ba:	f000 fd99 	bl	80020f0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80015be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	4806      	ldr	r0, [pc, #24]	@ (80015e4 <MX_RTC_Init+0x130>)
 80015cc:	f00b fc86 	bl	800cedc <HAL_RTC_SetAlarm>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80015d6:	f000 fd8b 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	3740      	adds	r7, #64	@ 0x40
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000638 	.word	0x20000638
 80015e8:	40002800 	.word	0x40002800

080015ec <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80015f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <MX_SAI1_Init+0x13c>)
 80015f2:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <MX_SAI1_Init+0x140>)
 80015f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80015f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <MX_SAI1_Init+0x13c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80015fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001728 <MX_SAI1_Init+0x13c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001602:	4b49      	ldr	r3, [pc, #292]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001604:	2240      	movs	r2, #64	@ 0x40
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001608:	4b47      	ldr	r3, [pc, #284]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800160a:	2200      	movs	r2, #0
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800160e:	4b46      	ldr	r3, [pc, #280]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001614:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800161a:	4b43      	ldr	r3, [pc, #268]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001620:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001626:	4b40      	ldr	r3, [pc, #256]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800162c:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800162e:	4a40      	ldr	r2, [pc, #256]	@ (8001730 <MX_SAI1_Init+0x144>)
 8001630:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001632:	4b3d      	ldr	r3, [pc, #244]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001638:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001644:	4b38      	ldr	r3, [pc, #224]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800164c:	2208      	movs	r2, #8
 800164e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001650:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001652:	2201      	movs	r2, #1
 8001654:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001656:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001658:	2200      	movs	r2, #0
 800165a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800165c:	4b32      	ldr	r3, [pc, #200]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800165e:	2200      	movs	r2, #0
 8001660:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001662:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001664:	2200      	movs	r2, #0
 8001666:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001668:	4b2f      	ldr	r3, [pc, #188]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800166a:	2200      	movs	r2, #0
 800166c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800166e:	4b2e      	ldr	r3, [pc, #184]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001670:	2200      	movs	r2, #0
 8001672:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001674:	4b2c      	ldr	r3, [pc, #176]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001676:	2201      	movs	r2, #1
 8001678:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <MX_SAI1_Init+0x13c>)
 800167c:	2200      	movs	r2, #0
 800167e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001680:	4829      	ldr	r0, [pc, #164]	@ (8001728 <MX_SAI1_Init+0x13c>)
 8001682:	f00b fdf5 	bl	800d270 <HAL_SAI_Init>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 800168c:	f000 fd30 	bl	80020f0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8001690:	4b28      	ldr	r3, [pc, #160]	@ (8001734 <MX_SAI1_Init+0x148>)
 8001692:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <MX_SAI1_Init+0x14c>)
 8001694:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <MX_SAI1_Init+0x148>)
 8001698:	2200      	movs	r2, #0
 800169a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <MX_SAI1_Init+0x148>)
 800169e:	2203      	movs	r2, #3
 80016a0:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80016a2:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016a4:	2240      	movs	r2, #64	@ 0x40
 80016a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80016a8:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80016ae:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80016b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80016ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016da:	2200      	movs	r2, #0
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016e0:	2208      	movs	r2, #8
 80016e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80016e4:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001734 <MX_SAI1_Init+0x148>)
 80016fe:	2200      	movs	r2, #0
 8001700:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001702:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <MX_SAI1_Init+0x148>)
 8001704:	2200      	movs	r2, #0
 8001706:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001708:	4b0a      	ldr	r3, [pc, #40]	@ (8001734 <MX_SAI1_Init+0x148>)
 800170a:	2201      	movs	r2, #1
 800170c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800170e:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <MX_SAI1_Init+0x148>)
 8001710:	2200      	movs	r2, #0
 8001712:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001714:	4807      	ldr	r0, [pc, #28]	@ (8001734 <MX_SAI1_Init+0x148>)
 8001716:	f00b fdab 	bl	800d270 <HAL_SAI_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001720:	f000 fce6 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000658 	.word	0x20000658
 800172c:	40015804 	.word	0x40015804
 8001730:	0002ee00 	.word	0x0002ee00
 8001734:	200006dc 	.word	0x200006dc
 8001738:	40015824 	.word	0x40015824

0800173c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_SAI2_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	@ (8001790 <MX_SAI2_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_SAI2_Init+0x50>)
 8001748:	2204      	movs	r2, #4
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_SAI2_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_SAI2_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_SAI2_Init+0x50>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800175e:	4b0b      	ldr	r3, [pc, #44]	@ (800178c <MX_SAI2_Init+0x50>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_SAI2_Init+0x50>)
 8001766:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 800176a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <MX_SAI2_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_SAI2_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_SAI2_Init+0x50>)
 800177a:	f00b fd79 	bl	800d270 <HAL_SAI_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_SAI2_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 fcb4 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000760 	.word	0x20000760
 8001790:	40015c04 	.word	0x40015c04

08001794 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001798:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 800179a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800179e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017a6:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80017b4:	4b0f      	ldr	r3, [pc, #60]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_SPDIFRX_Init+0x60>)
 80017e0:	f00b ff8e 	bl	800d700 <HAL_SPDIFRX_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 80017ea:	f000 fc81 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200007e4 	.word	0x200007e4

080017f8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <MX_SPI2_Init+0x70>)
 80017fe:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <MX_SPI2_Init+0x74>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b19      	ldr	r3, [pc, #100]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001804:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <MX_SPI2_Init+0x70>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001812:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001816:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001818:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <MX_SPI2_Init+0x70>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <MX_SPI2_Init+0x70>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001830:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <MX_SPI2_Init+0x70>)
 800183e:	2200      	movs	r2, #0
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001844:	2207      	movs	r2, #7
 8001846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001848:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <MX_SPI2_Init+0x70>)
 800184a:	2200      	movs	r2, #0
 800184c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184e:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001850:	2208      	movs	r2, #8
 8001852:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	@ (8001868 <MX_SPI2_Init+0x70>)
 8001856:	f00b ffaf 	bl	800d7b8 <HAL_SPI_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_SPI2_Init+0x6c>
  {
    Error_Handler();
 8001860:	f000 fc46 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000830 	.word	0x20000830
 800186c:	40003800 	.word	0x40003800

08001870 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <MX_TIM1_Init+0xa0>)
 8001890:	4a20      	ldr	r2, [pc, #128]	@ (8001914 <MX_TIM1_Init+0xa4>)
 8001892:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <MX_TIM1_Init+0xa0>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <MX_TIM1_Init+0xa0>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ae:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ba:	4815      	ldr	r0, [pc, #84]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018bc:	f00c f827 	bl	800d90e <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80018c6:	f000 fc13 	bl	80020f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	480e      	ldr	r0, [pc, #56]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018d8:	f00c fb5a 	bl	800df90 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80018e2:	f000 fc05 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4806      	ldr	r0, [pc, #24]	@ (8001910 <MX_TIM1_Init+0xa0>)
 80018f8:	f00c ffe0 	bl	800e8bc <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001902:	f000 fbf5 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000894 	.word	0x20000894
 8001914:	40010000 	.word	0x40010000

08001918 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	@ 0x28
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
 8001938:	615a      	str	r2, [r3, #20]
 800193a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800193c:	4b21      	ldr	r3, [pc, #132]	@ (80019c4 <MX_TIM3_Init+0xac>)
 800193e:	4a22      	ldr	r2, [pc, #136]	@ (80019c8 <MX_TIM3_Init+0xb0>)
 8001940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <MX_TIM3_Init+0xac>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b1e      	ldr	r3, [pc, #120]	@ (80019c4 <MX_TIM3_Init+0xac>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800194e:	4b1d      	ldr	r3, [pc, #116]	@ (80019c4 <MX_TIM3_Init+0xac>)
 8001950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001954:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <MX_TIM3_Init+0xac>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b19      	ldr	r3, [pc, #100]	@ (80019c4 <MX_TIM3_Init+0xac>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001962:	4818      	ldr	r0, [pc, #96]	@ (80019c4 <MX_TIM3_Init+0xac>)
 8001964:	f00c f8a2 	bl	800daac <HAL_TIM_PWM_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800196e:	f000 fbbf 	bl	80020f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	4810      	ldr	r0, [pc, #64]	@ (80019c4 <MX_TIM3_Init+0xac>)
 8001982:	f00c ff9b 	bl	800e8bc <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800198c:	f000 fbb0 	bl	80020f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001990:	2360      	movs	r3, #96	@ 0x60
 8001992:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	2208      	movs	r2, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <MX_TIM3_Init+0xac>)
 80019a8:	f00c f9de 	bl	800dd68 <HAL_TIM_PWM_ConfigChannel>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80019b2:	f000 fb9d 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019b6:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <MX_TIM3_Init+0xac>)
 80019b8:	f001 fa14 	bl	8002de4 <HAL_TIM_MspPostInit>

}
 80019bc:	bf00      	nop
 80019be:	3728      	adds	r7, #40	@ 0x28
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200008e0 	.word	0x200008e0
 80019c8:	40000400 	.word	0x40000400

080019cc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	611a      	str	r2, [r3, #16]
 80019e0:	615a      	str	r2, [r3, #20]
 80019e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <MX_TIM10_Init+0x94>)
 80019e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a64 <MX_TIM10_Init+0x98>)
 80019e8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM10_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <MX_TIM10_Init+0x94>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80019f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_TIM10_Init+0x94>)
 80019f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019fc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b18      	ldr	r3, [pc, #96]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a0c:	f00b ff7f 	bl	800d90e <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001a16:	f000 fb6b 	bl	80020f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001a1a:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a1c:	f00c f846 	bl	800daac <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001a26:	f000 fb63 	bl	80020f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	@ 0x60
 8001a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a42:	f00c f991 	bl	800dd68 <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001a4c:	f000 fb50 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM10_Init+0x94>)
 8001a52:	f001 f9c7 	bl	8002de4 <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000092c 	.word	0x2000092c
 8001a64:	40014400 	.word	0x40014400

08001a68 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
 8001a7c:	615a      	str	r2, [r3, #20]
 8001a7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001a82:	4a1f      	ldr	r2, [pc, #124]	@ (8001b00 <MX_TIM11_Init+0x98>)
 8001a84:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001a94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a98:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001aa6:	4815      	ldr	r0, [pc, #84]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001aa8:	f00b ff31 	bl	800d90e <HAL_TIM_Base_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001ab2:	f000 fb1d 	bl	80020f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001ab6:	4811      	ldr	r0, [pc, #68]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001ab8:	f00b fff8 	bl	800daac <HAL_TIM_PWM_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001ac2:	f000 fb15 	bl	80020f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac6:	2360      	movs	r3, #96	@ 0x60
 8001ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4807      	ldr	r0, [pc, #28]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001ade:	f00c f943 	bl	800dd68 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001ae8:	f000 fb02 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001aec:	4803      	ldr	r0, [pc, #12]	@ (8001afc <MX_TIM11_Init+0x94>)
 8001aee:	f001 f979 	bl	8002de4 <HAL_TIM_MspPostInit>

}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000978 	.word	0x20000978
 8001b00:	40014800 	.word	0x40014800

08001b04 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	615a      	str	r2, [r3, #20]
 8001b1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <MX_TIM12_Init+0x88>)
 8001b20:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001b22:	4b19      	ldr	r3, [pc, #100]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b34:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001b42:	4811      	ldr	r0, [pc, #68]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b44:	f00b ffb2 	bl	800daac <HAL_TIM_PWM_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001b4e:	f000 facf 	bl	80020f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	2360      	movs	r3, #96	@ 0x60
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2200      	movs	r2, #0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4807      	ldr	r0, [pc, #28]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b6a:	f00c f8fd 	bl	800dd68 <HAL_TIM_PWM_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001b74:	f000 fabc 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <MX_TIM12_Init+0x84>)
 8001b7a:	f001 f933 	bl	8002de4 <HAL_TIM_MspPostInit>

}
 8001b7e:	bf00      	nop
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200009c4 	.word	0x200009c4
 8001b8c:	40001800 	.word	0x40001800

08001b90 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001b96:	4a15      	ldr	r2, [pc, #84]	@ (8001bec <MX_UART5_Init+0x5c>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bcc:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <MX_UART5_Init+0x58>)
 8001bd4:	f00c ff1e 	bl	800ea14 <HAL_UART_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001bde:	f000 fa87 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000a10 	.word	0x20000a10
 8001bec:	40005000 	.word	0x40005000

08001bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001bf6:	4a15      	ldr	r2, [pc, #84]	@ (8001c4c <MX_USART1_UART_Init+0x5c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001bfc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c02:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c16:	220c      	movs	r2, #12
 8001c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_USART1_UART_Init+0x58>)
 8001c34:	f00c feee 	bl	800ea14 <HAL_UART_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c3e:	f000 fa57 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000a98 	.word	0x20000a98
 8001c4c:	40011000 	.word	0x40011000

08001c50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c56:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <MX_USART6_UART_Init+0x5c>)
 8001c58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <MX_USART6_UART_Init+0x58>)
 8001c94:	f00c febe 	bl	800ea14 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001c9e:	f000 fa27 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000b20 	.word	0x20000b20
 8001cac:	40011400 	.word	0x40011400

08001cb0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001cba:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cbc:	2209      	movs	r2, #9
 8001cbe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	@ (8001d0c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001cf8:	f008 faf6 	bl	800a2e8 <HAL_PCD_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001d02:	f000 f9f5 	bl	80020f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000ba8 	.word	0x20000ba8
 8001d10:	40040000 	.word	0x40040000

08001d14 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d1a:	1d3b      	adds	r3, r7, #4
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d2e:	4a20      	ldr	r2, [pc, #128]	@ (8001db0 <MX_FMC_Init+0x9c>)
 8001d30:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d40:	2204      	movs	r2, #4
 8001d42:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d46:	2220      	movs	r2, #32
 8001d48:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001d4a:	4b18      	ldr	r3, [pc, #96]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d4c:	2240      	movs	r2, #64	@ 0x40
 8001d4e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001d50:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d52:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001d56:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001d58:	4b14      	ldr	r3, [pc, #80]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d64:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001d66:	4b11      	ldr	r3, [pc, #68]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d68:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001d74:	2302      	movs	r3, #2
 8001d76:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001d80:	2307      	movs	r3, #7
 8001d82:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001d84:	2303      	movs	r3, #3
 8001d86:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <MX_FMC_Init+0x98>)
 8001d96:	f00b fc21 	bl	800d5dc <HAL_SDRAM_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001da0:	f000 f9a6 	bl	80020f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20001088 	.word	0x20001088
 8001db0:	a0000140 	.word	0xa0000140

08001db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b092      	sub	sp, #72	@ 0x48
 8001db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
 8001dc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	4bad      	ldr	r3, [pc, #692]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4aac      	ldr	r2, [pc, #688]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001dd0:	f043 0310 	orr.w	r3, r3, #16
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4baa      	ldr	r3, [pc, #680]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
 8001de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001de2:	4ba7      	ldr	r3, [pc, #668]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4aa6      	ldr	r2, [pc, #664]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4ba4      	ldr	r3, [pc, #656]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4ba1      	ldr	r3, [pc, #644]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4aa0      	ldr	r2, [pc, #640]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b9e      	ldr	r3, [pc, #632]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e12:	4b9b      	ldr	r3, [pc, #620]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a9a      	ldr	r2, [pc, #616]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e18:	f043 0308 	orr.w	r3, r3, #8
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b98      	ldr	r3, [pc, #608]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2a:	4b95      	ldr	r3, [pc, #596]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a94      	ldr	r2, [pc, #592]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e30:	f043 0304 	orr.w	r3, r3, #4
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b92      	ldr	r3, [pc, #584]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	623b      	str	r3, [r7, #32]
 8001e40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	4b8f      	ldr	r3, [pc, #572]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e46:	4a8e      	ldr	r2, [pc, #568]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4e:	4b8c      	ldr	r3, [pc, #560]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001e5a:	4b89      	ldr	r3, [pc, #548]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a88      	ldr	r2, [pc, #544]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b86      	ldr	r3, [pc, #536]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e72:	4b83      	ldr	r3, [pc, #524]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e76:	4a82      	ldr	r2, [pc, #520]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7e:	4b80      	ldr	r3, [pc, #512]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b7a      	ldr	r3, [pc, #488]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea2:	4b77      	ldr	r3, [pc, #476]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a76      	ldr	r2, [pc, #472]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001ea8:	f043 0320 	orr.w	r3, r3, #32
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b74      	ldr	r3, [pc, #464]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eba:	4b71      	ldr	r3, [pc, #452]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a70      	ldr	r2, [pc, #448]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b6e      	ldr	r3, [pc, #440]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|DSI_RESET_Pin|GPIO_PIN_4|LD_USER2_Pin
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f24a 013a 	movw	r1, #41018	@ 0xa03a
 8001ed8:	486a      	ldr	r0, [pc, #424]	@ (8002084 <MX_GPIO_Init+0x2d0>)
 8001eda:	f006 ffb7 	bl	8008e4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8001ede:	2318      	movs	r3, #24
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eea:	2303      	movs	r3, #3
 8001eec:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001eee:	230a      	movs	r3, #10
 8001ef0:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4863      	ldr	r0, [pc, #396]	@ (8002088 <MX_GPIO_Init+0x2d4>)
 8001efa:	f006 fcef 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8001efe:	23c0      	movs	r3, #192	@ 0xc0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001f0e:	230b      	movs	r3, #11
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f16:	4619      	mov	r1, r3
 8001f18:	485c      	ldr	r0, [pc, #368]	@ (800208c <MX_GPIO_Init+0x2d8>)
 8001f1a:	f006 fcdf 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin DSI_RESET_Pin PJ4 LD_USER2_Pin
                           PJ3 PJ1 */
  GPIO_InitStruct.Pin = LD_USER1_Pin|DSI_RESET_Pin|GPIO_PIN_4|LD_USER2_Pin
 8001f1e:	f24a 033a 	movw	r3, #41018	@ 0xa03a
 8001f22:	637b      	str	r3, [r7, #52]	@ 0x34
                          |GPIO_PIN_3|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f34:	4619      	mov	r1, r3
 8001f36:	4853      	ldr	r0, [pc, #332]	@ (8002084 <MX_GPIO_Init+0x2d0>)
 8001f38:	f006 fcd0 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin;
 8001f3c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001f40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f4a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f4e:	4619      	mov	r1, r3
 8001f50:	484c      	ldr	r0, [pc, #304]	@ (8002084 <MX_GPIO_Init+0x2d0>)
 8001f52:	f006 fcc3 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8001f56:	f44f 4351 	mov.w	r3, #53504	@ 0xd100
 8001f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f64:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4849      	ldr	r0, [pc, #292]	@ (8002090 <MX_GPIO_Init+0x2dc>)
 8001f6c:	f006 fcb6 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8001f70:	23f8      	movs	r3, #248	@ 0xf8
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f80:	4619      	mov	r1, r3
 8001f82:	4844      	ldr	r0, [pc, #272]	@ (8002094 <MX_GPIO_Init+0x2e0>)
 8001f84:	f006 fcaa 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8001f88:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f96:	2303      	movs	r3, #3
 8001f98:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001f9a:	230b      	movs	r3, #11
 8001f9c:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f9e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	483c      	ldr	r0, [pc, #240]	@ (8002098 <MX_GPIO_Init+0x2e4>)
 8001fa6:	f006 fc99 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8001faa:	2330      	movs	r3, #48	@ 0x30
 8001fac:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4833      	ldr	r0, [pc, #204]	@ (800208c <MX_GPIO_Init+0x2d8>)
 8001fbe:	f006 fc8d 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8001fc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fd8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fdc:	4619      	mov	r1, r3
 8001fde:	482f      	ldr	r0, [pc, #188]	@ (800209c <MX_GPIO_Init+0x2e8>)
 8001fe0:	f006 fc7c 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001fe4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4825      	ldr	r0, [pc, #148]	@ (8002090 <MX_GPIO_Init+0x2dc>)
 8001ffc:	f006 fc6e 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8002000:	2348      	movs	r3, #72	@ 0x48
 8002002:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800200c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002010:	4619      	mov	r1, r3
 8002012:	4821      	ldr	r0, [pc, #132]	@ (8002098 <MX_GPIO_Init+0x2e4>)
 8002014:	f006 fc62 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201c:	2300      	movs	r3, #0
 800201e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002024:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002028:	4619      	mov	r1, r3
 800202a:	481d      	ldr	r0, [pc, #116]	@ (80020a0 <MX_GPIO_Init+0x2ec>)
 800202c:	f006 fc56 	bl	80088dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_Pin */
  GPIO_InitStruct.Pin = PA0_Pin;
 8002030:	2301      	movs	r3, #1
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002034:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002042:	4619      	mov	r1, r3
 8002044:	480f      	ldr	r0, [pc, #60]	@ (8002084 <MX_GPIO_Init+0x2d0>)
 8002046:	f006 fc49 	bl	80088dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2105      	movs	r1, #5
 800204e:	2006      	movs	r0, #6
 8002050:	f003 ff8c 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002054:	2006      	movs	r0, #6
 8002056:	f003 ffa5 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8002060:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b03      	ldr	r3, [pc, #12]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	4a02      	ldr	r2, [pc, #8]	@ (8002080 <MX_GPIO_Init+0x2cc>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	@ 0x30
 800207e:	e011      	b.n	80020a4 <MX_GPIO_Init+0x2f0>
 8002080:	40023800 	.word	0x40023800
 8002084:	40022400 	.word	0x40022400
 8002088:	40020400 	.word	0x40020400
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40022000 	.word	0x40022000
 8002094:	40022800 	.word	0x40022800
 8002098:	40021800 	.word	0x40021800
 800209c:	40020000 	.word	0x40020000
 80020a0:	40021c00 	.word	0x40021c00
 80020a4:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <MX_GPIO_Init+0x304>)
 80020a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b0:	bf00      	nop
 80020b2:	3748      	adds	r7, #72	@ 0x48
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800

080020bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80020c4:	2001      	movs	r0, #1
 80020c6:	f00e f997 	bl	80103f8 <osDelay>
 80020ca:	e7fb      	b.n	80020c4 <StartDefaultTask+0x8>

080020cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020de:	f003 fa35 	bl	800554c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40001000 	.word	0x40001000

080020f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f4:	b672      	cpsid	i
}
 80020f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <Error_Handler+0x8>

080020fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_MspInit+0x4c>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002106:	4a10      	ldr	r2, [pc, #64]	@ (8002148 <HAL_MspInit+0x4c>)
 8002108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210c:	6413      	str	r3, [r2, #64]	@ 0x40
 800210e:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <HAL_MspInit+0x4c>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	6453      	str	r3, [r2, #68]	@ 0x44
 8002126:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	210f      	movs	r1, #15
 8002136:	f06f 0001 	mvn.w	r0, #1
 800213a:	f003 ff17 	bl	8005f6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800

0800214c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08c      	sub	sp, #48	@ 0x30
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a36      	ldr	r2, [pc, #216]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d13c      	bne.n	80021e8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800216e:	4b36      	ldr	r3, [pc, #216]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a35      	ldr	r2, [pc, #212]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	61bb      	str	r3, [r7, #24]
 8002184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002186:	4b30      	ldr	r3, [pc, #192]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a2f      	ldr	r2, [pc, #188]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a29      	ldr	r2, [pc, #164]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b27      	ldr	r3, [pc, #156]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ARD_A2_Pin;
 80021b6:	2304      	movs	r3, #4
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ba:	2303      	movs	r3, #3
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4820      	ldr	r0, [pc, #128]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021ca:	f006 fb87 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 80021ce:	2350      	movs	r3, #80	@ 0x50
 80021d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d2:	2303      	movs	r3, #3
 80021d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	481b      	ldr	r0, [pc, #108]	@ (8002250 <HAL_ADC_MspInit+0x104>)
 80021e2:	f006 fb7b 	bl	80088dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80021e6:	e029      	b.n	800223c <HAL_ADC_MspInit+0xf0>
  else if(hadc->Instance==ADC3)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <HAL_ADC_MspInit+0x108>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d124      	bne.n	800223c <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	4a14      	ldr	r2, [pc, #80]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800220a:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a0e      	ldr	r2, [pc, #56]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8002222:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002228:	2303      	movs	r3, #3
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4808      	ldr	r0, [pc, #32]	@ (8002258 <HAL_ADC_MspInit+0x10c>)
 8002238:	f006 fb50 	bl	80088dc <HAL_GPIO_Init>
}
 800223c:	bf00      	nop
 800223e:	3730      	adds	r7, #48	@ 0x30
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40012000 	.word	0x40012000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020000 	.word	0x40020000
 8002254:	40012200 	.word	0x40012200
 8002258:	40021400 	.word	0x40021400

0800225c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_CRC_MspInit+0x38>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10b      	bne.n	8002286 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800226e:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <HAL_CRC_MspInit+0x3c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_CRC_MspInit+0x3c>)
 8002274:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b07      	ldr	r3, [pc, #28]	@ (8002298 <HAL_CRC_MspInit+0x3c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40023000 	.word	0x40023000
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0ae      	sub	sp, #184	@ 0xb8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2290      	movs	r2, #144	@ 0x90
 80022ba:	2100      	movs	r1, #0
 80022bc:	4618      	mov	r0, r3
 80022be:	f011 fb6d 	bl	801399c <memset>
  if(DFSDM1_Init == 0)
 80022c2:	4b36      	ldr	r3, [pc, #216]	@ (800239c <HAL_DFSDM_ChannelMspInit+0x100>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d163      	bne.n	8002392 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80022ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80022ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4618      	mov	r0, r3
 80022dc:	f009 fec6 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80022e6:	f7ff ff03 	bl	80020f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80022ea:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a2c      	ldr	r2, [pc, #176]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 80022f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	4a26      	ldr	r2, [pc, #152]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	6313      	str	r3, [r2, #48]	@ 0x30
 800230e:	4b24      	ldr	r3, [pc, #144]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800231a:	4b21      	ldr	r3, [pc, #132]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8002320:	f043 0308 	orr.w	r3, r3, #8
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_DFSDM_ChannelMspInit+0x104>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PC11     ------> DFSDM1_DATIN5
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin;
 8002332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002336:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800234c:	2303      	movs	r3, #3
 800234e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFSDM_DATIN5_GPIO_Port, &GPIO_InitStruct);
 8002352:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002356:	4619      	mov	r1, r3
 8002358:	4812      	ldr	r0, [pc, #72]	@ (80023a4 <HAL_DFSDM_ChannelMspInit+0x108>)
 800235a:	f006 fabf 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 800235e:	2308      	movs	r3, #8
 8002360:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8002376:	2303      	movs	r3, #3
 8002378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002380:	4619      	mov	r1, r3
 8002382:	4809      	ldr	r0, [pc, #36]	@ (80023a8 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8002384:	f006 faaa 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002388:	4b04      	ldr	r3, [pc, #16]	@ (800239c <HAL_DFSDM_ChannelMspInit+0x100>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a03      	ldr	r2, [pc, #12]	@ (800239c <HAL_DFSDM_ChannelMspInit+0x100>)
 8002390:	6013      	str	r3, [r2, #0]
  }

}
 8002392:	bf00      	nop
 8002394:	37b8      	adds	r7, #184	@ 0xb8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200010f0 	.word	0x200010f0
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40020800 	.word	0x40020800
 80023a8:	40020c00 	.word	0x40020c00

080023ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_DMA2D_MspInit+0x44>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d113      	bne.n	80023e6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_DMA2D_MspInit+0x48>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	4a0c      	ldr	r2, [pc, #48]	@ (80023f4 <HAL_DMA2D_MspInit+0x48>)
 80023c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ca:	4b0a      	ldr	r3, [pc, #40]	@ (80023f4 <HAL_DMA2D_MspInit+0x48>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2105      	movs	r1, #5
 80023da:	205a      	movs	r0, #90	@ 0x5a
 80023dc:	f003 fdc6 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80023e0:	205a      	movs	r0, #90	@ 0x5a
 80023e2:	f003 fddf 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80023e6:	bf00      	nop
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	4002b000 	.word	0x4002b000
 80023f4:	40023800 	.word	0x40023800

080023f8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a1b      	ldr	r2, [pc, #108]	@ (8002484 <HAL_DSI_MspInit+0x8c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d12f      	bne.n	800247a <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800241a:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	4a1a      	ldr	r2, [pc, #104]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 8002420:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002424:	6453      	str	r3, [r2, #68]	@ 0x44
 8002426:	4b18      	ldr	r3, [pc, #96]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a14      	ldr	r2, [pc, #80]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 8002438:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_DSI_MspInit+0x90>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800244a:	2304      	movs	r3, #4
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244e:	2302      	movs	r3, #2
 8002450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800245a:	230d      	movs	r3, #13
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	4809      	ldr	r0, [pc, #36]	@ (800248c <HAL_DSI_MspInit+0x94>)
 8002466:	f006 fa39 	bl	80088dc <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	2062      	movs	r0, #98	@ 0x62
 8002470:	f003 fd7c 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8002474:	2062      	movs	r0, #98	@ 0x62
 8002476:	f003 fd95 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 800247a:	bf00      	nop
 800247c:	3728      	adds	r7, #40	@ 0x28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40016c00 	.word	0x40016c00
 8002488:	40023800 	.word	0x40023800
 800248c:	40022400 	.word	0x40022400

08002490 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a09      	ldr	r2, [pc, #36]	@ (80024c4 <HAL_DSI_MspDeInit+0x34>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d10c      	bne.n	80024bc <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_DSI_MspDeInit+0x38>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a6:	4a08      	ldr	r2, [pc, #32]	@ (80024c8 <HAL_DSI_MspDeInit+0x38>)
 80024a8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80024ac:	6453      	str	r3, [r2, #68]	@ 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 80024ae:	2104      	movs	r1, #4
 80024b0:	4806      	ldr	r0, [pc, #24]	@ (80024cc <HAL_DSI_MspDeInit+0x3c>)
 80024b2:	f006 fbbf 	bl	8008c34 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 80024b6:	2062      	movs	r0, #98	@ 0x62
 80024b8:	f003 fd82 	bl	8005fc0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40016c00 	.word	0x40016c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40022400 	.word	0x40022400

080024d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	@ 0x38
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3f      	ldr	r2, [pc, #252]	@ (80025ec <HAL_ETH_MspInit+0x11c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d178      	bne.n	80025e4 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80024f2:	4b3f      	ldr	r3, [pc, #252]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a3e      	ldr	r2, [pc, #248]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 80024f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	4b39      	ldr	r3, [pc, #228]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	4a38      	ldr	r2, [pc, #224]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002510:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002514:	6313      	str	r3, [r2, #48]	@ 0x30
 8002516:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	4b33      	ldr	r3, [pc, #204]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a32      	ldr	r2, [pc, #200]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002528:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	4a2c      	ldr	r2, [pc, #176]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002544:	6313      	str	r3, [r2, #48]	@ 0x30
 8002546:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a26      	ldr	r2, [pc, #152]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	4a20      	ldr	r2, [pc, #128]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	6313      	str	r3, [r2, #48]	@ 0x30
 8002576:	4b1e      	ldr	r3, [pc, #120]	@ (80025f0 <HAL_ETH_MspInit+0x120>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002582:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002588:	2302      	movs	r3, #2
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	2300      	movs	r3, #0
 800258e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002594:	230b      	movs	r3, #11
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259c:	4619      	mov	r1, r3
 800259e:	4815      	ldr	r0, [pc, #84]	@ (80025f4 <HAL_ETH_MspInit+0x124>)
 80025a0:	f006 f99c 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025a4:	2332      	movs	r3, #50	@ 0x32
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a8:	2302      	movs	r3, #2
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025b4:	230b      	movs	r3, #11
 80025b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025bc:	4619      	mov	r1, r3
 80025be:	480e      	ldr	r0, [pc, #56]	@ (80025f8 <HAL_ETH_MspInit+0x128>)
 80025c0:	f006 f98c 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025c4:	2386      	movs	r3, #134	@ 0x86
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025d4:	230b      	movs	r3, #11
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025dc:	4619      	mov	r1, r3
 80025de:	4807      	ldr	r0, [pc, #28]	@ (80025fc <HAL_ETH_MspInit+0x12c>)
 80025e0:	f006 f97c 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80025e4:	bf00      	nop
 80025e6:	3738      	adds	r7, #56	@ 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40028000 	.word	0x40028000
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40021800 	.word	0x40021800
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020000 	.word	0x40020000

08002600 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0ae      	sub	sp, #184	@ 0xb8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	2290      	movs	r2, #144	@ 0x90
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f011 f9bb 	bl	801399c <memset>
  if(hcec->Instance==CEC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a27      	ldr	r2, [pc, #156]	@ (80026c8 <HAL_CEC_MspInit+0xc8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d146      	bne.n	80026be <HAL_CEC_MspInit+0xbe>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8002630:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002634:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_HSI;
 8002636:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800263a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4618      	mov	r0, r3
 8002644:	f009 fd12 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_CEC_MspInit+0x52>
    {
      Error_Handler();
 800264e:	f7ff fd4f 	bl	80020f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8002652:	4b1e      	ldr	r3, [pc, #120]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 8002658:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
 800265e:	4b1b      	ldr	r3, [pc, #108]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_CEC_MspInit+0xcc>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    /**HDMI_CEC GPIO Configuration
    PA15     ------> CEC
    */
    GPIO_InitStruct.Pin = CEC_Pin;
 8002682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002686:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268a:	2312      	movs	r3, #18
 800268c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 800269c:	2304      	movs	r3, #4
 800269e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 80026a2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4809      	ldr	r0, [pc, #36]	@ (80026d0 <HAL_CEC_MspInit+0xd0>)
 80026aa:	f006 f917 	bl	80088dc <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 5, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2105      	movs	r1, #5
 80026b2:	205e      	movs	r0, #94	@ 0x5e
 80026b4:	f003 fc5a 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 80026b8:	205e      	movs	r0, #94	@ 0x5e
 80026ba:	f003 fc73 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CEC_MspInit 1 */

  }

}
 80026be:	bf00      	nop
 80026c0:	37b8      	adds	r7, #184	@ 0xb8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40006c00 	.word	0x40006c00
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000

080026d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0b0      	sub	sp, #192	@ 0xc0
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 031c 	add.w	r3, r7, #28
 80026f0:	2290      	movs	r2, #144	@ 0x90
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f011 f951 	bl	801399c <memset>
  if(hi2c->Instance==I2C1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a55      	ldr	r2, [pc, #340]	@ (8002854 <HAL_I2C_MspInit+0x180>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d13e      	bne.n	8002782 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002704:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002708:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4618      	mov	r0, r3
 8002716:	f009 fca9 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8002720:	f7ff fce6 	bl	80020f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b4c      	ldr	r3, [pc, #304]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a4b      	ldr	r2, [pc, #300]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b49      	ldr	r3, [pc, #292]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800273c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800274a:	2301      	movs	r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002756:	2304      	movs	r3, #4
 8002758:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002760:	4619      	mov	r1, r3
 8002762:	483e      	ldr	r0, [pc, #248]	@ (800285c <HAL_I2C_MspInit+0x188>)
 8002764:	f006 f8ba 	bl	80088dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	4a3a      	ldr	r2, [pc, #232]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 800276e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002772:	6413      	str	r3, [r2, #64]	@ 0x40
 8002774:	4b38      	ldr	r3, [pc, #224]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002780:	e063      	b.n	800284a <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a36      	ldr	r2, [pc, #216]	@ (8002860 <HAL_I2C_MspInit+0x18c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d15e      	bne.n	800284a <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800278c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002790:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4618      	mov	r0, r3
 800279e:	f009 fc65 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80027a8:	f7ff fca2 	bl	80020f0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4a29      	ldr	r2, [pc, #164]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b8:	4b27      	ldr	r3, [pc, #156]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a23      	ldr	r2, [pc, #140]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 80027f4:	230b      	movs	r3, #11
 80027f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80027fe:	4619      	mov	r1, r3
 8002800:	4816      	ldr	r0, [pc, #88]	@ (800285c <HAL_I2C_MspInit+0x188>)
 8002802:	f006 f86b 	bl	80088dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8002806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280e:	2312      	movs	r3, #18
 8002810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800281a:	2303      	movs	r3, #3
 800281c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002820:	2304      	movs	r3, #4
 8002822:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800282a:	4619      	mov	r1, r3
 800282c:	480d      	ldr	r0, [pc, #52]	@ (8002864 <HAL_I2C_MspInit+0x190>)
 800282e:	f006 f855 	bl	80088dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002832:	4b09      	ldr	r3, [pc, #36]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002838:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800283c:	6413      	str	r3, [r2, #64]	@ 0x40
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_I2C_MspInit+0x184>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
}
 800284a:	bf00      	nop
 800284c:	37c0      	adds	r7, #192	@ 0xc0
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40005400 	.word	0x40005400
 8002858:	40023800 	.word	0x40023800
 800285c:	40020400 	.word	0x40020400
 8002860:	40006000 	.word	0x40006000
 8002864:	40020c00 	.word	0x40020c00

08002868 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <HAL_I2C_MspDeInit+0x64>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d110      	bne.n	800289c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800287a:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_I2C_MspDeInit+0x68>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_I2C_MspDeInit+0x68>)
 8002880:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002884:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8002886:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800288a:	4812      	ldr	r0, [pc, #72]	@ (80028d4 <HAL_I2C_MspDeInit+0x6c>)
 800288c:	f006 f9d2 	bl	8008c34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8002890:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002894:	480f      	ldr	r0, [pc, #60]	@ (80028d4 <HAL_I2C_MspDeInit+0x6c>)
 8002896:	f006 f9cd 	bl	8008c34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 800289a:	e013      	b.n	80028c4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <HAL_I2C_MspDeInit+0x70>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d10e      	bne.n	80028c4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_I2C_MspDeInit+0x68>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a09      	ldr	r2, [pc, #36]	@ (80028d0 <HAL_I2C_MspDeInit+0x68>)
 80028ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 80028b2:	2180      	movs	r1, #128	@ 0x80
 80028b4:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <HAL_I2C_MspDeInit+0x6c>)
 80028b6:	f006 f9bd 	bl	8008c34 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 80028ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028be:	4807      	ldr	r0, [pc, #28]	@ (80028dc <HAL_I2C_MspDeInit+0x74>)
 80028c0:	f006 f9b8 	bl	8008c34 <HAL_GPIO_DeInit>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40005400 	.word	0x40005400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40006000 	.word	0x40006000
 80028dc:	40020c00 	.word	0x40020c00

080028e0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002924 <HAL_LTDC_MspInit+0x44>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d113      	bne.n	800291a <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80028f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002928 <HAL_LTDC_MspInit+0x48>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <HAL_LTDC_MspInit+0x48>)
 80028f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002928 <HAL_LTDC_MspInit+0x48>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2105      	movs	r1, #5
 800290e:	2058      	movs	r0, #88	@ 0x58
 8002910:	f003 fb2c 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002914:	2058      	movs	r0, #88	@ 0x58
 8002916:	f003 fb45 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40016800 	.word	0x40016800
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b08c      	sub	sp, #48	@ 0x30
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
 8002942:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a4a      	ldr	r2, [pc, #296]	@ (8002a74 <HAL_QSPI_MspInit+0x148>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f040 808e 	bne.w	8002a6c <HAL_QSPI_MspInit+0x140>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002950:	4b49      	ldr	r3, [pc, #292]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 8002952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002954:	4a48      	ldr	r2, [pc, #288]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 8002956:	f043 0302 	orr.w	r3, r3, #2
 800295a:	6393      	str	r3, [r2, #56]	@ 0x38
 800295c:	4b46      	ldr	r3, [pc, #280]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800295e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002968:	4b43      	ldr	r3, [pc, #268]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	4a42      	ldr	r2, [pc, #264]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800296e:	f043 0310 	orr.w	r3, r3, #16
 8002972:	6313      	str	r3, [r2, #48]	@ 0x30
 8002974:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002980:	4b3d      	ldr	r3, [pc, #244]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4a3c      	ldr	r2, [pc, #240]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 8002986:	f043 0302 	orr.w	r3, r3, #2
 800298a:	6313      	str	r3, [r2, #48]	@ 0x30
 800298c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002998:	4b37      	ldr	r3, [pc, #220]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	4a36      	ldr	r2, [pc, #216]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 800299e:	f043 0304 	orr.w	r3, r3, #4
 80029a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029a4:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029b0:	4b31      	ldr	r3, [pc, #196]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	4a30      	ldr	r2, [pc, #192]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 80029b6:	f043 0308 	orr.w	r3, r3, #8
 80029ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80029bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a78 <HAL_QSPI_MspInit+0x14c>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80029c8:	2304      	movs	r3, #4
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80029d8:	2309      	movs	r3, #9
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4826      	ldr	r0, [pc, #152]	@ (8002a7c <HAL_QSPI_MspInit+0x150>)
 80029e4:	f005 ff7a 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80029e8:	2340      	movs	r3, #64	@ 0x40
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029f8:	230a      	movs	r3, #10
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	481f      	ldr	r0, [pc, #124]	@ (8002a80 <HAL_QSPI_MspInit+0x154>)
 8002a04:	f005 ff6a 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8002a08:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1e:	f107 031c 	add.w	r3, r7, #28
 8002a22:	4619      	mov	r1, r3
 8002a24:	4817      	ldr	r0, [pc, #92]	@ (8002a84 <HAL_QSPI_MspInit+0x158>)
 8002a26:	f005 ff59 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a36:	2303      	movs	r3, #3
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a3a:	2309      	movs	r3, #9
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 031c 	add.w	r3, r7, #28
 8002a42:	4619      	mov	r1, r3
 8002a44:	480e      	ldr	r0, [pc, #56]	@ (8002a80 <HAL_QSPI_MspInit+0x154>)
 8002a46:	f005 ff49 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8002a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002a5c:	2309      	movs	r3, #9
 8002a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	4808      	ldr	r0, [pc, #32]	@ (8002a88 <HAL_QSPI_MspInit+0x15c>)
 8002a68:	f005 ff38 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3730      	adds	r7, #48	@ 0x30
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	a0001000 	.word	0xa0001000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020c00 	.word	0x40020c00

08002a8c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0ac      	sub	sp, #176	@ 0xb0
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002aa4:	f107 030c 	add.w	r3, r7, #12
 8002aa8:	2290      	movs	r2, #144	@ 0x90
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f010 ff75 	bl	801399c <memset>
  if(hrtc->Instance==RTC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8002b2c <HAL_RTC_MspInit+0xa0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d133      	bne.n	8002b24 <HAL_RTC_MspInit+0x98>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002abc:	2320      	movs	r3, #32
 8002abe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	4618      	mov	r0, r3
 8002acc:	f009 face 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RTC_MspInit+0x4e>
    {
      Error_Handler();
 8002ad6:	f7ff fb0b 	bl	80020f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_RTC_MspInit+0xa4>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <HAL_RTC_MspInit+0xa4>)
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ae4:	6713      	str	r3, [r2, #112]	@ 0x70

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_RTC_MspInit+0xa4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_RTC_MspInit+0xa4>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <HAL_RTC_MspInit+0xa4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PC13     ------> RTC_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002afe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4805      	ldr	r0, [pc, #20]	@ (8002b34 <HAL_RTC_MspInit+0xa8>)
 8002b20:	f005 fedc 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002b24:	bf00      	nop
 8002b26:	37b0      	adds	r7, #176	@ 0xb0
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40002800 	.word	0x40002800
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40020800 	.word	0x40020800

08002b38 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b0ae      	sub	sp, #184	@ 0xb8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2290      	movs	r2, #144	@ 0x90
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f010 ff1f 	bl	801399c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8002b66:	d144      	bne.n	8002bf2 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002b68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b6c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002b6e:	23c0      	movs	r3, #192	@ 0xc0
 8002b70:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8002b72:	2302      	movs	r3, #2
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002b76:	2302      	movs	r3, #2
 8002b78:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	4618      	mov	r0, r3
 8002b88:	f009 fa70 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8002b92:	f7ff faad 	bl	80020f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002b96:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	4a18      	ldr	r2, [pc, #96]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba2:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bae:	4b13      	ldr	r3, [pc, #76]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	4b10      	ldr	r3, [pc, #64]	@ (8002bfc <HAL_SPDIFRX_MspInit+0xc4>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8002bc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8002be0:	2307      	movs	r3, #7
 8002be2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4804      	ldr	r0, [pc, #16]	@ (8002c00 <HAL_SPDIFRX_MspInit+0xc8>)
 8002bee:	f005 fe75 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8002bf2:	bf00      	nop
 8002bf4:	37b8      	adds	r7, #184	@ 0xb8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40021800 	.word	0x40021800

08002c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	@ 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a2e      	ldr	r2, [pc, #184]	@ (8002cdc <HAL_SPI_MspInit+0xd8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d156      	bne.n	8002cd4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002c26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b2b      	ldr	r3, [pc, #172]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	4b28      	ldr	r3, [pc, #160]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	4a27      	ldr	r2, [pc, #156]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4a:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b22      	ldr	r3, [pc, #136]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	4a21      	ldr	r2, [pc, #132]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c62:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce0 <HAL_SPI_MspInit+0xdc>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	60bb      	str	r3, [r7, #8]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8002c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002c80:	2305      	movs	r3, #5
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4816      	ldr	r0, [pc, #88]	@ (8002ce4 <HAL_SPI_MspInit+0xe0>)
 8002c8c:	f005 fe26 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8002c90:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002ca6:	f107 0314 	add.w	r3, r7, #20
 8002caa:	4619      	mov	r1, r3
 8002cac:	480d      	ldr	r0, [pc, #52]	@ (8002ce4 <HAL_SPI_MspInit+0xe0>)
 8002cae:	f005 fe15 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002cb2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4806      	ldr	r0, [pc, #24]	@ (8002ce8 <HAL_SPI_MspInit+0xe4>)
 8002cd0:	f005 fe04 	bl	80088dc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002cd4:	bf00      	nop
 8002cd6:	3728      	adds	r7, #40	@ 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40003800 	.word	0x40003800
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400

08002cec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <HAL_TIM_Base_MspInit+0x80>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10c      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	4a1b      	ldr	r2, [pc, #108]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d0a:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002d16:	e022      	b.n	8002d5e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a15      	ldr	r2, [pc, #84]	@ (8002d74 <HAL_TIM_Base_MspInit+0x88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10c      	bne.n	8002d3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4a12      	ldr	r2, [pc, #72]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
}
 8002d3a:	e010      	b.n	8002d5e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0d      	ldr	r2, [pc, #52]	@ (8002d78 <HAL_TIM_Base_MspInit+0x8c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10b      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <HAL_TIM_Base_MspInit+0x84>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800

08002d7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a13      	ldr	r2, [pc, #76]	@ (8002dd8 <HAL_TIM_PWM_MspInit+0x5c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10c      	bne.n	8002da8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9a:	4b10      	ldr	r3, [pc, #64]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002da6:	e010      	b.n	8002dca <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM12)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0c      	ldr	r2, [pc, #48]	@ (8002de0 <HAL_TIM_PWM_MspInit+0x64>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d10b      	bne.n	8002dca <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	4a09      	ldr	r2, [pc, #36]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dbe:	4b07      	ldr	r3, [pc, #28]	@ (8002ddc <HAL_TIM_PWM_MspInit+0x60>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40001800 	.word	0x40001800

08002de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	@ 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dec:	f107 031c 	add.w	r3, r7, #28
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	609a      	str	r2, [r3, #8]
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a44      	ldr	r2, [pc, #272]	@ (8002f14 <HAL_TIM_MspPostInit+0x130>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d11d      	bne.n	8002e42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e06:	4b44      	ldr	r3, [pc, #272]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a43      	ldr	r2, [pc, #268]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e0c:	f043 0304 	orr.w	r3, r3, #4
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b41      	ldr	r3, [pc, #260]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8002e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	2302      	movs	r3, #2
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e30:	2302      	movs	r3, #2
 8002e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e34:	f107 031c 	add.w	r3, r7, #28
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4838      	ldr	r0, [pc, #224]	@ (8002f1c <HAL_TIM_MspPostInit+0x138>)
 8002e3c:	f005 fd4e 	bl	80088dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e40:	e064      	b.n	8002f0c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM10)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a36      	ldr	r2, [pc, #216]	@ (8002f20 <HAL_TIM_MspPostInit+0x13c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d11c      	bne.n	8002e86 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e4c:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	4a31      	ldr	r2, [pc, #196]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e52:	f043 0320 	orr.w	r3, r3, #32
 8002e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e58:	4b2f      	ldr	r3, [pc, #188]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8002e64:	2340      	movs	r3, #64	@ 0x40
 8002e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002e74:	2303      	movs	r3, #3
 8002e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4829      	ldr	r0, [pc, #164]	@ (8002f24 <HAL_TIM_MspPostInit+0x140>)
 8002e80:	f005 fd2c 	bl	80088dc <HAL_GPIO_Init>
}
 8002e84:	e042      	b.n	8002f0c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM11)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a27      	ldr	r2, [pc, #156]	@ (8002f28 <HAL_TIM_MspPostInit+0x144>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d11c      	bne.n	8002eca <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4a20      	ldr	r2, [pc, #128]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e96:	f043 0320 	orr.w	r3, r3, #32
 8002e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eac:	2302      	movs	r3, #2
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4818      	ldr	r0, [pc, #96]	@ (8002f24 <HAL_TIM_MspPostInit+0x140>)
 8002ec4:	f005 fd0a 	bl	80088dc <HAL_GPIO_Init>
}
 8002ec8:	e020      	b.n	8002f0c <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_TIM_MspPostInit+0x148>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d11b      	bne.n	8002f0c <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ed4:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <HAL_TIM_MspPostInit+0x134>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8002eec:	2340      	movs	r3, #64	@ 0x40
 8002eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002efc:	2309      	movs	r3, #9
 8002efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	4619      	mov	r1, r3
 8002f06:	480a      	ldr	r0, [pc, #40]	@ (8002f30 <HAL_TIM_MspPostInit+0x14c>)
 8002f08:	f005 fce8 	bl	80088dc <HAL_GPIO_Init>
}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	@ 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40000400 	.word	0x40000400
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40021400 	.word	0x40021400
 8002f28:	40014800 	.word	0x40014800
 8002f2c:	40001800 	.word	0x40001800
 8002f30:	40021c00 	.word	0x40021c00

08002f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0b2      	sub	sp, #200	@ 0xc8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f50:	2290      	movs	r2, #144	@ 0x90
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f010 fd21 	bl	801399c <memset>
  if(huart->Instance==UART5)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7f      	ldr	r2, [pc, #508]	@ (800315c <HAL_UART_MspInit+0x228>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d15e      	bne.n	8003022 <HAL_UART_MspInit+0xee>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002f64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f72:	4618      	mov	r0, r3
 8002f74:	f009 f87a 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f7e:	f7ff f8b7 	bl	80020f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002f82:	4b77      	ldr	r3, [pc, #476]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a76      	ldr	r2, [pc, #472]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002f88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b74      	ldr	r3, [pc, #464]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9a:	4b71      	ldr	r3, [pc, #452]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	4a70      	ldr	r2, [pc, #448]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa6:	4b6e      	ldr	r3, [pc, #440]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fb2:	4b6b      	ldr	r3, [pc, #428]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a6a      	ldr	r2, [pc, #424]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b68      	ldr	r3, [pc, #416]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8002fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	485c      	ldr	r0, [pc, #368]	@ (8003164 <HAL_UART_MspInit+0x230>)
 8002ff2:	f005 fc73 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003008:	2303      	movs	r3, #3
 800300a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800300e:	2308      	movs	r3, #8
 8003010:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8003014:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003018:	4619      	mov	r1, r3
 800301a:	4853      	ldr	r0, [pc, #332]	@ (8003168 <HAL_UART_MspInit+0x234>)
 800301c:	f005 fc5e 	bl	80088dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003020:	e098      	b.n	8003154 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a51      	ldr	r2, [pc, #324]	@ (800316c <HAL_UART_MspInit+0x238>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d152      	bne.n	80030d2 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800302c:	2340      	movs	r3, #64	@ 0x40
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003030:	2300      	movs	r3, #0
 8003032:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003038:	4618      	mov	r0, r3
 800303a:	f009 f817 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8003044:	f7ff f854 	bl	80020f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003048:	4b45      	ldr	r3, [pc, #276]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 800304a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304c:	4a44      	ldr	r2, [pc, #272]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 800304e:	f043 0310 	orr.w	r3, r3, #16
 8003052:	6453      	str	r3, [r2, #68]	@ 0x44
 8003054:	4b42      	ldr	r3, [pc, #264]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	4b3f      	ldr	r3, [pc, #252]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003064:	4a3e      	ldr	r2, [pc, #248]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6313      	str	r3, [r2, #48]	@ 0x30
 800306c:	4b3c      	ldr	r3, [pc, #240]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003078:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800307c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003092:	2307      	movs	r3, #7
 8003094:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003098:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800309c:	4619      	mov	r1, r3
 800309e:	4834      	ldr	r0, [pc, #208]	@ (8003170 <HAL_UART_MspInit+0x23c>)
 80030a0:	f005 fc1c 	bl	80088dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80030a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030be:	2307      	movs	r3, #7
 80030c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80030c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4829      	ldr	r0, [pc, #164]	@ (8003170 <HAL_UART_MspInit+0x23c>)
 80030cc:	f005 fc06 	bl	80088dc <HAL_GPIO_Init>
}
 80030d0:	e040      	b.n	8003154 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART6)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a27      	ldr	r2, [pc, #156]	@ (8003174 <HAL_UART_MspInit+0x240>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d13b      	bne.n	8003154 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80030dc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80030e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80030e2:	2300      	movs	r3, #0
 80030e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f008 ffbe 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_UART_MspInit+0x1c6>
      Error_Handler();
 80030f6:	f7fe fffb 	bl	80020f0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80030fa:	4b19      	ldr	r3, [pc, #100]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a18      	ldr	r2, [pc, #96]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003100:	f043 0320 	orr.w	r3, r3, #32
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003112:	4b13      	ldr	r3, [pc, #76]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a12      	ldr	r2, [pc, #72]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b10      	ldr	r3, [pc, #64]	@ (8003160 <HAL_UART_MspInit+0x22c>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 800312a:	23c0      	movs	r3, #192	@ 0xc0
 800312c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003142:	2308      	movs	r3, #8
 8003144:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003148:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800314c:	4619      	mov	r1, r3
 800314e:	4805      	ldr	r0, [pc, #20]	@ (8003164 <HAL_UART_MspInit+0x230>)
 8003150:	f005 fbc4 	bl	80088dc <HAL_GPIO_Init>
}
 8003154:	bf00      	nop
 8003156:	37c8      	adds	r7, #200	@ 0xc8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40005000 	.word	0x40005000
 8003160:	40023800 	.word	0x40023800
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40011000 	.word	0x40011000
 8003170:	40020000 	.word	0x40020000
 8003174:	40011400 	.word	0x40011400

08003178 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	@ 0x38
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a5a      	ldr	r2, [pc, #360]	@ (8003300 <HAL_PCD_MspInit+0x188>)
 8003196:	4293      	cmp	r3, r2
 8003198:	f040 80ae 	bne.w	80032f8 <HAL_PCD_MspInit+0x180>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319c:	4b59      	ldr	r3, [pc, #356]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	4a58      	ldr	r2, [pc, #352]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031a8:	4b56      	ldr	r3, [pc, #344]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80031b4:	4b53      	ldr	r3, [pc, #332]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b8:	4a52      	ldr	r2, [pc, #328]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031be:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c0:	4b50      	ldr	r3, [pc, #320]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	61fb      	str	r3, [r7, #28]
 80031ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80031cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e4:	4b47      	ldr	r3, [pc, #284]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e8:	4a46      	ldr	r2, [pc, #280]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f0:	4b44      	ldr	r3, [pc, #272]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	4a40      	ldr	r2, [pc, #256]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6313      	str	r3, [r2, #48]	@ 0x30
 8003208:	4b3e      	ldr	r3, [pc, #248]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	693b      	ldr	r3, [r7, #16]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8003214:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003226:	230a      	movs	r3, #10
 8003228:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800322e:	4619      	mov	r1, r3
 8003230:	4835      	ldr	r0, [pc, #212]	@ (8003308 <HAL_PCD_MspInit+0x190>)
 8003232:	f005 fb53 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8003236:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800323a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323c:	2302      	movs	r3, #2
 800323e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003240:	2300      	movs	r3, #0
 8003242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003244:	2303      	movs	r3, #3
 8003246:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003248:	230a      	movs	r3, #10
 800324a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	482e      	ldr	r0, [pc, #184]	@ (800330c <HAL_PCD_MspInit+0x194>)
 8003254:	f005 fb42 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003258:	2310      	movs	r3, #16
 800325a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325c:	2302      	movs	r3, #2
 800325e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003264:	2303      	movs	r3, #3
 8003266:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003268:	230a      	movs	r3, #10
 800326a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800326c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003270:	4619      	mov	r1, r3
 8003272:	4827      	ldr	r0, [pc, #156]	@ (8003310 <HAL_PCD_MspInit+0x198>)
 8003274:	f005 fb32 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8003278:	2301      	movs	r3, #1
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003284:	2303      	movs	r3, #3
 8003286:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003288:	230a      	movs	r3, #10
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003290:	4619      	mov	r1, r3
 8003292:	4820      	ldr	r0, [pc, #128]	@ (8003314 <HAL_PCD_MspInit+0x19c>)
 8003294:	f005 fb22 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003298:	2328      	movs	r3, #40	@ 0x28
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80032a8:	230a      	movs	r3, #10
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b0:	4619      	mov	r1, r3
 80032b2:	4819      	ldr	r0, [pc, #100]	@ (8003318 <HAL_PCD_MspInit+0x1a0>)
 80032b4:	f005 fb12 	bl	80088dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80032b8:	4b12      	ldr	r3, [pc, #72]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80032c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80032d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
 80032dc:	4b09      	ldr	r3, [pc, #36]	@ (8003304 <HAL_PCD_MspInit+0x18c>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80032e8:	2200      	movs	r2, #0
 80032ea:	2105      	movs	r1, #5
 80032ec:	204d      	movs	r0, #77	@ 0x4d
 80032ee:	f002 fe3d 	bl	8005f6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80032f2:	204d      	movs	r0, #77	@ 0x4d
 80032f4:	f002 fe56 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80032f8:	bf00      	nop
 80032fa:	3738      	adds	r7, #56	@ 0x38
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40040000 	.word	0x40040000
 8003304:	40023800 	.word	0x40023800
 8003308:	40020400 	.word	0x40020400
 800330c:	40022000 	.word	0x40022000
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40020800 	.word	0x40020800
 8003318:	40020000 	.word	0x40020000

0800331c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003330:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_FMC_MspInit+0x104>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d16f      	bne.n	8003418 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8003338:	4b39      	ldr	r3, [pc, #228]	@ (8003420 <HAL_FMC_MspInit+0x104>)
 800333a:	2201      	movs	r2, #1
 800333c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800333e:	4b39      	ldr	r3, [pc, #228]	@ (8003424 <HAL_FMC_MspInit+0x108>)
 8003340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003342:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_FMC_MspInit+0x108>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6393      	str	r3, [r2, #56]	@ 0x38
 800334a:	4b36      	ldr	r3, [pc, #216]	@ (8003424 <HAL_FMC_MspInit+0x108>)
 800334c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003356:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800335a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003368:	230c      	movs	r3, #12
 800336a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	4619      	mov	r1, r3
 8003370:	482d      	ldr	r0, [pc, #180]	@ (8003428 <HAL_FMC_MspInit+0x10c>)
 8003372:	f005 fab3 	bl	80088dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8003376:	f248 1337 	movw	r3, #33079	@ 0x8137
 800337a:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003384:	2303      	movs	r3, #3
 8003386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003388:	230c      	movs	r3, #12
 800338a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4826      	ldr	r0, [pc, #152]	@ (800342c <HAL_FMC_MspInit+0x110>)
 8003392:	f005 faa3 	bl	80088dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003396:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800339a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339c:	2302      	movs	r3, #2
 800339e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a4:	2303      	movs	r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033a8:	230c      	movs	r3, #12
 80033aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033ac:	1d3b      	adds	r3, r7, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	481f      	ldr	r0, [pc, #124]	@ (8003430 <HAL_FMC_MspInit+0x114>)
 80033b2:	f005 fa93 	bl	80088dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80033b6:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 80033ba:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c4:	2303      	movs	r3, #3
 80033c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033c8:	230c      	movs	r3, #12
 80033ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80033cc:	1d3b      	adds	r3, r7, #4
 80033ce:	4619      	mov	r1, r3
 80033d0:	4818      	ldr	r0, [pc, #96]	@ (8003434 <HAL_FMC_MspInit+0x118>)
 80033d2:	f005 fa83 	bl	80088dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80033d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80033da:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033dc:	2302      	movs	r3, #2
 80033de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033e8:	230c      	movs	r3, #12
 80033ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033ec:	1d3b      	adds	r3, r7, #4
 80033ee:	4619      	mov	r1, r3
 80033f0:	4811      	ldr	r0, [pc, #68]	@ (8003438 <HAL_FMC_MspInit+0x11c>)
 80033f2:	f005 fa73 	bl	80088dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 80033f6:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 80033fa:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003408:	230c      	movs	r3, #12
 800340a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4619      	mov	r1, r3
 8003410:	480a      	ldr	r0, [pc, #40]	@ (800343c <HAL_FMC_MspInit+0x120>)
 8003412:	f005 fa63 	bl	80088dc <HAL_GPIO_Init>
 8003416:	e000      	b.n	800341a <HAL_FMC_MspInit+0xfe>
    return;
 8003418:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200010f4 	.word	0x200010f4
 8003424:	40023800 	.word	0x40023800
 8003428:	40021000 	.word	0x40021000
 800342c:	40021800 	.word	0x40021800
 8003430:	40020c00 	.word	0x40020c00
 8003434:	40022000 	.word	0x40022000
 8003438:	40021400 	.word	0x40021400
 800343c:	40021c00 	.word	0x40021c00

08003440 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003448:	f7ff ff68 	bl	800331c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800344c:	bf00      	nop
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a48      	ldr	r2, [pc, #288]	@ (8003584 <HAL_SAI_MspInit+0x130>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d134      	bne.n	80034d0 <HAL_SAI_MspInit+0x7c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8003466:	4b48      	ldr	r3, [pc, #288]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10b      	bne.n	8003486 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800346e:	4b47      	ldr	r3, [pc, #284]	@ (800358c <HAL_SAI_MspInit+0x138>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	4a46      	ldr	r2, [pc, #280]	@ (800358c <HAL_SAI_MspInit+0x138>)
 8003474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003478:	6453      	str	r3, [r2, #68]	@ 0x44
 800347a:	4b44      	ldr	r3, [pc, #272]	@ (800358c <HAL_SAI_MspInit+0x138>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8003486:	4b40      	ldr	r3, [pc, #256]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a3e      	ldr	r2, [pc, #248]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 800348e:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8003490:	2370      	movs	r3, #112	@ 0x70
 8003492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80034a0:	2306      	movs	r3, #6
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4619      	mov	r1, r3
 80034aa:	4839      	ldr	r0, [pc, #228]	@ (8003590 <HAL_SAI_MspInit+0x13c>)
 80034ac:	f005 fa16 	bl	80088dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80034b0:	2380      	movs	r3, #128	@ 0x80
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80034c0:	2306      	movs	r3, #6
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	4832      	ldr	r0, [pc, #200]	@ (8003594 <HAL_SAI_MspInit+0x140>)
 80034cc:	f005 fa06 	bl	80088dc <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a30      	ldr	r2, [pc, #192]	@ (8003598 <HAL_SAI_MspInit+0x144>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d124      	bne.n	8003524 <HAL_SAI_MspInit+0xd0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80034da:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10b      	bne.n	80034fa <HAL_SAI_MspInit+0xa6>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80034e2:	4b2a      	ldr	r3, [pc, #168]	@ (800358c <HAL_SAI_MspInit+0x138>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034e6:	4a29      	ldr	r2, [pc, #164]	@ (800358c <HAL_SAI_MspInit+0x138>)
 80034e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80034ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ee:	4b27      	ldr	r3, [pc, #156]	@ (800358c <HAL_SAI_MspInit+0x138>)
 80034f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80034fa:	4b23      	ldr	r3, [pc, #140]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_SAI_MspInit+0x134>)
 8003502:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8003504:	2308      	movs	r3, #8
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8003514:	2306      	movs	r3, #6
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	481c      	ldr	r0, [pc, #112]	@ (8003590 <HAL_SAI_MspInit+0x13c>)
 8003520:	f005 f9dc 	bl	80088dc <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <HAL_SAI_MspInit+0x148>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d125      	bne.n	800357a <HAL_SAI_MspInit+0x126>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800352e:	4b1c      	ldr	r3, [pc, #112]	@ (80035a0 <HAL_SAI_MspInit+0x14c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10b      	bne.n	800354e <HAL_SAI_MspInit+0xfa>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_SAI_MspInit+0x138>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_SAI_MspInit+0x138>)
 800353c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003540:	6453      	str	r3, [r2, #68]	@ 0x44
 8003542:	4b12      	ldr	r3, [pc, #72]	@ (800358c <HAL_SAI_MspInit+0x138>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 800354e:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_SAI_MspInit+0x14c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3301      	adds	r3, #1
 8003554:	4a12      	ldr	r2, [pc, #72]	@ (80035a0 <HAL_SAI_MspInit+0x14c>)
 8003556:	6013      	str	r3, [r2, #0]

    /**SAI2_A_Block_A GPIO Configuration
    PD11     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8003558:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800355c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800356a:	230a      	movs	r3, #10
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 800356e:	f107 0314 	add.w	r3, r7, #20
 8003572:	4619      	mov	r1, r3
 8003574:	480b      	ldr	r0, [pc, #44]	@ (80035a4 <HAL_SAI_MspInit+0x150>)
 8003576:	f005 f9b1 	bl	80088dc <HAL_GPIO_Init>

    }
}
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	@ 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40015804 	.word	0x40015804
 8003588:	200010f8 	.word	0x200010f8
 800358c:	40023800 	.word	0x40023800
 8003590:	40021000 	.word	0x40021000
 8003594:	40021800 	.word	0x40021800
 8003598:	40015824 	.word	0x40015824
 800359c:	40015c04 	.word	0x40015c04
 80035a0:	200010fc 	.word	0x200010fc
 80035a4:	40020c00 	.word	0x40020c00

080035a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08e      	sub	sp, #56	@ 0x38
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035b8:	4b33      	ldr	r3, [pc, #204]	@ (8003688 <HAL_InitTick+0xe0>)
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	4a32      	ldr	r2, [pc, #200]	@ (8003688 <HAL_InitTick+0xe0>)
 80035be:	f043 0310 	orr.w	r3, r3, #16
 80035c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c4:	4b30      	ldr	r3, [pc, #192]	@ (8003688 <HAL_InitTick+0xe0>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035d0:	f107 0210 	add.w	r2, r7, #16
 80035d4:	f107 0314 	add.w	r3, r7, #20
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f008 fd14 	bl	800c008 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80035ea:	f008 fce5 	bl	800bfb8 <HAL_RCC_GetPCLK1Freq>
 80035ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80035f0:	e004      	b.n	80035fc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80035f2:	f008 fce1 	bl	800bfb8 <HAL_RCC_GetPCLK1Freq>
 80035f6:	4603      	mov	r3, r0
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fe:	4a23      	ldr	r2, [pc, #140]	@ (800368c <HAL_InitTick+0xe4>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	0c9b      	lsrs	r3, r3, #18
 8003606:	3b01      	subs	r3, #1
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800360a:	4b21      	ldr	r3, [pc, #132]	@ (8003690 <HAL_InitTick+0xe8>)
 800360c:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <HAL_InitTick+0xec>)
 800360e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003610:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <HAL_InitTick+0xe8>)
 8003612:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003616:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003618:	4a1d      	ldr	r2, [pc, #116]	@ (8003690 <HAL_InitTick+0xe8>)
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800361e:	4b1c      	ldr	r3, [pc, #112]	@ (8003690 <HAL_InitTick+0xe8>)
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003624:	4b1a      	ldr	r3, [pc, #104]	@ (8003690 <HAL_InitTick+0xe8>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800362a:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_InitTick+0xe8>)
 800362c:	2200      	movs	r2, #0
 800362e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003630:	4817      	ldr	r0, [pc, #92]	@ (8003690 <HAL_InitTick+0xe8>)
 8003632:	f00a f96c 	bl	800d90e <HAL_TIM_Base_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800363c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003640:	2b00      	cmp	r3, #0
 8003642:	d11b      	bne.n	800367c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003644:	4812      	ldr	r0, [pc, #72]	@ (8003690 <HAL_InitTick+0xe8>)
 8003646:	f00a f9b9 	bl	800d9bc <HAL_TIM_Base_Start_IT>
 800364a:	4603      	mov	r3, r0
 800364c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003654:	2b00      	cmp	r3, #0
 8003656:	d111      	bne.n	800367c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003658:	2036      	movs	r0, #54	@ 0x36
 800365a:	f002 fca3 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d808      	bhi.n	8003676 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	2036      	movs	r0, #54	@ 0x36
 800366a:	f002 fc7f 	bl	8005f6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800366e:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <HAL_InitTick+0xf0>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	e002      	b.n	800367c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800367c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003680:	4618      	mov	r0, r3
 8003682:	3738      	adds	r7, #56	@ 0x38
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	431bde83 	.word	0x431bde83
 8003690:	20001100 	.word	0x20001100
 8003694:	40001000 	.word	0x40001000
 8003698:	20000050 	.word	0x20000050

0800369c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <NMI_Handler+0x4>

080036a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <HardFault_Handler+0x4>

080036ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <MemManage_Handler+0x4>

080036b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <BusFault_Handler+0x4>

080036bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <UsageFault_Handler+0x4>

080036c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA0_Pin);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f005 fbd2 	bl	8008e80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <TIM6_DAC_IRQHandler+0x10>)
 80036e6:	f00a fa38 	bl	800db5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20001100 	.word	0x20001100

080036f4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <OTG_HS_IRQHandler+0x10>)
 80036fa:	f006 ff0b 	bl	800a514 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000ba8 	.word	0x20000ba8

08003708 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800370c:	4802      	ldr	r0, [pc, #8]	@ (8003718 <LTDC_IRQHandler+0x10>)
 800370e:	f006 fb01 	bl	8009d14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000544 	.word	0x20000544

0800371c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003720:	4802      	ldr	r0, [pc, #8]	@ (800372c <DMA2D_IRQHandler+0x10>)
 8003722:	f003 f985 	bl	8006a30 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000334 	.word	0x20000334

08003730 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8003734:	4802      	ldr	r0, [pc, #8]	@ (8003740 <CEC_IRQHandler+0x10>)
 8003736:	f002 fa42 	bl	8005bbe <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000458 	.word	0x20000458

08003744 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <DSI_IRQHandler+0x10>)
 800374a:	f003 feb3 	bl	80074b4 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000038c 	.word	0x2000038c

08003758 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <SystemInit+0x20>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003762:	4a05      	ldr	r2, [pc, #20]	@ (8003778 <SystemInit+0x20>)
 8003764:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003768:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800377c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037b4 <LoopFillZerobss+0xe>
 
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003780:	f7ff ffea 	bl	8003758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003784:	480c      	ldr	r0, [pc, #48]	@ (80037b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003786:	490d      	ldr	r1, [pc, #52]	@ (80037bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003788:	4a0d      	ldr	r2, [pc, #52]	@ (80037c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800379c:	4c0a      	ldr	r4, [pc, #40]	@ (80037c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 80037aa:	f010 f955 	bl	8013a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ae:	f7fd f8ff 	bl	80009b0 <main>
  bx  lr    
 80037b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037b4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80037b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037bc:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80037c0:	08015970 	.word	0x08015970
  ldr r2, =_sbss
 80037c4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80037c8:	20005ffc 	.word	0x20005ffc

080037cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC_IRQHandler>
	...

080037d0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 f90b 	bl	80039f8 <ft6x06_GetInstance>
 80037e2:	4603      	mov	r3, r0
 80037e4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2bff      	cmp	r3, #255	@ 0xff
 80037ea:	d10e      	bne.n	800380a <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f000 f903 	bl	80039f8 <ft6x06_GetInstance>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d806      	bhi.n	800380a <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80037fc:	7bbb      	ldrb	r3, [r7, #14]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	b2d1      	uxtb	r1, r2
 8003802:	4a04      	ldr	r2, [pc, #16]	@ (8003814 <ft6x06_Init+0x44>)
 8003804:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8003806:	f000 fcd5 	bl	80041b4 <TS_IO_Init>
    }
  }
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000114c 	.word	0x2000114c

08003818 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	4603      	mov	r3, r0
 8003836:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003838:	f000 fcbc 	bl	80041b4 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800383c:	88fb      	ldrh	r3, [r7, #6]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	21a8      	movs	r1, #168	@ 0xa8
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fcda 	bl	80041fc <TS_IO_Read>
 8003848:	4603      	mov	r3, r0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	4603      	mov	r3, r0
 800385a:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	4618      	mov	r0, r3
 8003860:	f000 f8bb 	bl	80039da <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f88c 	bl	8003984 <ft6x06_TS_DisableIT>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fcb7 	bl	80041fc <TS_IO_Read>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2db      	uxtb	r3, r3
 800389c:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	4b05      	ldr	r3, [pc, #20]	@ (80038c4 <ft6x06_TS_DetectTouch+0x50>)
 80038b0:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80038b2:	4b04      	ldr	r3, [pc, #16]	@ (80038c4 <ft6x06_TS_DetectTouch+0x50>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	b2db      	uxtb	r3, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20001150 	.word	0x20001150

080038c8 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80038da:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <ft6x06_TS_GetXY+0x90>)
 80038dc:	789a      	ldrb	r2, [r3, #2]
 80038de:	4b1e      	ldr	r3, [pc, #120]	@ (8003958 <ft6x06_TS_GetXY+0x90>)
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d234      	bcs.n	8003950 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80038e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <ft6x06_TS_GetXY+0x90>)
 80038e8:	789b      	ldrb	r3, [r3, #2]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <ft6x06_TS_GetXY+0x2c>
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d003      	beq.n	80038fa <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80038f2:	e005      	b.n	8003900 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80038f4:	2303      	movs	r3, #3
 80038f6:	75fb      	strb	r3, [r7, #23]
      break;
 80038f8:	e002      	b.n	8003900 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80038fa:	2309      	movs	r3, #9
 80038fc:	75fb      	strb	r3, [r7, #23]
      break;
 80038fe:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8003900:	89fb      	ldrh	r3, [r7, #14]
 8003902:	b2d8      	uxtb	r0, r3
 8003904:	f107 0210 	add.w	r2, r7, #16
 8003908:	7df9      	ldrb	r1, [r7, #23]
 800390a:	2304      	movs	r3, #4
 800390c:	f000 fc94 	bl	8004238 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8003910:	7c3b      	ldrb	r3, [r7, #16]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	b21b      	sxth	r3, r3
 8003916:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800391a:	b21a      	sxth	r2, r3
 800391c:	7c7b      	ldrb	r3, [r7, #17]
 800391e:	b21b      	sxth	r3, r3
 8003920:	4313      	orrs	r3, r2
 8003922:	b21b      	sxth	r3, r3
 8003924:	b29a      	uxth	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800392a:	7cbb      	ldrb	r3, [r7, #18]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	b21b      	sxth	r3, r3
 8003930:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003934:	b21a      	sxth	r2, r3
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003944:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <ft6x06_TS_GetXY+0x90>)
 8003946:	789b      	ldrb	r3, [r3, #2]
 8003948:	3301      	adds	r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b02      	ldr	r3, [pc, #8]	@ (8003958 <ft6x06_TS_GetXY+0x90>)
 800394e:	709a      	strb	r2, [r3, #2]
  }
}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20001150 	.word	0x20001150

0800395c <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	b2db      	uxtb	r3, r3
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	21a4      	movs	r1, #164	@ 0xa4
 8003976:	4618      	mov	r0, r3
 8003978:	f000 fc26 	bl	80041c8 <TS_IO_Write>
}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800398e:	2300      	movs	r3, #0
 8003990:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003992:	2300      	movs	r3, #0
 8003994:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	21a4      	movs	r1, #164	@ 0xa4
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 fc12 	bl	80041c8 <TS_IO_Write>
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80039da:	b480      	push	{r7}
 80039dc:	b085      	sub	sp, #20
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80039e8:	68fb      	ldr	r3, [r7, #12]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
 8003a0a:	e00b      	b.n	8003a24 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a38 <ft6x06_GetInstance+0x40>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	461a      	mov	r2, r3
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	e006      	b.n	8003a2c <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	3301      	adds	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d9f0      	bls.n	8003a0c <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003a2a:	23ff      	movs	r3, #255	@ 0xff
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	2000114c 	.word	0x2000114c

08003a3c <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003a46:	49c1      	ldr	r1, [pc, #772]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f001 f895 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8003a4e:	49c0      	ldr	r1, [pc, #768]	@ (8003d50 <OTM8009A_Init+0x314>)
 8003a50:	2003      	movs	r0, #3
 8003a52:	f001 f891 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8003a56:	49bf      	ldr	r1, [pc, #764]	@ (8003d54 <OTM8009A_Init+0x318>)
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f001 f88d 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8003a5e:	49be      	ldr	r1, [pc, #760]	@ (8003d58 <OTM8009A_Init+0x31c>)
 8003a60:	2002      	movs	r0, #2
 8003a62:	f001 f889 	bl	8004b78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8003a66:	49bb      	ldr	r1, [pc, #748]	@ (8003d54 <OTM8009A_Init+0x318>)
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f001 f885 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8003a6e:	49bb      	ldr	r1, [pc, #748]	@ (8003d5c <OTM8009A_Init+0x320>)
 8003a70:	2000      	movs	r0, #0
 8003a72:	f001 f881 	bl	8004b78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8003a76:	200a      	movs	r0, #10
 8003a78:	f000 fbfc 	bl	8004274 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8003a7c:	49b8      	ldr	r1, [pc, #736]	@ (8003d60 <OTM8009A_Init+0x324>)
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f001 f87a 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8003a84:	49b7      	ldr	r1, [pc, #732]	@ (8003d64 <OTM8009A_Init+0x328>)
 8003a86:	2000      	movs	r0, #0
 8003a88:	f001 f876 	bl	8004b78 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8003a8c:	200a      	movs	r0, #10
 8003a8e:	f000 fbf1 	bl	8004274 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8003a92:	49b5      	ldr	r1, [pc, #724]	@ (8003d68 <OTM8009A_Init+0x32c>)
 8003a94:	2000      	movs	r0, #0
 8003a96:	f001 f86f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8003a9a:	49b4      	ldr	r1, [pc, #720]	@ (8003d6c <OTM8009A_Init+0x330>)
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	f001 f86b 	bl	8004b78 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8003aa2:	49b3      	ldr	r1, [pc, #716]	@ (8003d70 <OTM8009A_Init+0x334>)
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f001 f867 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8003aaa:	49b2      	ldr	r1, [pc, #712]	@ (8003d74 <OTM8009A_Init+0x338>)
 8003aac:	2000      	movs	r0, #0
 8003aae:	f001 f863 	bl	8004b78 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8003ab2:	49b1      	ldr	r1, [pc, #708]	@ (8003d78 <OTM8009A_Init+0x33c>)
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f001 f85f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8003aba:	49b0      	ldr	r1, [pc, #704]	@ (8003d7c <OTM8009A_Init+0x340>)
 8003abc:	2000      	movs	r0, #0
 8003abe:	f001 f85b 	bl	8004b78 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003ac2:	49a2      	ldr	r1, [pc, #648]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f001 f857 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8003aca:	49ad      	ldr	r1, [pc, #692]	@ (8003d80 <OTM8009A_Init+0x344>)
 8003acc:	2000      	movs	r0, #0
 8003ace:	f001 f853 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8003ad2:	49ac      	ldr	r1, [pc, #688]	@ (8003d84 <OTM8009A_Init+0x348>)
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	f001 f84f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8003ada:	49ab      	ldr	r1, [pc, #684]	@ (8003d88 <OTM8009A_Init+0x34c>)
 8003adc:	2000      	movs	r0, #0
 8003ade:	f001 f84b 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8003ae2:	49aa      	ldr	r1, [pc, #680]	@ (8003d8c <OTM8009A_Init+0x350>)
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f001 f847 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8003aea:	49a9      	ldr	r1, [pc, #676]	@ (8003d90 <OTM8009A_Init+0x354>)
 8003aec:	2000      	movs	r0, #0
 8003aee:	f001 f843 	bl	8004b78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8003af2:	49a8      	ldr	r1, [pc, #672]	@ (8003d94 <OTM8009A_Init+0x358>)
 8003af4:	2000      	movs	r0, #0
 8003af6:	f001 f83f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8003afa:	49a7      	ldr	r1, [pc, #668]	@ (8003d98 <OTM8009A_Init+0x35c>)
 8003afc:	2000      	movs	r0, #0
 8003afe:	f001 f83b 	bl	8004b78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8003b02:	49a6      	ldr	r1, [pc, #664]	@ (8003d9c <OTM8009A_Init+0x360>)
 8003b04:	2000      	movs	r0, #0
 8003b06:	f001 f837 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8003b0a:	499a      	ldr	r1, [pc, #616]	@ (8003d74 <OTM8009A_Init+0x338>)
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f001 f833 	bl	8004b78 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003b12:	498e      	ldr	r1, [pc, #568]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003b14:	2000      	movs	r0, #0
 8003b16:	f001 f82f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8003b1a:	49a1      	ldr	r1, [pc, #644]	@ (8003da0 <OTM8009A_Init+0x364>)
 8003b1c:	2002      	movs	r0, #2
 8003b1e:	f001 f82b 	bl	8004b78 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8003b22:	49a0      	ldr	r1, [pc, #640]	@ (8003da4 <OTM8009A_Init+0x368>)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f001 f827 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8003b2a:	499f      	ldr	r1, [pc, #636]	@ (8003da8 <OTM8009A_Init+0x36c>)
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f001 f823 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8003b32:	499e      	ldr	r1, [pc, #632]	@ (8003dac <OTM8009A_Init+0x370>)
 8003b34:	2000      	movs	r0, #0
 8003b36:	f001 f81f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8003b3a:	499d      	ldr	r1, [pc, #628]	@ (8003db0 <OTM8009A_Init+0x374>)
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f001 f81b 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8003b42:	499c      	ldr	r1, [pc, #624]	@ (8003db4 <OTM8009A_Init+0x378>)
 8003b44:	2000      	movs	r0, #0
 8003b46:	f001 f817 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8003b4a:	499b      	ldr	r1, [pc, #620]	@ (8003db8 <OTM8009A_Init+0x37c>)
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f001 f813 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8003b52:	498c      	ldr	r1, [pc, #560]	@ (8003d84 <OTM8009A_Init+0x348>)
 8003b54:	2000      	movs	r0, #0
 8003b56:	f001 f80f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8003b5a:	4998      	ldr	r1, [pc, #608]	@ (8003dbc <OTM8009A_Init+0x380>)
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f001 f80b 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8003b62:	498a      	ldr	r1, [pc, #552]	@ (8003d8c <OTM8009A_Init+0x350>)
 8003b64:	2000      	movs	r0, #0
 8003b66:	f001 f807 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8003b6a:	4995      	ldr	r1, [pc, #596]	@ (8003dc0 <OTM8009A_Init+0x384>)
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f001 f803 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8003b72:	4994      	ldr	r1, [pc, #592]	@ (8003dc4 <OTM8009A_Init+0x388>)
 8003b74:	2000      	movs	r0, #0
 8003b76:	f000 ffff 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8003b7a:	4993      	ldr	r1, [pc, #588]	@ (8003dc8 <OTM8009A_Init+0x38c>)
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f000 fffb 	bl	8004b78 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8003b82:	4974      	ldr	r1, [pc, #464]	@ (8003d54 <OTM8009A_Init+0x318>)
 8003b84:	2000      	movs	r0, #0
 8003b86:	f000 fff7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8003b8a:	4990      	ldr	r1, [pc, #576]	@ (8003dcc <OTM8009A_Init+0x390>)
 8003b8c:	2006      	movs	r0, #6
 8003b8e:	f000 fff3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8003b92:	498f      	ldr	r1, [pc, #572]	@ (8003dd0 <OTM8009A_Init+0x394>)
 8003b94:	2000      	movs	r0, #0
 8003b96:	f000 ffef 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8003b9a:	498e      	ldr	r1, [pc, #568]	@ (8003dd4 <OTM8009A_Init+0x398>)
 8003b9c:	200e      	movs	r0, #14
 8003b9e:	f000 ffeb 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8003ba2:	498d      	ldr	r1, [pc, #564]	@ (8003dd8 <OTM8009A_Init+0x39c>)
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f000 ffe7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8003baa:	498c      	ldr	r1, [pc, #560]	@ (8003ddc <OTM8009A_Init+0x3a0>)
 8003bac:	200e      	movs	r0, #14
 8003bae:	f000 ffe3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8003bb2:	498b      	ldr	r1, [pc, #556]	@ (8003de0 <OTM8009A_Init+0x3a4>)
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f000 ffdf 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8003bba:	498a      	ldr	r1, [pc, #552]	@ (8003de4 <OTM8009A_Init+0x3a8>)
 8003bbc:	200a      	movs	r0, #10
 8003bbe:	f000 ffdb 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8003bc2:	4989      	ldr	r1, [pc, #548]	@ (8003de8 <OTM8009A_Init+0x3ac>)
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f000 ffd7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8003bca:	4988      	ldr	r1, [pc, #544]	@ (8003dec <OTM8009A_Init+0x3b0>)
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f000 ffd3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8003bd2:	4960      	ldr	r1, [pc, #384]	@ (8003d54 <OTM8009A_Init+0x318>)
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f000 ffcf 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8003bda:	4985      	ldr	r1, [pc, #532]	@ (8003df0 <OTM8009A_Init+0x3b4>)
 8003bdc:	200a      	movs	r0, #10
 8003bde:	f000 ffcb 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8003be2:	4984      	ldr	r1, [pc, #528]	@ (8003df4 <OTM8009A_Init+0x3b8>)
 8003be4:	2000      	movs	r0, #0
 8003be6:	f000 ffc7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8003bea:	4983      	ldr	r1, [pc, #524]	@ (8003df8 <OTM8009A_Init+0x3bc>)
 8003bec:	200f      	movs	r0, #15
 8003bee:	f000 ffc3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8003bf2:	4977      	ldr	r1, [pc, #476]	@ (8003dd0 <OTM8009A_Init+0x394>)
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f000 ffbf 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8003bfa:	4980      	ldr	r1, [pc, #512]	@ (8003dfc <OTM8009A_Init+0x3c0>)
 8003bfc:	200f      	movs	r0, #15
 8003bfe:	f000 ffbb 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8003c02:	4975      	ldr	r1, [pc, #468]	@ (8003dd8 <OTM8009A_Init+0x39c>)
 8003c04:	2000      	movs	r0, #0
 8003c06:	f000 ffb7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8003c0a:	497d      	ldr	r1, [pc, #500]	@ (8003e00 <OTM8009A_Init+0x3c4>)
 8003c0c:	200a      	movs	r0, #10
 8003c0e:	f000 ffb3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8003c12:	4973      	ldr	r1, [pc, #460]	@ (8003de0 <OTM8009A_Init+0x3a4>)
 8003c14:	2000      	movs	r0, #0
 8003c16:	f000 ffaf 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8003c1a:	497a      	ldr	r1, [pc, #488]	@ (8003e04 <OTM8009A_Init+0x3c8>)
 8003c1c:	200f      	movs	r0, #15
 8003c1e:	f000 ffab 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8003c22:	4971      	ldr	r1, [pc, #452]	@ (8003de8 <OTM8009A_Init+0x3ac>)
 8003c24:	2000      	movs	r0, #0
 8003c26:	f000 ffa7 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8003c2a:	4977      	ldr	r1, [pc, #476]	@ (8003e08 <OTM8009A_Init+0x3cc>)
 8003c2c:	200f      	movs	r0, #15
 8003c2e:	f000 ffa3 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8003c32:	4976      	ldr	r1, [pc, #472]	@ (8003e0c <OTM8009A_Init+0x3d0>)
 8003c34:	2000      	movs	r0, #0
 8003c36:	f000 ff9f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8003c3a:	4975      	ldr	r1, [pc, #468]	@ (8003e10 <OTM8009A_Init+0x3d4>)
 8003c3c:	200a      	movs	r0, #10
 8003c3e:	f000 ff9b 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8003c42:	4974      	ldr	r1, [pc, #464]	@ (8003e14 <OTM8009A_Init+0x3d8>)
 8003c44:	2000      	movs	r0, #0
 8003c46:	f000 ff97 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8003c4a:	4973      	ldr	r1, [pc, #460]	@ (8003e18 <OTM8009A_Init+0x3dc>)
 8003c4c:	200a      	movs	r0, #10
 8003c4e:	f000 ff93 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8003c52:	4940      	ldr	r1, [pc, #256]	@ (8003d54 <OTM8009A_Init+0x318>)
 8003c54:	2000      	movs	r0, #0
 8003c56:	f000 ff8f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8003c5a:	4970      	ldr	r1, [pc, #448]	@ (8003e1c <OTM8009A_Init+0x3e0>)
 8003c5c:	200a      	movs	r0, #10
 8003c5e:	f000 ff8b 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8003c62:	4964      	ldr	r1, [pc, #400]	@ (8003df4 <OTM8009A_Init+0x3b8>)
 8003c64:	2000      	movs	r0, #0
 8003c66:	f000 ff87 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8003c6a:	496d      	ldr	r1, [pc, #436]	@ (8003e20 <OTM8009A_Init+0x3e4>)
 8003c6c:	200f      	movs	r0, #15
 8003c6e:	f000 ff83 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8003c72:	4957      	ldr	r1, [pc, #348]	@ (8003dd0 <OTM8009A_Init+0x394>)
 8003c74:	2000      	movs	r0, #0
 8003c76:	f000 ff7f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8003c7a:	496a      	ldr	r1, [pc, #424]	@ (8003e24 <OTM8009A_Init+0x3e8>)
 8003c7c:	200f      	movs	r0, #15
 8003c7e:	f000 ff7b 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8003c82:	4955      	ldr	r1, [pc, #340]	@ (8003dd8 <OTM8009A_Init+0x39c>)
 8003c84:	2000      	movs	r0, #0
 8003c86:	f000 ff77 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8003c8a:	4967      	ldr	r1, [pc, #412]	@ (8003e28 <OTM8009A_Init+0x3ec>)
 8003c8c:	200a      	movs	r0, #10
 8003c8e:	f000 ff73 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8003c92:	4953      	ldr	r1, [pc, #332]	@ (8003de0 <OTM8009A_Init+0x3a4>)
 8003c94:	2000      	movs	r0, #0
 8003c96:	f000 ff6f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8003c9a:	4964      	ldr	r1, [pc, #400]	@ (8003e2c <OTM8009A_Init+0x3f0>)
 8003c9c:	200f      	movs	r0, #15
 8003c9e:	f000 ff6b 	bl	8004b78 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8003ca2:	4951      	ldr	r1, [pc, #324]	@ (8003de8 <OTM8009A_Init+0x3ac>)
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f000 ff67 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8003caa:	4961      	ldr	r1, [pc, #388]	@ (8003e30 <OTM8009A_Init+0x3f4>)
 8003cac:	200f      	movs	r0, #15
 8003cae:	f000 ff63 	bl	8004b78 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8003cb2:	4934      	ldr	r1, [pc, #208]	@ (8003d84 <OTM8009A_Init+0x348>)
 8003cb4:	2000      	movs	r0, #0
 8003cb6:	f000 ff5f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8003cba:	495e      	ldr	r1, [pc, #376]	@ (8003e34 <OTM8009A_Init+0x3f8>)
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f000 ff5b 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8003cc2:	495d      	ldr	r1, [pc, #372]	@ (8003e38 <OTM8009A_Init+0x3fc>)
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f000 ff57 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8003cca:	495c      	ldr	r1, [pc, #368]	@ (8003e3c <OTM8009A_Init+0x400>)
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f000 ff53 	bl	8004b78 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8003cd2:	495b      	ldr	r1, [pc, #364]	@ (8003e40 <OTM8009A_Init+0x404>)
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f000 ff4f 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8003cda:	495a      	ldr	r1, [pc, #360]	@ (8003e44 <OTM8009A_Init+0x408>)
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f000 ff4b 	bl	8004b78 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003ce2:	491a      	ldr	r1, [pc, #104]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f000 ff47 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8003cea:	4957      	ldr	r1, [pc, #348]	@ (8003e48 <OTM8009A_Init+0x40c>)
 8003cec:	2003      	movs	r0, #3
 8003cee:	f000 ff43 	bl	8004b78 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003cf2:	4916      	ldr	r1, [pc, #88]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f000 ff3f 	bl	8004b78 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003cfa:	4914      	ldr	r1, [pc, #80]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f000 ff3b 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8003d02:	4952      	ldr	r1, [pc, #328]	@ (8003e4c <OTM8009A_Init+0x410>)
 8003d04:	2010      	movs	r0, #16
 8003d06:	f000 ff37 	bl	8004b78 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003d0a:	4910      	ldr	r1, [pc, #64]	@ (8003d4c <OTM8009A_Init+0x310>)
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f000 ff33 	bl	8004b78 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8003d12:	494f      	ldr	r1, [pc, #316]	@ (8003e50 <OTM8009A_Init+0x414>)
 8003d14:	2010      	movs	r0, #16
 8003d16:	f000 ff2f 	bl	8004b78 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8003d1a:	494e      	ldr	r1, [pc, #312]	@ (8003e54 <OTM8009A_Init+0x418>)
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f000 ff2b 	bl	8004b78 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8003d22:	2078      	movs	r0, #120	@ 0x78
 8003d24:	f000 faa6 	bl	8004274 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <OTM8009A_Init+0x304>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f040 8095 	bne.w	8003e60 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8003d36:	4948      	ldr	r1, [pc, #288]	@ (8003e58 <OTM8009A_Init+0x41c>)
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f000 ff1d 	bl	8004b78 <DSI_IO_WriteCmd>
    break;
 8003d3e:	e090      	b.n	8003e62 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8003d40:	4946      	ldr	r1, [pc, #280]	@ (8003e5c <OTM8009A_Init+0x420>)
 8003d42:	2000      	movs	r0, #0
 8003d44:	f000 ff18 	bl	8004b78 <DSI_IO_WriteCmd>
    break;
 8003d48:	e08b      	b.n	8003e62 <OTM8009A_Init+0x426>
 8003d4a:	bf00      	nop
 8003d4c:	08013dd4 	.word	0x08013dd4
 8003d50:	08013c8c 	.word	0x08013c8c
 8003d54:	08013dd8 	.word	0x08013dd8
 8003d58:	08013c90 	.word	0x08013c90
 8003d5c:	08013ddc 	.word	0x08013ddc
 8003d60:	08013de0 	.word	0x08013de0
 8003d64:	08013de4 	.word	0x08013de4
 8003d68:	08013de8 	.word	0x08013de8
 8003d6c:	08013dec 	.word	0x08013dec
 8003d70:	08013df0 	.word	0x08013df0
 8003d74:	08013df4 	.word	0x08013df4
 8003d78:	08013df8 	.word	0x08013df8
 8003d7c:	08013dfc 	.word	0x08013dfc
 8003d80:	08013e00 	.word	0x08013e00
 8003d84:	08013e04 	.word	0x08013e04
 8003d88:	08013e08 	.word	0x08013e08
 8003d8c:	08013e0c 	.word	0x08013e0c
 8003d90:	08013e10 	.word	0x08013e10
 8003d94:	08013e14 	.word	0x08013e14
 8003d98:	08013e18 	.word	0x08013e18
 8003d9c:	08013e1c 	.word	0x08013e1c
 8003da0:	08013cbc 	.word	0x08013cbc
 8003da4:	08013e20 	.word	0x08013e20
 8003da8:	08013e24 	.word	0x08013e24
 8003dac:	08013e28 	.word	0x08013e28
 8003db0:	08013e2c 	.word	0x08013e2c
 8003db4:	08013e30 	.word	0x08013e30
 8003db8:	08013e34 	.word	0x08013e34
 8003dbc:	08013e38 	.word	0x08013e38
 8003dc0:	08013e3c 	.word	0x08013e3c
 8003dc4:	08013e40 	.word	0x08013e40
 8003dc8:	08013cc0 	.word	0x08013cc0
 8003dcc:	08013cc4 	.word	0x08013cc4
 8003dd0:	08013e44 	.word	0x08013e44
 8003dd4:	08013ccc 	.word	0x08013ccc
 8003dd8:	08013e48 	.word	0x08013e48
 8003ddc:	08013cdc 	.word	0x08013cdc
 8003de0:	08013e4c 	.word	0x08013e4c
 8003de4:	08013cec 	.word	0x08013cec
 8003de8:	08013e50 	.word	0x08013e50
 8003dec:	08013e88 	.word	0x08013e88
 8003df0:	08013cf8 	.word	0x08013cf8
 8003df4:	08013e54 	.word	0x08013e54
 8003df8:	08013d04 	.word	0x08013d04
 8003dfc:	08013d14 	.word	0x08013d14
 8003e00:	08013d24 	.word	0x08013d24
 8003e04:	08013d30 	.word	0x08013d30
 8003e08:	08013d40 	.word	0x08013d40
 8003e0c:	08013e58 	.word	0x08013e58
 8003e10:	08013d50 	.word	0x08013d50
 8003e14:	08013e5c 	.word	0x08013e5c
 8003e18:	08013d5c 	.word	0x08013d5c
 8003e1c:	08013d68 	.word	0x08013d68
 8003e20:	08013d74 	.word	0x08013d74
 8003e24:	08013d84 	.word	0x08013d84
 8003e28:	08013d94 	.word	0x08013d94
 8003e2c:	08013da0 	.word	0x08013da0
 8003e30:	08013db0 	.word	0x08013db0
 8003e34:	08013e8c 	.word	0x08013e8c
 8003e38:	08013e90 	.word	0x08013e90
 8003e3c:	08013e94 	.word	0x08013e94
 8003e40:	08013e98 	.word	0x08013e98
 8003e44:	08013e9c 	.word	0x08013e9c
 8003e48:	08013dc0 	.word	0x08013dc0
 8003e4c:	08013c94 	.word	0x08013c94
 8003e50:	08013ca8 	.word	0x08013ca8
 8003e54:	08013e60 	.word	0x08013e60
 8003e58:	08013e64 	.word	0x08013e64
 8003e5c:	08013e68 	.word	0x08013e68
  default :
    break;
 8003e60:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d10b      	bne.n	8003e80 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8003e68:	4916      	ldr	r1, [pc, #88]	@ (8003ec4 <OTM8009A_Init+0x488>)
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f000 fe84 	bl	8004b78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8003e70:	4915      	ldr	r1, [pc, #84]	@ (8003ec8 <OTM8009A_Init+0x48c>)
 8003e72:	2004      	movs	r0, #4
 8003e74:	f000 fe80 	bl	8004b78 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8003e78:	4914      	ldr	r1, [pc, #80]	@ (8003ecc <OTM8009A_Init+0x490>)
 8003e7a:	2004      	movs	r0, #4
 8003e7c:	f000 fe7c 	bl	8004b78 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8003e80:	4913      	ldr	r1, [pc, #76]	@ (8003ed0 <OTM8009A_Init+0x494>)
 8003e82:	2000      	movs	r0, #0
 8003e84:	f000 fe78 	bl	8004b78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8003e88:	4912      	ldr	r1, [pc, #72]	@ (8003ed4 <OTM8009A_Init+0x498>)
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f000 fe74 	bl	8004b78 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8003e90:	4911      	ldr	r1, [pc, #68]	@ (8003ed8 <OTM8009A_Init+0x49c>)
 8003e92:	2000      	movs	r0, #0
 8003e94:	f000 fe70 	bl	8004b78 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8003e98:	4910      	ldr	r1, [pc, #64]	@ (8003edc <OTM8009A_Init+0x4a0>)
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f000 fe6c 	bl	8004b78 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8003ea0:	490f      	ldr	r1, [pc, #60]	@ (8003ee0 <OTM8009A_Init+0x4a4>)
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f000 fe68 	bl	8004b78 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8003ea8:	490e      	ldr	r1, [pc, #56]	@ (8003ee4 <OTM8009A_Init+0x4a8>)
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f000 fe64 	bl	8004b78 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8003eb0:	490d      	ldr	r1, [pc, #52]	@ (8003ee8 <OTM8009A_Init+0x4ac>)
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 fe60 	bl	8004b78 <DSI_IO_WriteCmd>

  return 0;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	08013e6c 	.word	0x08013e6c
 8003ec8:	08013dc4 	.word	0x08013dc4
 8003ecc:	08013dcc 	.word	0x08013dcc
 8003ed0:	08013e70 	.word	0x08013e70
 8003ed4:	08013e74 	.word	0x08013e74
 8003ed8:	08013e78 	.word	0x08013e78
 8003edc:	08013e7c 	.word	0x08013e7c
 8003ee0:	08013e80 	.word	0x08013e80
 8003ee4:	08013dd4 	.word	0x08013dd4
 8003ee8:	08013e84 	.word	0x08013e84

08003eec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a58      	ldr	r2, [pc, #352]	@ (8004058 <I2Cx_MspInit+0x16c>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d15b      	bne.n	8003fb4 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003efc:	4b57      	ldr	r3, [pc, #348]	@ (800405c <I2Cx_MspInit+0x170>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	4a56      	ldr	r2, [pc, #344]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f02:	f043 0308 	orr.w	r3, r3, #8
 8003f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f08:	4b54      	ldr	r3, [pc, #336]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003f14:	4b51      	ldr	r3, [pc, #324]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	4a50      	ldr	r2, [pc, #320]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f1a:	f043 0302 	orr.w	r3, r3, #2
 8003f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f20:	4b4e      	ldr	r3, [pc, #312]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f30:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003f32:	2312      	movs	r3, #18
 8003f34:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8003f3e:	2304      	movs	r3, #4
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8003f42:	f107 031c 	add.w	r3, r7, #28
 8003f46:	4619      	mov	r1, r3
 8003f48:	4845      	ldr	r0, [pc, #276]	@ (8004060 <I2Cx_MspInit+0x174>)
 8003f4a:	f004 fcc7 	bl	80088dc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003f4e:	2380      	movs	r3, #128	@ 0x80
 8003f50:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8003f52:	230b      	movs	r3, #11
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8003f56:	f107 031c 	add.w	r3, r7, #28
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4841      	ldr	r0, [pc, #260]	@ (8004064 <I2Cx_MspInit+0x178>)
 8003f5e:	f004 fcbd 	bl	80088dc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003f62:	4b3e      	ldr	r3, [pc, #248]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a3d      	ldr	r2, [pc, #244]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003f7a:	4b38      	ldr	r3, [pc, #224]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	4a37      	ldr	r2, [pc, #220]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f84:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003f86:	4b35      	ldr	r3, [pc, #212]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	4a34      	ldr	r2, [pc, #208]	@ (800405c <I2Cx_MspInit+0x170>)
 8003f8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f90:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	210f      	movs	r1, #15
 8003f96:	205f      	movs	r0, #95	@ 0x5f
 8003f98:	f001 ffe8 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003f9c:	205f      	movs	r0, #95	@ 0x5f
 8003f9e:	f002 f801 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	210f      	movs	r1, #15
 8003fa6:	2060      	movs	r0, #96	@ 0x60
 8003fa8:	f001 ffe0 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8003fac:	2060      	movs	r0, #96	@ 0x60
 8003fae:	f001 fff9 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003fb2:	e04d      	b.n	8004050 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003fb4:	4b29      	ldr	r3, [pc, #164]	@ (800405c <I2Cx_MspInit+0x170>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	4a28      	ldr	r2, [pc, #160]	@ (800405c <I2Cx_MspInit+0x170>)
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc0:	4b26      	ldr	r3, [pc, #152]	@ (800405c <I2Cx_MspInit+0x170>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003fcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fd0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003fde:	2304      	movs	r3, #4
 8003fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003fe2:	f107 031c 	add.w	r3, r7, #28
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	481e      	ldr	r0, [pc, #120]	@ (8004064 <I2Cx_MspInit+0x178>)
 8003fea:	f004 fc77 	bl	80088dc <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8003fee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003ff4:	f107 031c 	add.w	r3, r7, #28
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	481a      	ldr	r0, [pc, #104]	@ (8004064 <I2Cx_MspInit+0x178>)
 8003ffc:	f004 fc6e 	bl	80088dc <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8004000:	4b16      	ldr	r3, [pc, #88]	@ (800405c <I2Cx_MspInit+0x170>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	4a15      	ldr	r2, [pc, #84]	@ (800405c <I2Cx_MspInit+0x170>)
 8004006:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800400a:	6413      	str	r3, [r2, #64]	@ 0x40
 800400c:	4b13      	ldr	r3, [pc, #76]	@ (800405c <I2Cx_MspInit+0x170>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8004018:	4b10      	ldr	r3, [pc, #64]	@ (800405c <I2Cx_MspInit+0x170>)
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	4a0f      	ldr	r2, [pc, #60]	@ (800405c <I2Cx_MspInit+0x170>)
 800401e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004022:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8004024:	4b0d      	ldr	r3, [pc, #52]	@ (800405c <I2Cx_MspInit+0x170>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	4a0c      	ldr	r2, [pc, #48]	@ (800405c <I2Cx_MspInit+0x170>)
 800402a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800402e:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8004030:	2200      	movs	r2, #0
 8004032:	210f      	movs	r1, #15
 8004034:	201f      	movs	r0, #31
 8004036:	f001 ff99 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800403a:	201f      	movs	r0, #31
 800403c:	f001 ffb2 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8004040:	2200      	movs	r2, #0
 8004042:	210f      	movs	r1, #15
 8004044:	2020      	movs	r0, #32
 8004046:	f001 ff91 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800404a:	2020      	movs	r0, #32
 800404c:	f001 ffaa 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 8004050:	bf00      	nop
 8004052:	3730      	adds	r7, #48	@ 0x30
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20001154 	.word	0x20001154
 800405c:	40023800 	.word	0x40023800
 8004060:	40020c00 	.word	0x40020c00
 8004064:	40020400 	.word	0x40020400

08004068 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f005 fa17 	bl	80094a4 <HAL_I2C_GetState>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d125      	bne.n	80040c8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a14      	ldr	r2, [pc, #80]	@ (80040d0 <I2Cx_Init+0x68>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a13      	ldr	r2, [pc, #76]	@ (80040d4 <I2Cx_Init+0x6c>)
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e002      	b.n	8004092 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a12      	ldr	r2, [pc, #72]	@ (80040d8 <I2Cx_Init+0x70>)
 8004090:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a11      	ldr	r2, [pc, #68]	@ (80040dc <I2Cx_Init+0x74>)
 8004096:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f7ff ff15 	bl	8003eec <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f004 fef4 	bl	8008eb0 <HAL_I2C_Init>
  }
}
 80040c8:	bf00      	nop
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	20001154 	.word	0x20001154
 80040d4:	40006000 	.word	0x40006000
 80040d8:	40005400 	.word	0x40005400
 80040dc:	40912732 	.word	0x40912732

080040e0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	@ 0x28
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	72fb      	strb	r3, [r7, #11]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	b299      	uxth	r1, r3
 8004102:	88f8      	ldrh	r0, [r7, #6]
 8004104:	893a      	ldrh	r2, [r7, #8]
 8004106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	4603      	mov	r3, r0
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f005 f8aa 	bl	8009270 <HAL_I2C_Mem_Read>
 800411c:	4603      	mov	r3, r0
 800411e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d004      	beq.n	8004130 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8004126:	7afb      	ldrb	r3, [r7, #11]
 8004128:	4619      	mov	r1, r3
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f832 	bl	8004194 <I2Cx_Error>
  }
  return status;
 8004130:	7dfb      	ldrb	r3, [r7, #23]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b08a      	sub	sp, #40	@ 0x28
 800413e:	af04      	add	r7, sp, #16
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	4608      	mov	r0, r1
 8004144:	4611      	mov	r1, r2
 8004146:	461a      	mov	r2, r3
 8004148:	4603      	mov	r3, r0
 800414a:	72fb      	strb	r3, [r7, #11]
 800414c:	460b      	mov	r3, r1
 800414e:	813b      	strh	r3, [r7, #8]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	b299      	uxth	r1, r3
 800415c:	88f8      	ldrh	r0, [r7, #6]
 800415e:	893a      	ldrh	r2, [r7, #8]
 8004160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004164:	9302      	str	r3, [sp, #8]
 8004166:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4603      	mov	r3, r0
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f004 ff69 	bl	8009048 <HAL_I2C_Mem_Write>
 8004176:	4603      	mov	r3, r0
 8004178:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d004      	beq.n	800418a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8004180:	7afb      	ldrb	r3, [r7, #11]
 8004182:	4619      	mov	r1, r3
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f805 	bl	8004194 <I2Cx_Error>
  }
  return status;
 800418a:	7dfb      	ldrb	r3, [r7, #23]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f004 ff21 	bl	8008fe8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7ff ff5e 	bl	8004068 <I2Cx_Init>
}
 80041ac:	bf00      	nop
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80041b8:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <TS_IO_Init+0x10>)
 80041ba:	f7ff ff55 	bl	8004068 <I2Cx_Init>
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20001154 	.word	0x20001154

080041c8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	4603      	mov	r3, r0
 80041d0:	71fb      	strb	r3, [r7, #7]
 80041d2:	460b      	mov	r3, r1
 80041d4:	71bb      	strb	r3, [r7, #6]
 80041d6:	4613      	mov	r3, r2
 80041d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80041da:	79bb      	ldrb	r3, [r7, #6]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	79f9      	ldrb	r1, [r7, #7]
 80041e0:	2301      	movs	r3, #1
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	1d7b      	adds	r3, r7, #5
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	2301      	movs	r3, #1
 80041ea:	4803      	ldr	r0, [pc, #12]	@ (80041f8 <TS_IO_Write+0x30>)
 80041ec:	f7ff ffa5 	bl	800413a <I2Cx_WriteMultiple>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20001154 	.word	0x20001154

080041fc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af02      	add	r7, sp, #8
 8004202:	4603      	mov	r3, r0
 8004204:	460a      	mov	r2, r1
 8004206:	71fb      	strb	r3, [r7, #7]
 8004208:	4613      	mov	r3, r2
 800420a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8004210:	79bb      	ldrb	r3, [r7, #6]
 8004212:	b29a      	uxth	r2, r3
 8004214:	79f9      	ldrb	r1, [r7, #7]
 8004216:	2301      	movs	r3, #1
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	f107 030f 	add.w	r3, r7, #15
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2301      	movs	r3, #1
 8004222:	4804      	ldr	r0, [pc, #16]	@ (8004234 <TS_IO_Read+0x38>)
 8004224:	f7ff ff5c 	bl	80040e0 <I2Cx_ReadMultiple>

  return read_value;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20001154 	.word	0x20001154

08004238 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af02      	add	r7, sp, #8
 800423e:	603a      	str	r2, [r7, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
 8004246:	460b      	mov	r3, r1
 8004248:	71bb      	strb	r3, [r7, #6]
 800424a:	4613      	mov	r3, r2
 800424c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800424e:	79bb      	ldrb	r3, [r7, #6]
 8004250:	b29a      	uxth	r2, r3
 8004252:	79f9      	ldrb	r1, [r7, #7]
 8004254:	88bb      	ldrh	r3, [r7, #4]
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	2301      	movs	r3, #1
 800425e:	4804      	ldr	r0, [pc, #16]	@ (8004270 <TS_IO_ReadMultiple+0x38>)
 8004260:	f7ff ff3e 	bl	80040e0 <I2Cx_ReadMultiple>
 8004264:	4603      	mov	r3, r0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20001154 	.word	0x20001154

08004274 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 f985 	bl	800558c <HAL_Delay>
}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800428e:	2001      	movs	r0, #1
 8004290:	f000 f804 	bl	800429c <BSP_LCD_InitEx>
 8004294:	4603      	mov	r3, r0
}
 8004296:	4618      	mov	r0, r3
 8004298:	bd80      	pop	{r7, pc}
	...

0800429c <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b090      	sub	sp, #64	@ 0x40
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80042a6:	f646 3325 	movw	r3, #27429	@ 0x6b25
 80042aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t read_id = 0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	877b      	strh	r3, [r7, #58]	@ 0x3a

  uint32_t laneByteClk_kHz = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80042b4:	f000 f936 	bl	8004524 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80042b8:	f000 fc88 	bl	8004bcc <LCD_IO_GetID>
 80042bc:	4603      	mov	r3, r0
 80042be:	877b      	strh	r3, [r7, #58]	@ 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80042c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80042c2:	2b11      	cmp	r3, #17
 80042c4:	d001      	beq.n	80042ca <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80042c6:	2301      	movs	r3, #1
 80042c8:	e113      	b.n	80044f2 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80042ca:	f000 fc87 	bl	8004bdc <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 80042ce:	4b8b      	ldr	r3, [pc, #556]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 80042d0:	4a8b      	ldr	r2, [pc, #556]	@ (8004500 <BSP_LCD_InitEx+0x264>)
 80042d2:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 80042d4:	4889      	ldr	r0, [pc, #548]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 80042d6:	f002 ffbd 	bl	8007254 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 80042da:	2364      	movs	r3, #100	@ 0x64
 80042dc:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80042de:	2305      	movs	r3, #5
 80042e0:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 80042e6:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80042ea:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80042ec:	4b83      	ldr	r3, [pc, #524]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 80042f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	4a83      	ldr	r2, [pc, #524]	@ (8004504 <BSP_LCD_InitEx+0x268>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	0a9b      	lsrs	r3, r3, #10
 80042fe:	4a7f      	ldr	r2, [pc, #508]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 8004300:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	4619      	mov	r1, r3
 8004308:	487c      	ldr	r0, [pc, #496]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 800430a:	f002 fe23 	bl	8006f54 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d108      	bne.n	8004326 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8004314:	4b7c      	ldr	r3, [pc, #496]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 8004316:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800431a:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 800431c:	4b7b      	ldr	r3, [pc, #492]	@ (800450c <BSP_LCD_InitEx+0x270>)
 800431e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	e007      	b.n	8004336 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8004326:	4b78      	ldr	r3, [pc, #480]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 8004328:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800432c:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800432e:	4b77      	ldr	r3, [pc, #476]	@ (800450c <BSP_LCD_InitEx+0x270>)
 8004330:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8004334:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8004336:	4b74      	ldr	r3, [pc, #464]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	633b      	str	r3, [r7, #48]	@ 0x30
  VACT = lcd_y_size;
 800433c:	4b73      	ldr	r3, [pc, #460]	@ (800450c <BSP_LCD_InitEx+0x270>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8004342:	2301      	movs	r3, #1
 8004344:	62bb      	str	r3, [r7, #40]	@ 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8004346:	230f      	movs	r3, #15
 8004348:	627b      	str	r3, [r7, #36]	@ 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800434a:	2310      	movs	r3, #16
 800434c:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800434e:	2302      	movs	r3, #2
 8004350:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8004352:	2322      	movs	r3, #34	@ 0x22
 8004354:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8004356:	2322      	movs	r3, #34	@ 0x22
 8004358:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800435a:	4b6d      	ldr	r3, [pc, #436]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8004360:	4b6b      	ldr	r3, [pc, #428]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004362:	2205      	movs	r2, #5
 8004364:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8004366:	4b6a      	ldr	r3, [pc, #424]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004368:	2200      	movs	r2, #0
 800436a:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800436c:	4b68      	ldr	r3, [pc, #416]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800436e:	2200      	movs	r2, #0
 8004370:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8004372:	4b67      	ldr	r3, [pc, #412]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004374:	2200      	movs	r2, #0
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8004378:	4b65      	ldr	r3, [pc, #404]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800437a:	2202      	movs	r2, #2
 800437c:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 800437e:	4b64      	ldr	r3, [pc, #400]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004380:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8004384:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8004386:	4b62      	ldr	r3, [pc, #392]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004388:	2200      	movs	r2, #0
 800438a:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 800438c:	4a60      	ldr	r2, [pc, #384]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800439c:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a0:	4a5b      	ldr	r2, [pc, #364]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043a2:	6293      	str	r3, [r2, #40]	@ 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043a8:	fb03 f202 	mul.w	r2, r3, r2
 80043ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	4a57      	ldr	r2, [pc, #348]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80043b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	441a      	add	r2, r3
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	441a      	add	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	4413      	add	r3, r2
 80043c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043c6:	fb03 f202 	mul.w	r2, r3, r2
 80043ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043d2:	6313      	str	r3, [r2, #48]	@ 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80043d4:	4a4e      	ldr	r2, [pc, #312]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	6353      	str	r3, [r2, #52]	@ 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80043da:	4a4d      	ldr	r2, [pc, #308]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043de:	6393      	str	r3, [r2, #56]	@ 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80043e0:	4a4b      	ldr	r2, [pc, #300]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80043e6:	4a4a      	ldr	r2, [pc, #296]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80043ec:	4b48      	ldr	r3, [pc, #288]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043ee:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043f2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80043f4:	4b46      	ldr	r3, [pc, #280]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043f6:	2210      	movs	r2, #16
 80043f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80043fa:	4b45      	ldr	r3, [pc, #276]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8004400:	4b43      	ldr	r3, [pc, #268]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004402:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8004408:	4b41      	ldr	r3, [pc, #260]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800440a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800440e:	655a      	str	r2, [r3, #84]	@ 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8004410:	4b3f      	ldr	r3, [pc, #252]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004416:	659a      	str	r2, [r3, #88]	@ 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8004418:	4b3d      	ldr	r3, [pc, #244]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800441a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800441e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8004420:	4b3b      	ldr	r3, [pc, #236]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8004428:	4b39      	ldr	r3, [pc, #228]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 800442a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800442e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8004430:	4937      	ldr	r1, [pc, #220]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 8004432:	4832      	ldr	r0, [pc, #200]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 8004434:	f003 f94e 	bl	80076d4 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3b01      	subs	r3, #1
 800443c:	4a35      	ldr	r2, [pc, #212]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 800443e:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	4413      	add	r3, r2
 8004446:	3b01      	subs	r3, #1
 8004448:	4a32      	ldr	r2, [pc, #200]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 800444a:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 800444c:	4b2e      	ldr	r3, [pc, #184]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	441a      	add	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	3b01      	subs	r3, #1
 800445a:	4a2e      	ldr	r2, [pc, #184]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 800445c:	6253      	str	r3, [r2, #36]	@ 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800445e:	4b2a      	ldr	r3, [pc, #168]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	441a      	add	r2, r3
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	441a      	add	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	4413      	add	r3, r2
 800446e:	3b01      	subs	r3, #1
 8004470:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8004474:	4b24      	ldr	r3, [pc, #144]	@ (8004508 <BSP_LCD_InitEx+0x26c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a26      	ldr	r2, [pc, #152]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 800447a:	6613      	str	r3, [r2, #96]	@ 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 800447c:	4b23      	ldr	r3, [pc, #140]	@ (800450c <BSP_LCD_InitEx+0x270>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 8004482:	6653      	str	r3, [r2, #100]	@ 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004484:	4b24      	ldr	r3, [pc, #144]	@ (8004518 <BSP_LCD_InitEx+0x27c>)
 8004486:	2208      	movs	r2, #8
 8004488:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800448a:	4b23      	ldr	r3, [pc, #140]	@ (8004518 <BSP_LCD_InitEx+0x27c>)
 800448c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004490:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8004492:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <BSP_LCD_InitEx+0x27c>)
 8004494:	2207      	movs	r2, #7
 8004496:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <BSP_LCD_InitEx+0x27c>)
 800449a:	2200      	movs	r2, #0
 800449c:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800449e:	481e      	ldr	r0, [pc, #120]	@ (8004518 <BSP_LCD_InitEx+0x27c>)
 80044a0:	f007 fde4 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80044b4:	4b17      	ldr	r3, [pc, #92]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80044bc:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044be:	2200      	movs	r2, #0
 80044c0:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80044c2:	4b14      	ldr	r3, [pc, #80]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044c4:	4a15      	ldr	r2, [pc, #84]	@ (800451c <BSP_LCD_InitEx+0x280>)
 80044c6:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80044c8:	4911      	ldr	r1, [pc, #68]	@ (8004510 <BSP_LCD_InitEx+0x274>)
 80044ca:	4812      	ldr	r0, [pc, #72]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044cc:	f005 febc 	bl	800a248 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80044d0:	4810      	ldr	r0, [pc, #64]	@ (8004514 <BSP_LCD_InitEx+0x278>)
 80044d2:	f005 fb4f 	bl	8009b74 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80044d6:	4809      	ldr	r0, [pc, #36]	@ (80044fc <BSP_LCD_InitEx+0x260>)
 80044d8:	f003 fd8e 	bl	8007ff8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80044dc:	f000 fcfe 	bl	8004edc <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80044e0:	480f      	ldr	r0, [pc, #60]	@ (8004520 <BSP_LCD_InitEx+0x284>)
 80044e2:	f000 f957 	bl	8004794 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	4619      	mov	r1, r3
 80044ea:	2000      	movs	r0, #0
 80044ec:	f7ff faa6 	bl	8003a3c <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3740      	adds	r7, #64	@ 0x40
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20001314 	.word	0x20001314
 8004500:	40016c00 	.word	0x40016c00
 8004504:	43215e57 	.word	0x43215e57
 8004508:	20000044 	.word	0x20000044
 800450c:	20000048 	.word	0x20000048
 8004510:	200011a8 	.word	0x200011a8
 8004514:	2000126c 	.word	0x2000126c
 8004518:	2000134c 	.word	0x2000134c
 800451c:	40016800 	.word	0x40016800
 8004520:	20000058 	.word	0x20000058

08004524 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800452a:	4b18      	ldr	r3, [pc, #96]	@ (800458c <BSP_LCD_Reset+0x68>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a17      	ldr	r2, [pc, #92]	@ (800458c <BSP_LCD_Reset+0x68>)
 8004530:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b15      	ldr	r3, [pc, #84]	@ (800458c <BSP_LCD_Reset+0x68>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004548:	2301      	movs	r3, #1
 800454a:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800454c:	2301      	movs	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8004550:	2303      	movs	r3, #3
 8004552:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	4619      	mov	r1, r3
 8004558:	480d      	ldr	r0, [pc, #52]	@ (8004590 <BSP_LCD_Reset+0x6c>)
 800455a:	f004 f9bf 	bl	80088dc <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800455e:	2200      	movs	r2, #0
 8004560:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004564:	480a      	ldr	r0, [pc, #40]	@ (8004590 <BSP_LCD_Reset+0x6c>)
 8004566:	f004 fc71 	bl	8008e4c <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800456a:	2014      	movs	r0, #20
 800456c:	f001 f80e 	bl	800558c <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8004570:	2201      	movs	r2, #1
 8004572:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004576:	4806      	ldr	r0, [pc, #24]	@ (8004590 <BSP_LCD_Reset+0x6c>)
 8004578:	f004 fc68 	bl	8008e4c <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 800457c:	200a      	movs	r0, #10
 800457e:	f001 f805 	bl	800558c <HAL_Delay>
}
 8004582:	bf00      	nop
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40023800 	.word	0x40023800
 8004590:	40022400 	.word	0x40022400

08004594 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8004598:	4b03      	ldr	r3, [pc, #12]	@ (80045a8 <BSP_LCD_GetXSize+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000044 	.word	0x20000044

080045ac <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80045b0:	4b03      	ldr	r3, [pc, #12]	@ (80045c0 <BSP_LCD_GetYSize+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000048 	.word	0x20000048

080045c4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b090      	sub	sp, #64	@ 0x40
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80045d4:	f7ff ffde 	bl	8004594 <BSP_LCD_GetXSize>
 80045d8:	4603      	mov	r3, r0
 80045da:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80045e0:	f7ff ffe4 	bl	80045ac <BSP_LCD_GetYSize>
 80045e4:	4603      	mov	r3, r0
 80045e6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80045f0:	23ff      	movs	r3, #255	@ 0xff
 80045f2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800460a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800460e:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004610:	2307      	movs	r3, #7
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8004614:	f7ff ffbe 	bl	8004594 <BSP_LCD_GetXSize>
 8004618:	4603      	mov	r3, r0
 800461a:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800461c:	f7ff ffc6 	bl	80045ac <BSP_LCD_GetYSize>
 8004620:	4603      	mov	r3, r0
 8004622:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	4619      	mov	r1, r3
 800462c:	480d      	ldr	r0, [pc, #52]	@ (8004664 <BSP_LCD_LayerDefaultInit+0xa0>)
 800462e:	f005 fc33 	bl	8009e98 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	490c      	ldr	r1, [pc, #48]	@ (8004668 <BSP_LCD_LayerDefaultInit+0xa4>)
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	3304      	adds	r3, #4
 8004642:	f04f 32ff 	mov.w	r2, #4294967295
 8004646:	601a      	str	r2, [r3, #0]
  //DrawProp[LayerIndex].pFont     = &Font24;
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8004648:	88fa      	ldrh	r2, [r7, #6]
 800464a:	4907      	ldr	r1, [pc, #28]	@ (8004668 <BSP_LCD_LayerDefaultInit+0xa4>)
 800464c:	4613      	mov	r3, r2
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800465a:	601a      	str	r2, [r3, #0]
}
 800465c:	bf00      	nop
 800465e:	3740      	adds	r7, #64	@ 0x40
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	2000126c 	.word	0x2000126c
 8004668:	20001334 	.word	0x20001334

0800466c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8004674:	4a04      	ldr	r2, [pc, #16]	@ (8004688 <BSP_LCD_SelectLayer+0x1c>)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6013      	str	r3, [r2, #0]
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20001330 	.word	0x20001330

0800468c <BSP_LCD_SetLayerVisible>:
  *          This parameter can be one of the following values:
  *            @arg  ENABLE
  *            @arg  DISABLE
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d112      	bne.n	80046c4 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&(hltdc_discovery), LayerIndex);
 800469e:	4b19      	ldr	r3, [pc, #100]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	01db      	lsls	r3, r3, #7
 80046a8:	4413      	add	r3, r2
 80046aa:	3384      	adds	r3, #132	@ 0x84
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a15      	ldr	r2, [pc, #84]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	4611      	mov	r1, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	01d2      	lsls	r2, r2, #7
 80046b8:	440a      	add	r2, r1
 80046ba:	3284      	adds	r2, #132	@ 0x84
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e011      	b.n	80046e8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&(hltdc_discovery), LayerIndex);
 80046c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	01db      	lsls	r3, r3, #7
 80046ce:	4413      	add	r3, r2
 80046d0:	3384      	adds	r3, #132	@ 0x84
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	4611      	mov	r1, r2
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	01d2      	lsls	r2, r2, #7
 80046de:	440a      	add	r2, r1
 80046e0:	3284      	adds	r2, #132	@ 0x84
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&(hltdc_discovery));
 80046e8:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <BSP_LCD_SetLayerVisible+0x78>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24
  
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	2000126c 	.word	0x2000126c

08004708 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8004710:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <BSP_LCD_SetTextColor+0x28>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4907      	ldr	r1, [pc, #28]	@ (8004734 <BSP_LCD_SetTextColor+0x2c>)
 8004716:	4613      	mov	r3, r2
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	601a      	str	r2, [r3, #0]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20001330 	.word	0x20001330
 8004734:	20001334 	.word	0x20001334

08004738 <BSP_LCD_GetTextColor>:
/**
  * @brief  Gets the LCD text color.
  * @retval Used text color.
  */
uint32_t BSP_LCD_GetTextColor(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].TextColor;
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <BSP_LCD_GetTextColor+0x20>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4906      	ldr	r1, [pc, #24]	@ (800475c <BSP_LCD_GetTextColor+0x24>)
 8004742:	4613      	mov	r3, r2
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	681b      	ldr	r3, [r3, #0]
}
 800474e:	4618      	mov	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20001330 	.word	0x20001330
 800475c:	20001334 	.word	0x20001334

08004760 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8004768:	4b08      	ldr	r3, [pc, #32]	@ (800478c <BSP_LCD_SetBackColor+0x2c>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4908      	ldr	r1, [pc, #32]	@ (8004790 <BSP_LCD_SetBackColor+0x30>)
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3304      	adds	r3, #4
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20001330 	.word	0x20001330
 8004790:	20001334 	.word	0x20001334

08004794 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800479c:	4b08      	ldr	r3, [pc, #32]	@ (80047c0 <BSP_LCD_SetFont+0x2c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4908      	ldr	r1, [pc, #32]	@ (80047c4 <BSP_LCD_SetFont+0x30>)
 80047a2:	4613      	mov	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	3308      	adds	r3, #8
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20001330 	.word	0x20001330
 80047c4:	20001334 	.word	0x20001334

080047c8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80047cc:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <BSP_LCD_GetFont+0x24>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4907      	ldr	r1, [pc, #28]	@ (80047f0 <BSP_LCD_GetFont+0x28>)
 80047d2:	4613      	mov	r3, r2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4413      	add	r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3308      	adds	r3, #8
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20001330 	.word	0x20001330
 80047f0:	20001334 	.word	0x20001334

080047f4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80047fc:	4b0f      	ldr	r3, [pc, #60]	@ (800483c <BSP_LCD_Clear+0x48>)
 80047fe:	681c      	ldr	r4, [r3, #0]
 8004800:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <BSP_LCD_Clear+0x48>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a0e      	ldr	r2, [pc, #56]	@ (8004840 <BSP_LCD_Clear+0x4c>)
 8004806:	2134      	movs	r1, #52	@ 0x34
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	4413      	add	r3, r2
 800480e:	335c      	adds	r3, #92	@ 0x5c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	461e      	mov	r6, r3
 8004814:	f7ff febe 	bl	8004594 <BSP_LCD_GetXSize>
 8004818:	4605      	mov	r5, r0
 800481a:	f7ff fec7 	bl	80045ac <BSP_LCD_GetYSize>
 800481e:	4602      	mov	r2, r0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	9301      	str	r3, [sp, #4]
 8004824:	2300      	movs	r3, #0
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	462a      	mov	r2, r5
 800482c:	4631      	mov	r1, r6
 800482e:	4620      	mov	r0, r4
 8004830:	f000 fb1c 	bl	8004e6c <LL_FillBuffer>
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800483c:	20001330 	.word	0x20001330
 8004840:	2000126c 	.word	0x2000126c

08004844 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	80fb      	strh	r3, [r7, #6]
 800484e:	460b      	mov	r3, r1
 8004850:	80bb      	strh	r3, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004856:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <BSP_LCD_DisplayChar+0x80>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	491b      	ldr	r1, [pc, #108]	@ (80048c8 <BSP_LCD_DisplayChar+0x84>)
 800485c:	4613      	mov	r3, r2
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3308      	adds	r3, #8
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6819      	ldr	r1, [r3, #0]
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8004872:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <BSP_LCD_DisplayChar+0x80>)
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4c14      	ldr	r4, [pc, #80]	@ (80048c8 <BSP_LCD_DisplayChar+0x84>)
 8004878:	4613      	mov	r3, r2
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4423      	add	r3, r4
 8004882:	3308      	adds	r3, #8
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8004888:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800488c:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <BSP_LCD_DisplayChar+0x80>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4c0d      	ldr	r4, [pc, #52]	@ (80048c8 <BSP_LCD_DisplayChar+0x84>)
 8004892:	4613      	mov	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4423      	add	r3, r4
 800489c:	3308      	adds	r3, #8
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	889b      	ldrh	r3, [r3, #4]
 80048a2:	3307      	adds	r3, #7
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	da00      	bge.n	80048aa <BSP_LCD_DisplayChar+0x66>
 80048a8:	3307      	adds	r3, #7
 80048aa:	10db      	asrs	r3, r3, #3
 80048ac:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80048b0:	18ca      	adds	r2, r1, r3
 80048b2:	88b9      	ldrh	r1, [r7, #4]
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fa20 	bl	8004cfc <DrawChar>
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd90      	pop	{r4, r7, pc}
 80048c4:	20001330 	.word	0x20001330
 80048c8:	20001334 	.word	0x20001334

080048cc <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80048cc:	b5b0      	push	{r4, r5, r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60ba      	str	r2, [r7, #8]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	81fb      	strh	r3, [r7, #14]
 80048da:	460b      	mov	r3, r1
 80048dc:	81bb      	strh	r3, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80048e2:	2301      	movs	r3, #1
 80048e4:	83fb      	strh	r3, [r7, #30]
 80048e6:	2300      	movs	r3, #0
 80048e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	2300      	movs	r3, #0
 80048f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80048f6:	e002      	b.n	80048fe <BSP_LCD_DisplayStringAt+0x32>
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	3301      	adds	r3, #1
 80048fc:	61bb      	str	r3, [r7, #24]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	617a      	str	r2, [r7, #20]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f6      	bne.n	80048f8 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800490a:	f7ff fe43 	bl	8004594 <BSP_LCD_GetXSize>
 800490e:	4601      	mov	r1, r0
 8004910:	4b50      	ldr	r3, [pc, #320]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4850      	ldr	r0, [pc, #320]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8004916:	4613      	mov	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4403      	add	r3, r0
 8004920:	3308      	adds	r3, #8
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	889b      	ldrh	r3, [r3, #4]
 8004926:	fbb1 f3f3 	udiv	r3, r1, r3
 800492a:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800492c:	79fb      	ldrb	r3, [r7, #7]
 800492e:	2b03      	cmp	r3, #3
 8004930:	d01c      	beq.n	800496c <BSP_LCD_DisplayStringAt+0xa0>
 8004932:	2b03      	cmp	r3, #3
 8004934:	dc33      	bgt.n	800499e <BSP_LCD_DisplayStringAt+0xd2>
 8004936:	2b01      	cmp	r3, #1
 8004938:	d002      	beq.n	8004940 <BSP_LCD_DisplayStringAt+0x74>
 800493a:	2b02      	cmp	r3, #2
 800493c:	d019      	beq.n	8004972 <BSP_LCD_DisplayStringAt+0xa6>
 800493e:	e02e      	b.n	800499e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	1ad1      	subs	r1, r2, r3
 8004946:	4b43      	ldr	r3, [pc, #268]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4843      	ldr	r0, [pc, #268]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4403      	add	r3, r0
 8004956:	3308      	adds	r3, #8
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	889b      	ldrh	r3, [r3, #4]
 800495c:	fb01 f303 	mul.w	r3, r1, r3
 8004960:	085b      	lsrs	r3, r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	89fb      	ldrh	r3, [r7, #14]
 8004966:	4413      	add	r3, r2
 8004968:	83fb      	strh	r3, [r7, #30]
      break;
 800496a:	e01b      	b.n	80049a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	83fb      	strh	r3, [r7, #30]
      break;
 8004970:	e018      	b.n	80049a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	b299      	uxth	r1, r3
 800497a:	4b36      	ldr	r3, [pc, #216]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4836      	ldr	r0, [pc, #216]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8004980:	4613      	mov	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4403      	add	r3, r0
 800498a:	3308      	adds	r3, #8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	889b      	ldrh	r3, [r3, #4]
 8004990:	fb11 f303 	smulbb	r3, r1, r3
 8004994:	b29a      	uxth	r2, r3
 8004996:	89fb      	ldrh	r3, [r7, #14]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	83fb      	strh	r3, [r7, #30]
      break;
 800499c:	e002      	b.n	80049a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 800499e:	89fb      	ldrh	r3, [r7, #14]
 80049a0:	83fb      	strh	r3, [r7, #30]
      break;
 80049a2:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80049a4:	8bfb      	ldrh	r3, [r7, #30]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <BSP_LCD_DisplayStringAt+0xe6>
 80049aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da1d      	bge.n	80049ee <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80049b6:	e01a      	b.n	80049ee <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	781a      	ldrb	r2, [r3, #0]
 80049bc:	89b9      	ldrh	r1, [r7, #12]
 80049be:	8bfb      	ldrh	r3, [r7, #30]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff ff3f 	bl	8004844 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80049c6:	4b23      	ldr	r3, [pc, #140]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4923      	ldr	r1, [pc, #140]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	440b      	add	r3, r1
 80049d6:	3308      	adds	r3, #8
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	889a      	ldrh	r2, [r3, #4]
 80049dc:	8bfb      	ldrh	r3, [r7, #30]
 80049de:	4413      	add	r3, r2
 80049e0:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3301      	adds	r3, #1
 80049e6:	60bb      	str	r3, [r7, #8]
    i++;
 80049e8:	8bbb      	ldrh	r3, [r7, #28]
 80049ea:	3301      	adds	r3, #1
 80049ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	bf14      	ite	ne
 80049f6:	2301      	movne	r3, #1
 80049f8:	2300      	moveq	r3, #0
 80049fa:	b2dc      	uxtb	r4, r3
 80049fc:	f7ff fdca 	bl	8004594 <BSP_LCD_GetXSize>
 8004a00:	8bb9      	ldrh	r1, [r7, #28]
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4d14      	ldr	r5, [pc, #80]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	442b      	add	r3, r5
 8004a12:	3308      	adds	r3, #8
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	889b      	ldrh	r3, [r3, #4]
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	1ac3      	subs	r3, r0, r3
 8004a1e:	b299      	uxth	r1, r3
 8004a20:	4b0c      	ldr	r3, [pc, #48]	@ (8004a54 <BSP_LCD_DisplayStringAt+0x188>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	480c      	ldr	r0, [pc, #48]	@ (8004a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4403      	add	r3, r0
 8004a30:	3308      	adds	r3, #8
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	889b      	ldrh	r3, [r3, #4]
 8004a36:	4299      	cmp	r1, r3
 8004a38:	bf2c      	ite	cs
 8004a3a:	2301      	movcs	r3, #1
 8004a3c:	2300      	movcc	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	4023      	ands	r3, r4
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1b7      	bne.n	80049b8 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bdb0      	pop	{r4, r5, r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20001330 	.word	0x20001330
 8004a58:	20001334 	.word	0x20001334

08004a5c <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	b086      	sub	sp, #24
 8004a62:	af02      	add	r7, sp, #8
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	4603      	mov	r3, r0
 8004a72:	80bb      	strh	r3, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004a80:	4b20      	ldr	r3, [pc, #128]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	4920      	ldr	r1, [pc, #128]	@ (8004b08 <BSP_LCD_FillRect+0xac>)
 8004a86:	4613      	mov	r3, r2
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe38 	bl	8004708 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <BSP_LCD_FillRect+0xb0>)
 8004a9e:	2134      	movs	r1, #52	@ 0x34
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	335c      	adds	r3, #92	@ 0x5c
 8004aa8:	681c      	ldr	r4, [r3, #0]
 8004aaa:	f7ff fd73 	bl	8004594 <BSP_LCD_GetXSize>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	88bb      	ldrh	r3, [r7, #4]
 8004ab2:	fb03 f202 	mul.w	r2, r3, r2
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4423      	add	r3, r4
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004ac0:	4b10      	ldr	r3, [pc, #64]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	68fd      	ldr	r5, [r7, #12]
 8004ac6:	887e      	ldrh	r6, [r7, #2]
 8004ac8:	f8b7 8000 	ldrh.w	r8, [r7]
 8004acc:	f7ff fd62 	bl	8004594 <BSP_LCD_GetXSize>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	887b      	ldrh	r3, [r7, #2]
 8004ad4:	1ad1      	subs	r1, r2, r3
 8004ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <BSP_LCD_FillRect+0xa8>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	480b      	ldr	r0, [pc, #44]	@ (8004b08 <BSP_LCD_FillRect+0xac>)
 8004adc:	4613      	mov	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4403      	add	r3, r0
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	9100      	str	r1, [sp, #0]
 8004aec:	4643      	mov	r3, r8
 8004aee:	4632      	mov	r2, r6
 8004af0:	4629      	mov	r1, r5
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 f9ba 	bl	8004e6c <LL_FillBuffer>
}
 8004af8:	bf00      	nop
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b02:	bf00      	nop
 8004b04:	20001330 	.word	0x20001330
 8004b08:	20001334 	.word	0x20001334
 8004b0c:	2000126c 	.word	0x2000126c

08004b10 <BSP_LCD_DisplayOn>:
/**
  * @brief  Switch back on the display if was switched off by previous call of BSP_LCD_DisplayOff().
  *         Exit DSI ULPM mode if was allowed and configured in Dsi Configuration.
  */
void BSP_LCD_DisplayOn(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af02      	add	r7, sp, #8
  }
  else
#endif /* USE_LCD_HDMI */    
  {  
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&(hdsi_discovery),
 8004b16:	4b06      	ldr	r3, [pc, #24]	@ (8004b30 <BSP_LCD_DisplayOn+0x20>)
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	2329      	movs	r3, #41	@ 0x29
 8004b20:	2215      	movs	r2, #21
 8004b22:	4804      	ldr	r0, [pc, #16]	@ (8004b34 <BSP_LCD_DisplayOn+0x24>)
 8004b24:	f003 faa4 	bl	8008070 <HAL_DSI_ShortWrite>
                       hdsivideo_handle.VirtualChannelID,
                       DSI_DCS_SHORT_PKT_WRITE_P1,
                       OTM8009A_CMD_DISPON,
                       0x00);
  }  
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200011a8 	.word	0x200011a8
 8004b34:	20001314 	.word	0x20001314

08004b38 <BSP_LCD_SetBrightness>:
/**
  * @brief  Set the brightness value 
  * @param  BrightnessValue: [00: Min (black), 100 Max]
  */
void BSP_LCD_SetBrightness(uint8_t BrightnessValue)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]
  {
    /* Send Display on DCS command to display */
    HAL_DSI_ShortWrite(&hdsi_discovery, 
                       LCD_OTM8009A_ID, 
                       DSI_DCS_SHORT_PKT_WRITE_P1, 
                       OTM8009A_CMD_WRDISBV, (uint16_t)(BrightnessValue * 255)/100);
 8004b42:	79fb      	ldrb	r3, [r7, #7]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	0212      	lsls	r2, r2, #8
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	b29b      	uxth	r3, r3
    HAL_DSI_ShortWrite(&hdsi_discovery, 
 8004b4e:	4a08      	ldr	r2, [pc, #32]	@ (8004b70 <BSP_LCD_SetBrightness+0x38>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	095b      	lsrs	r3, r3, #5
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2351      	movs	r3, #81	@ 0x51
 8004b5c:	2215      	movs	r2, #21
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4804      	ldr	r0, [pc, #16]	@ (8004b74 <BSP_LCD_SetBrightness+0x3c>)
 8004b62:	f003 fa85 	bl	8008070 <HAL_DSI_ShortWrite>
  }  
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	51eb851f 	.word	0x51eb851f
 8004b74:	20001314 	.word	0x20001314

08004b78 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af02      	add	r7, sp, #8
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d80d      	bhi.n	8004ba4 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4613      	mov	r3, r2
 8004b98:	2215      	movs	r2, #21
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	480a      	ldr	r0, [pc, #40]	@ (8004bc8 <DSI_IO_WriteCmd+0x50>)
 8004b9e:	f003 fa67 	bl	8008070 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8004ba2:	e00d      	b.n	8004bc0 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9301      	str	r3, [sp, #4]
 8004bb2:	9200      	str	r2, [sp, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2239      	movs	r2, #57	@ 0x39
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4803      	ldr	r0, [pc, #12]	@ (8004bc8 <DSI_IO_WriteCmd+0x50>)
 8004bbc:	f003 fa7a 	bl	80080b4 <HAL_DSI_LongWrite>
}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20001314 	.word	0x20001314

08004bcc <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8004bd0:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004be2:	4b32      	ldr	r3, [pc, #200]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be6:	4a31      	ldr	r2, [pc, #196]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004be8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bee:	4b2f      	ldr	r3, [pc, #188]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8004bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c04:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8004c06:	4b29      	ldr	r3, [pc, #164]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	4a28      	ldr	r2, [pc, #160]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c10:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8004c12:	4b26      	ldr	r3, [pc, #152]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c16:	4a25      	ldr	r2, [pc, #148]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c1e:	4b23      	ldr	r3, [pc, #140]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004c26:	60bb      	str	r3, [r7, #8]
 8004c28:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8004c2a:	4b20      	ldr	r3, [pc, #128]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c34:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8004c36:	4b1d      	ldr	r3, [pc, #116]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c3c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c40:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8004c42:	4b1a      	ldr	r3, [pc, #104]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c46:	4a19      	ldr	r2, [pc, #100]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c4e:	4b17      	ldr	r3, [pc, #92]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c52:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8004c5a:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	4a13      	ldr	r2, [pc, #76]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c64:	6253      	str	r3, [r2, #36]	@ 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8004c66:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	4a10      	ldr	r2, [pc, #64]	@ (8004cac <BSP_LCD_MspInit+0xd0>)
 8004c6c:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 8004c70:	6253      	str	r3, [r2, #36]	@ 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2103      	movs	r1, #3
 8004c76:	2058      	movs	r0, #88	@ 0x58
 8004c78:	f001 f978 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004c7c:	2058      	movs	r0, #88	@ 0x58
 8004c7e:	f001 f991 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8004c82:	2200      	movs	r2, #0
 8004c84:	2103      	movs	r1, #3
 8004c86:	205a      	movs	r0, #90	@ 0x5a
 8004c88:	f001 f970 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8004c8c:	205a      	movs	r0, #90	@ 0x5a
 8004c8e:	f001 f989 	bl	8005fa4 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2103      	movs	r1, #3
 8004c96:	2062      	movs	r0, #98	@ 0x62
 8004c98:	f001 f968 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8004c9c:	2062      	movs	r0, #98	@ 0x62
 8004c9e:	f001 f981 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40023800 	.word	0x40023800

08004cb0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004cb0:	b5b0      	push	{r4, r5, r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	603a      	str	r2, [r7, #0]
 8004cba:	80fb      	strh	r3, [r7, #6]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <BSP_LCD_DrawPixel+0x44>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf8 <BSP_LCD_DrawPixel+0x48>)
 8004cc6:	2134      	movs	r1, #52	@ 0x34
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	335c      	adds	r3, #92	@ 0x5c
 8004cd0:	681c      	ldr	r4, [r3, #0]
 8004cd2:	88bd      	ldrh	r5, [r7, #4]
 8004cd4:	f7ff fc5e 	bl	8004594 <BSP_LCD_GetXSize>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	fb03 f205 	mul.w	r2, r3, r5
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4423      	add	r3, r4
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	6013      	str	r3, [r2, #0]
}
 8004cec:	bf00      	nop
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf4:	20001330 	.word	0x20001330
 8004cf8:	2000126c 	.word	0x2000126c

08004cfc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b088      	sub	sp, #32
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	603a      	str	r2, [r7, #0]
 8004d06:	80fb      	strh	r3, [r7, #6]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	2300      	movs	r3, #0
 8004d12:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8004d14:	4b53      	ldr	r3, [pc, #332]	@ (8004e64 <DrawChar+0x168>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4953      	ldr	r1, [pc, #332]	@ (8004e68 <DrawChar+0x16c>)
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	440b      	add	r3, r1
 8004d24:	3308      	adds	r3, #8
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	88db      	ldrh	r3, [r3, #6]
 8004d2a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e64 <DrawChar+0x168>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	494d      	ldr	r1, [pc, #308]	@ (8004e68 <DrawChar+0x16c>)
 8004d32:	4613      	mov	r3, r2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	889b      	ldrh	r3, [r3, #4]
 8004d42:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 8004d44:	8a3b      	ldrh	r3, [r7, #16]
 8004d46:	3307      	adds	r3, #7
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	da00      	bge.n	8004d4e <DrawChar+0x52>
 8004d4c:	3307      	adds	r3, #7
 8004d4e:	10db      	asrs	r3, r3, #3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	8a3b      	ldrh	r3, [r7, #16]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e076      	b.n	8004e52 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004d64:	8a3b      	ldrh	r3, [r7, #16]
 8004d66:	3307      	adds	r3, #7
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	da00      	bge.n	8004d6e <DrawChar+0x72>
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	10db      	asrs	r3, r3, #3
 8004d70:	461a      	mov	r2, r3
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	fb02 f303 	mul.w	r3, r2, r3
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8004d7e:	8a3b      	ldrh	r3, [r7, #16]
 8004d80:	3307      	adds	r3, #7
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	da00      	bge.n	8004d88 <DrawChar+0x8c>
 8004d86:	3307      	adds	r3, #7
 8004d88:	10db      	asrs	r3, r3, #3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d002      	beq.n	8004d94 <DrawChar+0x98>
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d004      	beq.n	8004d9c <DrawChar+0xa0>
 8004d92:	e00c      	b.n	8004dae <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	617b      	str	r3, [r7, #20]
      break;
 8004d9a:	e016      	b.n	8004dca <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	3201      	adds	r2, #1
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
      break;
 8004dac:	e00d      	b.n	8004dca <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	041a      	lsls	r2, r3, #16
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3301      	adds	r3, #1
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	3202      	adds	r2, #2
 8004dc2:	7812      	ldrb	r2, [r2, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
      break;
 8004dc8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	e036      	b.n	8004e3e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8004dd0:	8a3a      	ldrh	r2, [r7, #16]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	2201      	movs	r2, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	88fb      	ldrh	r3, [r7, #6]
 8004df2:	4413      	add	r3, r2
 8004df4:	b298      	uxth	r0, r3
 8004df6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <DrawChar+0x168>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	491b      	ldr	r1, [pc, #108]	@ (8004e68 <DrawChar+0x16c>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	88bb      	ldrh	r3, [r7, #4]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f7ff ff50 	bl	8004cb0 <BSP_LCD_DrawPixel>
 8004e10:	e012      	b.n	8004e38 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	4413      	add	r3, r2
 8004e1a:	b298      	uxth	r0, r3
 8004e1c:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <DrawChar+0x168>)
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4911      	ldr	r1, [pc, #68]	@ (8004e68 <DrawChar+0x16c>)
 8004e22:	4613      	mov	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	88bb      	ldrh	r3, [r7, #4]
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7ff ff3c 	bl	8004cb0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	8a3b      	ldrh	r3, [r7, #16]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3c4      	bcc.n	8004dd0 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8004e46:	88bb      	ldrh	r3, [r7, #4]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	8a7b      	ldrh	r3, [r7, #18]
 8004e54:	69fa      	ldr	r2, [r7, #28]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d384      	bcc.n	8004d64 <DrawChar+0x68>
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20001330 	.word	0x20001330
 8004e68:	20001334 	.word	0x20001334

08004e6c <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8004e7a:	4b16      	ldr	r3, [pc, #88]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004e7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004e80:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004e82:	4b14      	ldr	r3, [pc, #80]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8004e88:	4a12      	ldr	r2, [pc, #72]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8004e8e:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004e90:	4a11      	ldr	r2, [pc, #68]	@ (8004ed8 <LL_FillBuffer+0x6c>)
 8004e92:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8004e94:	480f      	ldr	r0, [pc, #60]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004e96:	f001 fc5d 	bl	8006754 <HAL_DMA2D_Init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d115      	bne.n	8004ecc <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	480c      	ldr	r0, [pc, #48]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004ea4:	f001 fed4 	bl	8006c50 <HAL_DMA2D_ConfigLayer>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10e      	bne.n	8004ecc <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69f9      	ldr	r1, [r7, #28]
 8004eb8:	4806      	ldr	r0, [pc, #24]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004eba:	f001 fca5 	bl	8006808 <HAL_DMA2D_Start>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8004ec4:	210a      	movs	r1, #10
 8004ec6:	4803      	ldr	r0, [pc, #12]	@ (8004ed4 <LL_FillBuffer+0x68>)
 8004ec8:	f001 fcc9 	bl	800685e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20001214 	.word	0x20001214
 8004ed8:	4002b000 	.word	0x4002b000

08004edc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004ee0:	4b29      	ldr	r3, [pc, #164]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f8c <BSP_SDRAM_Init+0xb0>)
 8004ee4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004ee8:	2202      	movs	r2, #2
 8004eea:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004eec:	4b28      	ldr	r3, [pc, #160]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004eee:	2207      	movs	r2, #7
 8004ef0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004ef2:	4b27      	ldr	r3, [pc, #156]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004ef8:	4b25      	ldr	r3, [pc, #148]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004efa:	2207      	movs	r2, #7
 8004efc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004efe:	4b24      	ldr	r3, [pc, #144]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004f00:	2202      	movs	r2, #2
 8004f02:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004f04:	4b22      	ldr	r3, [pc, #136]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004f06:	2202      	movs	r2, #2
 8004f08:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004f0a:	4b21      	ldr	r3, [pc, #132]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004f16:	4b1c      	ldr	r3, [pc, #112]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f1e:	2204      	movs	r2, #4
 8004f20:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004f22:	4b19      	ldr	r3, [pc, #100]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f24:	2220      	movs	r2, #32
 8004f26:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004f28:	4b17      	ldr	r3, [pc, #92]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f2a:	2240      	movs	r2, #64	@ 0x40
 8004f2c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8004f2e:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f30:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8004f34:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004f36:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004f3c:	4b12      	ldr	r3, [pc, #72]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f42:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004f44:	4b10      	ldr	r3, [pc, #64]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004f52:	2100      	movs	r1, #0
 8004f54:	480c      	ldr	r0, [pc, #48]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f56:	f000 f87f 	bl	8005058 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004f5a:	490d      	ldr	r1, [pc, #52]	@ (8004f90 <BSP_SDRAM_Init+0xb4>)
 8004f5c:	480a      	ldr	r0, [pc, #40]	@ (8004f88 <BSP_SDRAM_Init+0xac>)
 8004f5e:	f008 fb3d 	bl	800d5dc <HAL_SDRAM_Init>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004f68:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <BSP_SDRAM_Init+0xb8>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e002      	b.n	8004f76 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004f70:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <BSP_SDRAM_Init+0xb8>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004f76:	f240 6003 	movw	r0, #1539	@ 0x603
 8004f7a:	f000 f80d 	bl	8004f98 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <BSP_SDRAM_Init+0xb8>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200013dc 	.word	0x200013dc
 8004f8c:	a0000140 	.word	0xa0000140
 8004f90:	20001410 	.word	0x20001410
 8004f94:	2000004c 	.word	0x2000004c

08004f98 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004fa4:	4b2a      	ldr	r3, [pc, #168]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004faa:	4b29      	ldr	r3, [pc, #164]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fac:	2210      	movs	r2, #16
 8004fae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004fb0:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004fb6:	4b26      	ldr	r3, [pc, #152]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004fbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fc0:	4923      	ldr	r1, [pc, #140]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fc2:	4824      	ldr	r0, [pc, #144]	@ (8005054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fc4:	f008 fb3e 	bl	800d644 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f000 fadf 	bl	800558c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004fce:	4b20      	ldr	r3, [pc, #128]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004fda:	4b1d      	ldr	r3, [pc, #116]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fea:	4919      	ldr	r1, [pc, #100]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004fec:	4819      	ldr	r0, [pc, #100]	@ (8005054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004fee:	f008 fb29 	bl	800d644 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004ff2:	4b17      	ldr	r3, [pc, #92]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ff4:	2203      	movs	r2, #3
 8004ff6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004ff8:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ffa:	2210      	movs	r2, #16
 8004ffc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004ffe:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005000:	2208      	movs	r2, #8
 8005002:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005004:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005006:	2200      	movs	r2, #0
 8005008:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800500a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800500e:	4910      	ldr	r1, [pc, #64]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005010:	4810      	ldr	r0, [pc, #64]	@ (8005054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005012:	f008 fb17 	bl	800d644 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8005016:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800501a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800501c:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800501e:	2204      	movs	r2, #4
 8005020:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005024:	2210      	movs	r2, #16
 8005026:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8005028:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800502a:	2201      	movs	r2, #1
 800502c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a07      	ldr	r2, [pc, #28]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8005032:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8005034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005038:	4905      	ldr	r1, [pc, #20]	@ (8005050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800503a:	4806      	ldr	r0, [pc, #24]	@ (8005054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800503c:	f008 fb02 	bl	800d644 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	4804      	ldr	r0, [pc, #16]	@ (8005054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8005044:	f008 fb33 	bl	800d6ae <HAL_SDRAM_ProgramRefreshRate>
}
 8005048:	bf00      	nop
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	2000142c 	.word	0x2000142c
 8005054:	200013dc 	.word	0x200013dc

08005058 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8005058:	b580      	push	{r7, lr}
 800505a:	b090      	sub	sp, #64	@ 0x40
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005062:	4b71      	ldr	r3, [pc, #452]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005066:	4a70      	ldr	r2, [pc, #448]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6393      	str	r3, [r2, #56]	@ 0x38
 800506e:	4b6e      	ldr	r3, [pc, #440]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800507a:	4b6b      	ldr	r3, [pc, #428]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	4a6a      	ldr	r2, [pc, #424]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005080:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005084:	6313      	str	r3, [r2, #48]	@ 0x30
 8005086:	4b68      	ldr	r3, [pc, #416]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005092:	4b65      	ldr	r3, [pc, #404]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005096:	4a64      	ldr	r2, [pc, #400]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005098:	f043 0308 	orr.w	r3, r3, #8
 800509c:	6313      	str	r3, [r2, #48]	@ 0x30
 800509e:	4b62      	ldr	r3, [pc, #392]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80050aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	4a5e      	ldr	r2, [pc, #376]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050b0:	f043 0310 	orr.w	r3, r3, #16
 80050b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	61fb      	str	r3, [r7, #28]
 80050c0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80050c2:	4b59      	ldr	r3, [pc, #356]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	4a58      	ldr	r2, [pc, #352]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050c8:	f043 0320 	orr.w	r3, r3, #32
 80050cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ce:	4b56      	ldr	r3, [pc, #344]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	f003 0320 	and.w	r3, r3, #32
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80050da:	4b53      	ldr	r3, [pc, #332]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050de:	4a52      	ldr	r2, [pc, #328]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80050e6:	4b50      	ldr	r3, [pc, #320]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80050f2:	4b4d      	ldr	r3, [pc, #308]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 80050f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80050fe:	4b4a      	ldr	r3, [pc, #296]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800510a:	4b47      	ldr	r3, [pc, #284]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510e:	4a46      	ldr	r2, [pc, #280]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005114:	6313      	str	r3, [r2, #48]	@ 0x30
 8005116:	4b44      	ldr	r3, [pc, #272]	@ (8005228 <BSP_SDRAM_MspInit+0x1d0>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005122:	2302      	movs	r3, #2
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005126:	2301      	movs	r3, #1
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800512e:	230c      	movs	r3, #12
 8005130:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005132:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800513c:	4619      	mov	r1, r3
 800513e:	483b      	ldr	r0, [pc, #236]	@ (800522c <BSP_SDRAM_MspInit+0x1d4>)
 8005140:	f003 fbcc 	bl	80088dc <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005144:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005148:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800514a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800514e:	4619      	mov	r1, r3
 8005150:	4837      	ldr	r0, [pc, #220]	@ (8005230 <BSP_SDRAM_MspInit+0x1d8>)
 8005152:	f003 fbc3 	bl	80088dc <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005156:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800515c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005160:	4619      	mov	r1, r3
 8005162:	4834      	ldr	r0, [pc, #208]	@ (8005234 <BSP_SDRAM_MspInit+0x1dc>)
 8005164:	f003 fbba 	bl	80088dc <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8005168:	f248 1337 	movw	r3, #33079	@ 0x8137
 800516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800516e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005172:	4619      	mov	r1, r3
 8005174:	4830      	ldr	r0, [pc, #192]	@ (8005238 <BSP_SDRAM_MspInit+0x1e0>)
 8005176:	f003 fbb1 	bl	80088dc <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800517a:	f64f 732c 	movw	r3, #65324	@ 0xff2c
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8005180:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005184:	4619      	mov	r1, r3
 8005186:	482d      	ldr	r0, [pc, #180]	@ (800523c <BSP_SDRAM_MspInit+0x1e4>)
 8005188:	f003 fba8 	bl	80088dc <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800518c:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8005192:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005196:	4619      	mov	r1, r3
 8005198:	4829      	ldr	r0, [pc, #164]	@ (8005240 <BSP_SDRAM_MspInit+0x1e8>)
 800519a:	f003 fb9f 	bl	80088dc <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800519e:	4b29      	ldr	r3, [pc, #164]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80051a4:	4b27      	ldr	r3, [pc, #156]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051a6:	2280      	movs	r2, #128	@ 0x80
 80051a8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80051aa:	4b26      	ldr	r3, [pc, #152]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051b0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051b8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051ba:	4b22      	ldr	r3, [pc, #136]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051c0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80051c2:	4b20      	ldr	r3, [pc, #128]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051c8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80051ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80051d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051d6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80051d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051da:	2200      	movs	r2, #0
 80051dc:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80051de:	4b19      	ldr	r3, [pc, #100]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051e0:	2203      	movs	r2, #3
 80051e2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80051e4:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80051ea:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80051f0:	4b14      	ldr	r3, [pc, #80]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051f2:	4a15      	ldr	r2, [pc, #84]	@ (8005248 <BSP_SDRAM_MspInit+0x1f0>)
 80051f4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a12      	ldr	r2, [pc, #72]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80051fc:	4a11      	ldr	r2, [pc, #68]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8005202:	4810      	ldr	r0, [pc, #64]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 8005204:	f001 f996 	bl	8006534 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8005208:	480e      	ldr	r0, [pc, #56]	@ (8005244 <BSP_SDRAM_MspInit+0x1ec>)
 800520a:	f001 f8e5 	bl	80063d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800520e:	2200      	movs	r2, #0
 8005210:	210f      	movs	r1, #15
 8005212:	2038      	movs	r0, #56	@ 0x38
 8005214:	f000 feaa 	bl	8005f6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8005218:	2038      	movs	r0, #56	@ 0x38
 800521a:	f000 fec3 	bl	8005fa4 <HAL_NVIC_EnableIRQ>
}
 800521e:	bf00      	nop
 8005220:	3740      	adds	r7, #64	@ 0x40
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40023800 	.word	0x40023800
 800522c:	40020c00 	.word	0x40020c00
 8005230:	40021000 	.word	0x40021000
 8005234:	40021400 	.word	0x40021400
 8005238:	40021800 	.word	0x40021800
 800523c:	40021c00 	.word	0x40021c00
 8005240:	40022000 	.word	0x40022000
 8005244:	2000143c 	.word	0x2000143c
 8005248:	40026410 	.word	0x40026410

0800524c <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	460a      	mov	r2, r1
 8005256:	80fb      	strh	r3, [r7, #6]
 8005258:	4613      	mov	r3, r2
 800525a:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8005264:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <BSP_TS_Init+0xac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a24      	ldr	r2, [pc, #144]	@ (80052fc <BSP_TS_Init+0xb0>)
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8005270:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <BSP_TS_Init+0xac>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2054      	movs	r0, #84	@ 0x54
 8005276:	4798      	blx	r3
 8005278:	4603      	mov	r3, r0
 800527a:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 800527c:	7b7b      	ldrb	r3, [r7, #13]
 800527e:	2b11      	cmp	r3, #17
 8005280:	d009      	beq.n	8005296 <BSP_TS_Init+0x4a>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8005282:	4b1d      	ldr	r3, [pc, #116]	@ (80052f8 <BSP_TS_Init+0xac>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2070      	movs	r0, #112	@ 0x70
 8005288:	4798      	blx	r3
 800528a:	4603      	mov	r3, r0
 800528c:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 800528e:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <BSP_TS_Init+0xb0>)
 8005290:	2270      	movs	r2, #112	@ 0x70
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e002      	b.n	800529c <BSP_TS_Init+0x50>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8005296:	4b19      	ldr	r3, [pc, #100]	@ (80052fc <BSP_TS_Init+0xb0>)
 8005298:	2254      	movs	r2, #84	@ 0x54
 800529a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800529c:	7b7b      	ldrb	r3, [r7, #13]
 800529e:	2b11      	cmp	r3, #17
 80052a0:	d002      	beq.n	80052a8 <BSP_TS_Init+0x5c>
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	2b11      	cmp	r3, #17
 80052a6:	d11f      	bne.n	80052e8 <BSP_TS_Init+0x9c>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 80052a8:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <BSP_TS_Init+0xb4>)
 80052aa:	4a13      	ldr	r2, [pc, #76]	@ (80052f8 <BSP_TS_Init+0xac>)
 80052ac:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	88bb      	ldrh	r3, [r7, #4]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d203      	bcs.n	80052be <BSP_TS_Init+0x72>
    {
      ts_orientation = TS_SWAP_NONE;                
 80052b6:	4b13      	ldr	r3, [pc, #76]	@ (8005304 <BSP_TS_Init+0xb8>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e002      	b.n	80052c4 <BSP_TS_Init+0x78>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 80052be:	4b11      	ldr	r3, [pc, #68]	@ (8005304 <BSP_TS_Init+0xb8>)
 80052c0:	220c      	movs	r2, #12
 80052c2:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d110      	bne.n	80052ec <BSP_TS_Init+0xa0>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 80052ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <BSP_TS_Init+0xb4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4a0a      	ldr	r2, [pc, #40]	@ (80052fc <BSP_TS_Init+0xb0>)
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <BSP_TS_Init+0xb4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4a07      	ldr	r2, [pc, #28]	@ (80052fc <BSP_TS_Init+0xb0>)
 80052e0:	7812      	ldrb	r2, [r2, #0]
 80052e2:	4610      	mov	r0, r2
 80052e4:	4798      	blx	r3
    if(ts_status == TS_OK)
 80052e6:	e001      	b.n	80052ec <BSP_TS_Init+0xa0>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 80052e8:	2303      	movs	r3, #3
 80052ea:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	2000001c 	.word	0x2000001c
 80052fc:	200014a1 	.word	0x200014a1
 8005300:	2000149c 	.word	0x2000149c
 8005304:	200014a0 	.word	0x200014a0

08005308 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8005308:	b590      	push	{r4, r7, lr}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8005314:	4b81      	ldr	r3, [pc, #516]	@ (800551c <BSP_TS_GetState+0x214>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	4a81      	ldr	r2, [pc, #516]	@ (8005520 <BSP_TS_GetState+0x218>)
 800531c:	7812      	ldrb	r2, [r2, #0]
 800531e:	4610      	mov	r0, r2
 8005320:	4798      	blx	r3
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80ef 	beq.w	8005512 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	e0e4      	b.n	8005504 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800533a:	4b78      	ldr	r3, [pc, #480]	@ (800551c <BSP_TS_GetState+0x214>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	4a77      	ldr	r2, [pc, #476]	@ (8005520 <BSP_TS_GetState+0x218>)
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	4614      	mov	r4, r2
 8005346:	f107 0110 	add.w	r1, r7, #16
 800534a:	69fa      	ldr	r2, [r7, #28]
 800534c:	0052      	lsls	r2, r2, #1
 800534e:	1888      	adds	r0, r1, r2
 8005350:	f107 010c 	add.w	r1, r7, #12
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	0052      	lsls	r2, r2, #1
 8005358:	440a      	add	r2, r1
 800535a:	4601      	mov	r1, r0
 800535c:	4620      	mov	r0, r4
 800535e:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8005360:	4b70      	ldr	r3, [pc, #448]	@ (8005524 <BSP_TS_GetState+0x21c>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d019      	beq.n	80053a0 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	3320      	adds	r3, #32
 8005372:	443b      	add	r3, r7
 8005374:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005378:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	3320      	adds	r3, #32
 8005380:	443b      	add	r3, r7
 8005382:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	3320      	adds	r3, #32
 800538c:	443b      	add	r3, r7
 800538e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	3320      	adds	r3, #32
 8005398:	443b      	add	r3, r7
 800539a:	8b3a      	ldrh	r2, [r7, #24]
 800539c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80053a0:	4b60      	ldr	r3, [pc, #384]	@ (8005524 <BSP_TS_GetState+0x21c>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00f      	beq.n	80053cc <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	005b      	lsls	r3, r3, #1
 80053b0:	3320      	adds	r3, #32
 80053b2:	443b      	add	r3, r7
 80053b4:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80053b8:	f240 331f 	movw	r3, #799	@ 0x31f
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	b29a      	uxth	r2, r3
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	3320      	adds	r3, #32
 80053c6:	443b      	add	r3, r7
 80053c8:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80053cc:	4b55      	ldr	r3, [pc, #340]	@ (8005524 <BSP_TS_GetState+0x21c>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	f003 0304 	and.w	r3, r3, #4
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00f      	beq.n	80053f8 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	3320      	adds	r3, #32
 80053de:	443b      	add	r3, r7
 80053e0:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80053e4:	f240 13df 	movw	r3, #479	@ 0x1df
 80053e8:	1a9b      	subs	r3, r3, r2
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	3320      	adds	r3, #32
 80053f2:	443b      	add	r3, r7
 80053f4:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	3320      	adds	r3, #32
 80053fe:	443b      	add	r3, r7
 8005400:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005404:	4619      	mov	r1, r3
 8005406:	4a48      	ldr	r2, [pc, #288]	@ (8005528 <BSP_TS_GetState+0x220>)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800540e:	4299      	cmp	r1, r3
 8005410:	d90d      	bls.n	800542e <BSP_TS_GetState+0x126>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	3320      	adds	r3, #32
 8005418:	443b      	add	r3, r7
 800541a:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800541e:	4942      	ldr	r1, [pc, #264]	@ (8005528 <BSP_TS_GetState+0x220>)
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005426:	b29b      	uxth	r3, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	e00c      	b.n	8005448 <BSP_TS_GetState+0x140>
 800542e:	4a3e      	ldr	r2, [pc, #248]	@ (8005528 <BSP_TS_GetState+0x220>)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005436:	b29a      	uxth	r2, r3
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	3320      	adds	r3, #32
 800543e:	443b      	add	r3, r7
 8005440:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	b29b      	uxth	r3, r3
 8005448:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	3320      	adds	r3, #32
 8005450:	443b      	add	r3, r7
 8005452:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005456:	4619      	mov	r1, r3
 8005458:	4a34      	ldr	r2, [pc, #208]	@ (800552c <BSP_TS_GetState+0x224>)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	4299      	cmp	r1, r3
 8005462:	d90d      	bls.n	8005480 <BSP_TS_GetState+0x178>
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	3320      	adds	r3, #32
 800546a:	443b      	add	r3, r7
 800546c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8005470:	492e      	ldr	r1, [pc, #184]	@ (800552c <BSP_TS_GetState+0x224>)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005478:	b29b      	uxth	r3, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	e00c      	b.n	800549a <BSP_TS_GetState+0x192>
 8005480:	4a2a      	ldr	r2, [pc, #168]	@ (800552c <BSP_TS_GetState+0x224>)
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005488:	b29a      	uxth	r2, r3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	3320      	adds	r3, #32
 8005490:	443b      	add	r3, r7
 8005492:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	b29b      	uxth	r3, r3
 800549a:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800549c:	8afa      	ldrh	r2, [r7, #22]
 800549e:	8abb      	ldrh	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	2b05      	cmp	r3, #5
 80054a4:	dd15      	ble.n	80054d2 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	3320      	adds	r3, #32
 80054ac:	443b      	add	r3, r7
 80054ae:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80054b2:	4619      	mov	r1, r3
 80054b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005528 <BSP_TS_GetState+0x220>)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	3320      	adds	r3, #32
 80054c2:	443b      	add	r3, r7
 80054c4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80054c8:	4619      	mov	r1, r3
 80054ca:	4a18      	ldr	r2, [pc, #96]	@ (800552c <BSP_TS_GetState+0x224>)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80054d2:	4a15      	ldr	r2, [pc, #84]	@ (8005528 <BSP_TS_GetState+0x220>)
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054da:	b299      	uxth	r1, r3
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4413      	add	r3, r2
 80054e4:	460a      	mov	r2, r1
 80054e6:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80054e8:	4a10      	ldr	r2, [pc, #64]	@ (800552c <BSP_TS_GetState+0x224>)
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f0:	b299      	uxth	r1, r3
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	4413      	add	r3, r2
 80054fa:	460a      	mov	r2, r1
 80054fc:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	461a      	mov	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	4293      	cmp	r3, r2
 800550e:	f4ff af14 	bcc.w	800533a <BSP_TS_GetState+0x32>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8005512:	7efb      	ldrb	r3, [r7, #27]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3724      	adds	r7, #36	@ 0x24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd90      	pop	{r4, r7, pc}
 800551c:	2000149c 	.word	0x2000149c
 8005520:	200014a1 	.word	0x200014a1
 8005524:	200014a0 	.word	0x200014a0
 8005528:	200014a4 	.word	0x200014a4
 800552c:	200014ac 	.word	0x200014ac

08005530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005534:	2003      	movs	r0, #3
 8005536:	f000 fd0e 	bl	8005f56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800553a:	200f      	movs	r0, #15
 800553c:	f7fe f834 	bl	80035a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005540:	f7fc fddc 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005550:	4b06      	ldr	r3, [pc, #24]	@ (800556c <HAL_IncTick+0x20>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	4b06      	ldr	r3, [pc, #24]	@ (8005570 <HAL_IncTick+0x24>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4413      	add	r3, r2
 800555c:	4a04      	ldr	r2, [pc, #16]	@ (8005570 <HAL_IncTick+0x24>)
 800555e:	6013      	str	r3, [r2, #0]
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000054 	.word	0x20000054
 8005570:	200014b4 	.word	0x200014b4

08005574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return uwTick;
 8005578:	4b03      	ldr	r3, [pc, #12]	@ (8005588 <HAL_GetTick+0x14>)
 800557a:	681b      	ldr	r3, [r3, #0]
}
 800557c:	4618      	mov	r0, r3
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	200014b4 	.word	0x200014b4

0800558c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005594:	f7ff ffee 	bl	8005574 <HAL_GetTick>
 8005598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d005      	beq.n	80055b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055a6:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <HAL_Delay+0x44>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80055b2:	bf00      	nop
 80055b4:	f7ff ffde 	bl	8005574 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d8f7      	bhi.n	80055b4 <HAL_Delay+0x28>
  {
  }
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000054 	.word	0x20000054

080055d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e031      	b.n	800564e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fdaa 	bl	800214c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b00      	cmp	r3, #0
 8005610:	d116      	bne.n	8005640 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005616:	4b10      	ldr	r3, [pc, #64]	@ (8005658 <HAL_ADC_Init+0x84>)
 8005618:	4013      	ands	r3, r2
 800561a:	f043 0202 	orr.w	r2, r3, #2
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f970 	bl	8005908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f023 0303 	bic.w	r3, r3, #3
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40
 800563e:	e001      	b.n	8005644 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800564c:	7bfb      	ldrb	r3, [r7, #15]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	ffffeefd 	.word	0xffffeefd

0800565c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_ADC_ConfigChannel+0x1c>
 8005674:	2302      	movs	r3, #2
 8005676:	e136      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x28a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2b09      	cmp	r3, #9
 8005686:	d93a      	bls.n	80056fe <HAL_ADC_ConfigChannel+0xa2>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005690:	d035      	beq.n	80056fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68d9      	ldr	r1, [r3, #12]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	4613      	mov	r3, r2
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4413      	add	r3, r2
 80056a6:	3b1e      	subs	r3, #30
 80056a8:	2207      	movs	r2, #7
 80056aa:	fa02 f303 	lsl.w	r3, r2, r3
 80056ae:	43da      	mvns	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	400a      	ands	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a8d      	ldr	r2, [pc, #564]	@ (80058f4 <HAL_ADC_ConfigChannel+0x298>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10a      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68d9      	ldr	r1, [r3, #12]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	061a      	lsls	r2, r3, #24
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056d6:	e035      	b.n	8005744 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68d9      	ldr	r1, [r3, #12]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	4618      	mov	r0, r3
 80056ea:	4603      	mov	r3, r0
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4403      	add	r3, r0
 80056f0:	3b1e      	subs	r3, #30
 80056f2:	409a      	lsls	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056fc:	e022      	b.n	8005744 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6919      	ldr	r1, [r3, #16]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	4613      	mov	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	4413      	add	r3, r2
 8005712:	2207      	movs	r2, #7
 8005714:	fa02 f303 	lsl.w	r3, r2, r3
 8005718:	43da      	mvns	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	400a      	ands	r2, r1
 8005720:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6919      	ldr	r1, [r3, #16]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	b29b      	uxth	r3, r3
 8005732:	4618      	mov	r0, r3
 8005734:	4603      	mov	r3, r0
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	4403      	add	r3, r0
 800573a:	409a      	lsls	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2b06      	cmp	r3, #6
 800574a:	d824      	bhi.n	8005796 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4613      	mov	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4413      	add	r3, r2
 800575c:	3b05      	subs	r3, #5
 800575e:	221f      	movs	r2, #31
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	43da      	mvns	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	400a      	ands	r2, r1
 800576c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	4618      	mov	r0, r3
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4613      	mov	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	4413      	add	r3, r2
 8005786:	3b05      	subs	r3, #5
 8005788:	fa00 f203 	lsl.w	r2, r0, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	635a      	str	r2, [r3, #52]	@ 0x34
 8005794:	e04c      	b.n	8005830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d824      	bhi.n	80057e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	3b23      	subs	r3, #35	@ 0x23
 80057b0:	221f      	movs	r2, #31
 80057b2:	fa02 f303 	lsl.w	r3, r2, r3
 80057b6:	43da      	mvns	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	400a      	ands	r2, r1
 80057be:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4618      	mov	r0, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	3b23      	subs	r3, #35	@ 0x23
 80057da:	fa00 f203 	lsl.w	r2, r0, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80057e6:	e023      	b.n	8005830 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	4413      	add	r3, r2
 80057f8:	3b41      	subs	r3, #65	@ 0x41
 80057fa:	221f      	movs	r2, #31
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43da      	mvns	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	400a      	ands	r2, r1
 8005808:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	4618      	mov	r0, r3
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	3b41      	subs	r3, #65	@ 0x41
 8005824:	fa00 f203 	lsl.w	r2, r0, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a30      	ldr	r2, [pc, #192]	@ (80058f8 <HAL_ADC_ConfigChannel+0x29c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10a      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x1f4>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005842:	d105      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005844:	4b2d      	ldr	r3, [pc, #180]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4a2c      	ldr	r2, [pc, #176]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 800584a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800584e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a28      	ldr	r2, [pc, #160]	@ (80058f8 <HAL_ADC_ConfigChannel+0x29c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d10f      	bne.n	800587a <HAL_ADC_ConfigChannel+0x21e>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2b12      	cmp	r3, #18
 8005860:	d10b      	bne.n	800587a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005862:	4b26      	ldr	r3, [pc, #152]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a25      	ldr	r2, [pc, #148]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005868:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800586c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800586e:	4b23      	ldr	r3, [pc, #140]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4a22      	ldr	r2, [pc, #136]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005874:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005878:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1e      	ldr	r2, [pc, #120]	@ (80058f8 <HAL_ADC_ConfigChannel+0x29c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d12b      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x280>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1a      	ldr	r2, [pc, #104]	@ (80058f4 <HAL_ADC_ConfigChannel+0x298>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d003      	beq.n	8005896 <HAL_ADC_ConfigChannel+0x23a>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b11      	cmp	r3, #17
 8005894:	d122      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005896:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4a18      	ldr	r2, [pc, #96]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 800589c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80058a0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80058a2:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	4a15      	ldr	r2, [pc, #84]	@ (80058fc <HAL_ADC_ConfigChannel+0x2a0>)
 80058a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80058ac:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a10      	ldr	r2, [pc, #64]	@ (80058f4 <HAL_ADC_ConfigChannel+0x298>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d111      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80058b8:	4b11      	ldr	r3, [pc, #68]	@ (8005900 <HAL_ADC_ConfigChannel+0x2a4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a11      	ldr	r2, [pc, #68]	@ (8005904 <HAL_ADC_ConfigChannel+0x2a8>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	0c9a      	lsrs	r2, r3, #18
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80058ce:	e002      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f9      	bne.n	80058d0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	10000012 	.word	0x10000012
 80058f8:	40012000 	.word	0x40012000
 80058fc:	40012300 	.word	0x40012300
 8005900:	20000018 	.word	0x20000018
 8005904:	431bde83 	.word	0x431bde83

08005908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005910:	4b78      	ldr	r3, [pc, #480]	@ (8005af4 <ADC_Init+0x1ec>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a77      	ldr	r2, [pc, #476]	@ (8005af4 <ADC_Init+0x1ec>)
 8005916:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800591a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800591c:	4b75      	ldr	r3, [pc, #468]	@ (8005af4 <ADC_Init+0x1ec>)
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4973      	ldr	r1, [pc, #460]	@ (8005af4 <ADC_Init+0x1ec>)
 8005926:	4313      	orrs	r3, r2
 8005928:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6859      	ldr	r1, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800595c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6859      	ldr	r1, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800597e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	4a58      	ldr	r2, [pc, #352]	@ (8005af8 <ADC_Init+0x1f0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d022      	beq.n	80059e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80059cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6899      	ldr	r1, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
 80059e0:	e00f      	b.n	8005a02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80059f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f022 0202 	bic.w	r2, r2, #2
 8005a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6899      	ldr	r1, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	005a      	lsls	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a3e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005a4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	035a      	lsls	r2, r3, #13
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	e007      	b.n	8005a78 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	051a      	lsls	r2, r3, #20
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005aac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6899      	ldr	r1, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005aba:	025a      	lsls	r2, r3, #9
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	029a      	lsls	r2, r3, #10
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40012300 	.word	0x40012300
 8005af8:	0f000001 	.word	0x0f000001

08005afc <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_CEC_Init+0x16>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e04f      	b.n	8005bb6 <HAL_CEC_Init+0xba>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fc fd6a 	bl	8002600 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2224      	movs	r2, #36	@ 0x24
 8005b30:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8005b56:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8005b62:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8005b68:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8005b7c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8005b7e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6959      	ldr	r1, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2280      	movs	r2, #128	@ 0x80
 8005bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005bec:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01c      	beq.n	8005c32 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2222      	movs	r2, #34	@ 0x22
 8005bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c02:	3301      	adds	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	691a      	ldr	r2, [r3, #16]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f042 0201 	orr.w	r2, r2, #1
 8005c30:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01e      	beq.n	8005c7a <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0202 	orr.w	r2, r2, #2
 8005c4a:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c60:	425b      	negs	r3, r3
 8005c62:	441a      	add	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f88b 	bl	8005d8a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d024      	beq.n	8005cce <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d107      	bne.n	8005ca8 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0204 	orr.w	r2, r2, #4
 8005ca6:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ccc:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d014      	beq.n	8005d02 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ce6:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2220      	movs	r2, #32
 8005cec:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f83a 	bl	8005d76 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d02f      	beq.n	8005d6e <HAL_CEC_IRQHandler+0x1b0>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6919      	ldr	r1, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8005d22:	430b      	orrs	r3, r1
 8005d24:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d38:	425b      	negs	r3, r3
 8005d3a:	441a      	add	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d4c:	e00c      	b.n	8005d68 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <HAL_CEC_IRQHandler+0x1aa>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f819 	bl	8005da0 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8005df4 <__NVIC_SetPriorityGrouping+0x40>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005ddc:	4b06      	ldr	r3, [pc, #24]	@ (8005df8 <__NVIC_SetPriorityGrouping+0x44>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005de2:	4a04      	ldr	r2, [pc, #16]	@ (8005df4 <__NVIC_SetPriorityGrouping+0x40>)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	60d3      	str	r3, [r2, #12]
}
 8005de8:	bf00      	nop
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	e000ed00 	.word	0xe000ed00
 8005df8:	05fa0000 	.word	0x05fa0000

08005dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e00:	4b04      	ldr	r3, [pc, #16]	@ (8005e14 <__NVIC_GetPriorityGrouping+0x18>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	f003 0307 	and.w	r3, r3, #7
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	4603      	mov	r3, r0
 8005e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db0b      	blt.n	8005e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	f003 021f 	and.w	r2, r3, #31
 8005e30:	4907      	ldr	r1, [pc, #28]	@ (8005e50 <__NVIC_EnableIRQ+0x38>)
 8005e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2001      	movs	r0, #1
 8005e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	e000e100 	.word	0xe000e100

08005e54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	db12      	blt.n	8005e8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	f003 021f 	and.w	r2, r3, #31
 8005e6c:	490a      	ldr	r1, [pc, #40]	@ (8005e98 <__NVIC_DisableIRQ+0x44>)
 8005e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e72:	095b      	lsrs	r3, r3, #5
 8005e74:	2001      	movs	r0, #1
 8005e76:	fa00 f202 	lsl.w	r2, r0, r2
 8005e7a:	3320      	adds	r3, #32
 8005e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005e80:	f3bf 8f4f 	dsb	sy
}
 8005e84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e86:	f3bf 8f6f 	isb	sy
}
 8005e8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000e100 	.word	0xe000e100

08005e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	db0a      	blt.n	8005ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	490c      	ldr	r1, [pc, #48]	@ (8005ee8 <__NVIC_SetPriority+0x4c>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ec4:	e00a      	b.n	8005edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	4908      	ldr	r1, [pc, #32]	@ (8005eec <__NVIC_SetPriority+0x50>)
 8005ecc:	79fb      	ldrb	r3, [r7, #7]
 8005ece:	f003 030f 	and.w	r3, r3, #15
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	0112      	lsls	r2, r2, #4
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	440b      	add	r3, r1
 8005eda:	761a      	strb	r2, [r3, #24]
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	e000e100 	.word	0xe000e100
 8005eec:	e000ed00 	.word	0xe000ed00

08005ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b089      	sub	sp, #36	@ 0x24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f1c3 0307 	rsb	r3, r3, #7
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	bf28      	it	cs
 8005f0e:	2304      	movcs	r3, #4
 8005f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3304      	adds	r3, #4
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d902      	bls.n	8005f20 <NVIC_EncodePriority+0x30>
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3b03      	subs	r3, #3
 8005f1e:	e000      	b.n	8005f22 <NVIC_EncodePriority+0x32>
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	401a      	ands	r2, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f38:	f04f 31ff 	mov.w	r1, #4294967295
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f42:	43d9      	mvns	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f48:	4313      	orrs	r3, r2
         );
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	@ 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b082      	sub	sp, #8
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff ff28 	bl	8005db4 <__NVIC_SetPriorityGrouping>
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f7e:	f7ff ff3d 	bl	8005dfc <__NVIC_GetPriorityGrouping>
 8005f82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f7ff ffb1 	bl	8005ef0 <NVIC_EncodePriority>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff80 	bl	8005e9c <__NVIC_SetPriority>
}
 8005f9c:	bf00      	nop
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff ff30 	bl	8005e18 <__NVIC_EnableIRQ>
}
 8005fb8:	bf00      	nop
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7ff ff40 	bl	8005e54 <__NVIC_DisableIRQ>
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e054      	b.n	8006098 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7f5b      	ldrb	r3, [r3, #29]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fc f92c 	bl	800225c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	791b      	ldrb	r3, [r3, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10c      	bne.n	800602c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a22      	ldr	r2, [pc, #136]	@ (80060a0 <HAL_CRC_Init+0xc4>)
 8006018:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689a      	ldr	r2, [r3, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0218 	bic.w	r2, r2, #24
 8006028:	609a      	str	r2, [r3, #8]
 800602a:	e00c      	b.n	8006046 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6899      	ldr	r1, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	461a      	mov	r2, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f834 	bl	80060a4 <HAL_CRCEx_Polynomial_Set>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e028      	b.n	8006098 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	795b      	ldrb	r3, [r3, #5]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f04f 32ff 	mov.w	r2, #4294967295
 8006056:	611a      	str	r2, [r3, #16]
 8006058:	e004      	b.n	8006064 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	6912      	ldr	r2, [r2, #16]
 8006062:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695a      	ldr	r2, [r3, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	699a      	ldr	r2, [r3, #24]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	04c11db7 	.word	0x04c11db7

080060a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80060b4:	231f      	movs	r3, #31
 80060b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
 80060c6:	e063      	b.n	8006190 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80060c8:	bf00      	nop
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	613a      	str	r2, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d009      	beq.n	80060e8 <HAL_CRCEx_Polynomial_Set+0x44>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f003 031f 	and.w	r3, r3, #31
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0f0      	beq.n	80060ca <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b18      	cmp	r3, #24
 80060ec:	d846      	bhi.n	800617c <HAL_CRCEx_Polynomial_Set+0xd8>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006183 	.word	0x08006183
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	0800617d 	.word	0x0800617d
 8006100:	0800617d 	.word	0x0800617d
 8006104:	0800617d 	.word	0x0800617d
 8006108:	0800617d 	.word	0x0800617d
 800610c:	0800617d 	.word	0x0800617d
 8006110:	0800617d 	.word	0x0800617d
 8006114:	08006171 	.word	0x08006171
 8006118:	0800617d 	.word	0x0800617d
 800611c:	0800617d 	.word	0x0800617d
 8006120:	0800617d 	.word	0x0800617d
 8006124:	0800617d 	.word	0x0800617d
 8006128:	0800617d 	.word	0x0800617d
 800612c:	0800617d 	.word	0x0800617d
 8006130:	0800617d 	.word	0x0800617d
 8006134:	08006165 	.word	0x08006165
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800617d 	.word	0x0800617d
 8006140:	0800617d 	.word	0x0800617d
 8006144:	0800617d 	.word	0x0800617d
 8006148:	0800617d 	.word	0x0800617d
 800614c:	0800617d 	.word	0x0800617d
 8006150:	0800617d 	.word	0x0800617d
 8006154:	08006159 	.word	0x08006159
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b06      	cmp	r3, #6
 800615c:	d913      	bls.n	8006186 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006162:	e010      	b.n	8006186 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b07      	cmp	r3, #7
 8006168:	d90f      	bls.n	800618a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800616e:	e00c      	b.n	800618a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d90b      	bls.n	800618e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800617a:	e008      	b.n	800618e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	75fb      	strb	r3, [r7, #23]
        break;
 8006180:	e006      	b.n	8006190 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006182:	bf00      	nop
 8006184:	e004      	b.n	8006190 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006186:	bf00      	nop
 8006188:	e002      	b.n	8006190 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800618a:	bf00      	nop
 800618c:	e000      	b.n	8006190 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800618e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10d      	bne.n	80061b2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f023 0118 	bic.w	r1, r3, #24
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0ac      	b.n	800632c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 f8b2 	bl	8006340 <DFSDM_GetChannelFromInstance>
 80061dc:	4603      	mov	r3, r0
 80061de:	4a55      	ldr	r2, [pc, #340]	@ (8006334 <HAL_DFSDM_ChannelInit+0x174>)
 80061e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e09f      	b.n	800632c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7fc f855 	bl	800229c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80061f2:	4b51      	ldr	r3, [pc, #324]	@ (8006338 <HAL_DFSDM_ChannelInit+0x178>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3301      	adds	r3, #1
 80061f8:	4a4f      	ldr	r2, [pc, #316]	@ (8006338 <HAL_DFSDM_ChannelInit+0x178>)
 80061fa:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80061fc:	4b4e      	ldr	r3, [pc, #312]	@ (8006338 <HAL_DFSDM_ChannelInit+0x178>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d125      	bne.n	8006250 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8006204:	4b4d      	ldr	r3, [pc, #308]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4c      	ldr	r2, [pc, #304]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 800620a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800620e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8006210:	4b4a      	ldr	r3, [pc, #296]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	4948      	ldr	r1, [pc, #288]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800621e:	4b47      	ldr	r3, [pc, #284]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a46      	ldr	r2, [pc, #280]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006224:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8006228:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d108      	bne.n	8006244 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8006232:	4b42      	ldr	r3, [pc, #264]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	041b      	lsls	r3, r3, #16
 800623e:	493f      	ldr	r1, [pc, #252]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006240:	4313      	orrs	r3, r2
 8006242:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8006244:	4b3d      	ldr	r3, [pc, #244]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3c      	ldr	r2, [pc, #240]	@ (800633c <HAL_DFSDM_ChannelInit+0x17c>)
 800624a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800624e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800625e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6819      	ldr	r1, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800626e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8006274:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 020f 	bic.w	r2, r2, #15
 800628c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80062b4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6899      	ldr	r1, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80062c8:	431a      	orrs	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f002 0207 	and.w	r2, r2, #7
 80062e0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6859      	ldr	r1, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800630c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f810 	bl	8006340 <DFSDM_GetChannelFromInstance>
 8006320:	4602      	mov	r2, r0
 8006322:	4904      	ldr	r1, [pc, #16]	@ (8006334 <HAL_DFSDM_ChannelInit+0x174>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	200014bc 	.word	0x200014bc
 8006338:	200014b8 	.word	0x200014b8
 800633c:	40017400 	.word	0x40017400

08006340 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a1c      	ldr	r2, [pc, #112]	@ (80063bc <DFSDM_GetChannelFromInstance+0x7c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d102      	bne.n	8006356 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	e02b      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <DFSDM_GetChannelFromInstance+0x80>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d102      	bne.n	8006364 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800635e:	2301      	movs	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e024      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a17      	ldr	r2, [pc, #92]	@ (80063c4 <DFSDM_GetChannelFromInstance+0x84>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d102      	bne.n	8006372 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800636c:	2302      	movs	r3, #2
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e01d      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <DFSDM_GetChannelFromInstance+0x88>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d102      	bne.n	8006380 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800637a:	2303      	movs	r3, #3
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e016      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a12      	ldr	r2, [pc, #72]	@ (80063cc <DFSDM_GetChannelFromInstance+0x8c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d102      	bne.n	800638e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8006388:	2304      	movs	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	e00f      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a0f      	ldr	r2, [pc, #60]	@ (80063d0 <DFSDM_GetChannelFromInstance+0x90>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d102      	bne.n	800639c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8006396:	2305      	movs	r3, #5
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e008      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a0d      	ldr	r2, [pc, #52]	@ (80063d4 <DFSDM_GetChannelFromInstance+0x94>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d102      	bne.n	80063aa <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80063a4:	2306      	movs	r3, #6
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	e001      	b.n	80063ae <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80063aa:	2307      	movs	r3, #7
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40017400 	.word	0x40017400
 80063c0:	40017420 	.word	0x40017420
 80063c4:	40017440 	.word	0x40017440
 80063c8:	40017460 	.word	0x40017460
 80063cc:	40017480 	.word	0x40017480
 80063d0:	400174a0 	.word	0x400174a0
 80063d4:	400174c0 	.word	0x400174c0

080063d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063e4:	f7ff f8c6 	bl	8005574 <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e099      	b.n	8006528 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006414:	e00f      	b.n	8006436 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006416:	f7ff f8ad 	bl	8005574 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b05      	cmp	r3, #5
 8006422:	d908      	bls.n	8006436 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2203      	movs	r2, #3
 800642e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e078      	b.n	8006528 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e8      	bne.n	8006416 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	4b38      	ldr	r3, [pc, #224]	@ (8006530 <HAL_DMA_Init+0x158>)
 8006450:	4013      	ands	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006462:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800646e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800647a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	2b04      	cmp	r3, #4
 800648e:	d107      	bne.n	80064a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006498:	4313      	orrs	r3, r2
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	4313      	orrs	r3, r2
 800649e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f023 0307 	bic.w	r3, r3, #7
 80064b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d117      	bne.n	80064fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8bd 	bl	800665c <DMA_CheckFifoParam>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2240      	movs	r2, #64	@ 0x40
 80064ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80064f6:	2301      	movs	r3, #1
 80064f8:	e016      	b.n	8006528 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f874 	bl	80065f0 <DMA_CalcBaseAndBitshift>
 8006508:	4603      	mov	r3, r0
 800650a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006510:	223f      	movs	r2, #63	@ 0x3f
 8006512:	409a      	lsls	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	e010803f 	.word	0xe010803f

08006534 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e050      	b.n	80065e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b02      	cmp	r3, #2
 8006550:	d101      	bne.n	8006556 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006552:	2302      	movs	r3, #2
 8006554:	e048      	b.n	80065e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0201 	bic.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2221      	movs	r2, #33	@ 0x21
 8006594:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f82a 	bl	80065f0 <DMA_CalcBaseAndBitshift>
 800659c:	4603      	mov	r3, r0
 800659e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a4:	223f      	movs	r2, #63	@ 0x3f
 80065a6:	409a      	lsls	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	3b10      	subs	r3, #16
 8006600:	4a13      	ldr	r2, [pc, #76]	@ (8006650 <DMA_CalcBaseAndBitshift+0x60>)
 8006602:	fba2 2303 	umull	r2, r3, r2, r3
 8006606:	091b      	lsrs	r3, r3, #4
 8006608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800660a:	4a12      	ldr	r2, [pc, #72]	@ (8006654 <DMA_CalcBaseAndBitshift+0x64>)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b03      	cmp	r3, #3
 800661c:	d908      	bls.n	8006630 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <DMA_CalcBaseAndBitshift+0x68>)
 8006626:	4013      	ands	r3, r2
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	659a      	str	r2, [r3, #88]	@ 0x58
 800662e:	e006      	b.n	800663e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	4b08      	ldr	r3, [pc, #32]	@ (8006658 <DMA_CalcBaseAndBitshift+0x68>)
 8006638:	4013      	ands	r3, r2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	aaaaaaab 	.word	0xaaaaaaab
 8006654:	08013ea0 	.word	0x08013ea0
 8006658:	fffffc00 	.word	0xfffffc00

0800665c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d11f      	bne.n	80066b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b03      	cmp	r3, #3
 800667a:	d856      	bhi.n	800672a <DMA_CheckFifoParam+0xce>
 800667c:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <DMA_CheckFifoParam+0x28>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	08006695 	.word	0x08006695
 8006688:	080066a7 	.word	0x080066a7
 800668c:	08006695 	.word	0x08006695
 8006690:	0800672b 	.word	0x0800672b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d046      	beq.n	800672e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a4:	e043      	b.n	800672e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066ae:	d140      	bne.n	8006732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066b4:	e03d      	b.n	8006732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066be:	d121      	bne.n	8006704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d837      	bhi.n	8006736 <DMA_CheckFifoParam+0xda>
 80066c6:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <DMA_CheckFifoParam+0x70>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066e3 	.word	0x080066e3
 80066d4:	080066dd 	.word	0x080066dd
 80066d8:	080066f5 	.word	0x080066f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	73fb      	strb	r3, [r7, #15]
      break;
 80066e0:	e030      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d025      	beq.n	800673a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f2:	e022      	b.n	800673a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066fc:	d11f      	bne.n	800673e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006702:	e01c      	b.n	800673e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d903      	bls.n	8006712 <DMA_CheckFifoParam+0xb6>
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d003      	beq.n	8006718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006710:	e018      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
      break;
 8006716:	e015      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00e      	beq.n	8006742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]
      break;
 8006728:	e00b      	b.n	8006742 <DMA_CheckFifoParam+0xe6>
      break;
 800672a:	bf00      	nop
 800672c:	e00a      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;
 800672e:	bf00      	nop
 8006730:	e008      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;
 8006732:	bf00      	nop
 8006734:	e006      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;
 8006736:	bf00      	nop
 8006738:	e004      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;
 800673a:	bf00      	nop
 800673c:	e002      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;   
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <DMA_CheckFifoParam+0xe8>
      break;
 8006742:	bf00      	nop
    }
  } 
  
  return status; 
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop

08006754 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e049      	b.n	80067fa <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb fe16 	bl	80023ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a4:	f023 0107 	bic.w	r1, r3, #7
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067ba:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <HAL_DMA2D_Init+0xb0>)
 80067bc:	4013      	ands	r3, r2
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	68d1      	ldr	r1, [r2, #12]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6812      	ldr	r2, [r2, #0]
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6413      	str	r3, [r2, #64]	@ 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	051a      	lsls	r2, r3, #20
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	055b      	lsls	r3, r3, #21
 80067e0:	431a      	orrs	r2, r3
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	635a      	str	r2, [r3, #52]	@ 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	ffffc000 	.word	0xffffc000

08006808 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_DMA2D_Start+0x1c>
 8006820:	2302      	movs	r3, #2
 8006822:	e018      	b.n	8006856 <HAL_DMA2D_Start+0x4e>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2202      	movs	r2, #2
 8006830:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68b9      	ldr	r1, [r7, #8]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 faa4 	bl	8006d8c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b086      	sub	sp, #24
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d056      	beq.n	8006928 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800687a:	f7fe fe7b 	bl	8005574 <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006880:	e04b      	b.n	800691a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006890:	2b00      	cmp	r3, #0
 8006892:	d023      	beq.n	80068dc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 0320 	and.w	r3, r3, #32
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a2:	f043 0202 	orr.w	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2221      	movs	r2, #33	@ 0x21
 80068c6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2204      	movs	r2, #4
 80068cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0a5      	b.n	8006a28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d01a      	beq.n	800691a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80068e4:	f7fe fe46 	bl	8005574 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d302      	bcc.n	80068fa <HAL_DMA2D_PollForTransfer+0x9c>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10f      	bne.n	800691a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068fe:	f043 0220 	orr.w	r2, r3, #32
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2203      	movs	r2, #3
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e086      	b.n	8006a28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0ac      	beq.n	8006882 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d061      	beq.n	8006a0e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800694a:	f7fe fe13 	bl	8005574 <HAL_GetTick>
 800694e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006950:	e056      	b.n	8006a00 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8006960:	2b00      	cmp	r3, #0
 8006962:	d02e      	beq.n	80069c2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006972:	f043 0204 	orr.w	r2, r3, #4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006988:	f043 0202 	orr.w	r2, r3, #2
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f043 0201 	orr.w	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2229      	movs	r2, #41	@ 0x29
 80069ac:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2204      	movs	r2, #4
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e032      	b.n	8006a28 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d01a      	beq.n	8006a00 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80069ca:	f7fe fdd3 	bl	8005574 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d302      	bcc.n	80069e0 <HAL_DMA2D_PollForTransfer+0x182>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10f      	bne.n	8006a00 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e4:	f043 0220 	orr.w	r2, r3, #32
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2203      	movs	r2, #3
 80069f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e013      	b.n	8006a28 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0a1      	beq.n	8006952 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2212      	movs	r2, #18
 8006a14:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d026      	beq.n	8006aa0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d021      	beq.n	8006aa0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a6a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a70:	f043 0201 	orr.w	r2, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2204      	movs	r2, #4
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d026      	beq.n	8006af8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d021      	beq.n	8006af8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ac2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad0:	f043 0202 	orr.w	r2, r3, #2
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2204      	movs	r2, #4
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d026      	beq.n	8006b50 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d021      	beq.n	8006b50 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b1a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2208      	movs	r2, #8
 8006b22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b28:	f043 0204 	orr.w	r2, r3, #4
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2204      	movs	r2, #4
 8006b34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d013      	beq.n	8006b82 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b72:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f853 	bl	8006c28 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d024      	beq.n	8006bd6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d01f      	beq.n	8006bd6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006ba4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2202      	movs	r2, #2
 8006bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f003 0310 	and.w	r3, r3, #16
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01f      	beq.n	8006c20 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01a      	beq.n	8006c20 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bf8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2210      	movs	r2, #16
 8006c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f80e 	bl	8006c3c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_DMA2D_ConfigLayer+0x20>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e084      	b.n	8006d7a <HAL_DMA2D_ConfigLayer+0x12a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	3320      	adds	r3, #32
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4413      	add	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006ca4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8006cb0:	4b35      	ldr	r3, [pc, #212]	@ (8006d88 <HAL_DMA2D_ConfigLayer+0x138>)
 8006cb2:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b0a      	cmp	r3, #10
 8006cba:	d003      	beq.n	8006cc4 <HAL_DMA2D_ConfigLayer+0x74>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b09      	cmp	r3, #9
 8006cc2:	d107      	bne.n	8006cd4 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	e005      	b.n	8006ce0 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	061b      	lsls	r3, r3, #24
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d120      	bne.n	8006d28 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	43db      	mvns	r3, r3
 8006cf0:	ea02 0103 	and.w	r1, r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	6812      	ldr	r2, [r2, #0]
 8006d06:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b0a      	cmp	r3, #10
 8006d0e:	d003      	beq.n	8006d18 <HAL_DMA2D_ConfigLayer+0xc8>
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2b09      	cmp	r3, #9
 8006d16:	d127      	bne.n	8006d68 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d24:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d26:	e01f      	b.n	8006d68 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69da      	ldr	r2, [r3, #28]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	43db      	mvns	r3, r3
 8006d32:	ea02 0103 	and.w	r1, r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2b0a      	cmp	r3, #10
 8006d50:	d003      	beq.n	8006d5a <HAL_DMA2D_ConfigLayer+0x10a>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b09      	cmp	r3, #9
 8006d58:	d106      	bne.n	8006d68 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006d66:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	371c      	adds	r7, #28
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	ff33000f 	.word	0xff33000f

08006d8c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b08b      	sub	sp, #44	@ 0x2c
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
 8006d98:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	041a      	lsls	r2, r3, #16
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	431a      	orrs	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006dc4:	d174      	bne.n	8006eb0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006dcc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006dd4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ddc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d108      	bne.n	8006dfe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	431a      	orrs	r2, r3
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dfc:	e053      	b.n	8006ea6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d106      	bne.n	8006e14 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e12:	e048      	b.n	8006ea6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d111      	bne.n	8006e40 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	0cdb      	lsrs	r3, r3, #19
 8006e20:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	0a9b      	lsrs	r3, r3, #10
 8006e26:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	08db      	lsrs	r3, r3, #3
 8006e2c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	02db      	lsls	r3, r3, #11
 8006e36:	4313      	orrs	r3, r2
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3e:	e032      	b.n	8006ea6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d117      	bne.n	8006e78 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	0fdb      	lsrs	r3, r3, #31
 8006e4c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	0cdb      	lsrs	r3, r3, #19
 8006e52:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	0adb      	lsrs	r3, r3, #11
 8006e58:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	08db      	lsrs	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	029b      	lsls	r3, r3, #10
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	03db      	lsls	r3, r3, #15
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e76:	e016      	b.n	8006ea6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	0f1b      	lsrs	r3, r3, #28
 8006e7c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	0d1b      	lsrs	r3, r3, #20
 8006e82:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	0b1b      	lsrs	r3, r3, #12
 8006e88:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	091b      	lsrs	r3, r3, #4
 8006e8e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	011a      	lsls	r2, r3, #4
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	021b      	lsls	r3, r3, #8
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	031b      	lsls	r3, r3, #12
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eac:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006eae:	e003      	b.n	8006eb8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	60da      	str	r2, [r3, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	372c      	adds	r7, #44	@ 0x2c
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	019a      	lsls	r2, r3, #6
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	041b      	lsls	r3, r3, #16
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006eea:	bf00      	nop
 8006eec:	3714      	adds	r7, #20
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b086      	sub	sp, #24
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
 8006f02:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f04:	f7fe fb36 	bl	8005574 <HAL_GetTick>
 8006f08:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006f0a:	e009      	b.n	8006f20 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f0c:	f7fe fb32 	bl	8005574 <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f1a:	d901      	bls.n	8006f20 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e015      	b.n	8006f4c <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0ee      	beq.n	8006f0c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	019a      	lsls	r2, r3, #6
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	ea42 0103 	orr.w	r1, r2, r3
 8006f3e:	6a3b      	ldr	r3, [r7, #32]
 8006f40:	041a      	lsls	r2, r3, #16
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	@ 0x28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d101      	bne.n	8006f68 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e16c      	b.n	8007242 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	7c5b      	ldrb	r3, [r3, #17]
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d102      	bne.n	8006f78 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fa40 	bl	80023f8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2203      	movs	r2, #3
 8006f7c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006f92:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fa2:	61bb      	str	r3, [r7, #24]
 8006fa4:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fa6:	f7fe fae5 	bl	8005574 <HAL_GetTick>
 8006faa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006fac:	e009      	b.n	8006fc2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006fae:	f7fe fae1 	bl	8005574 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fbc:	d901      	bls.n	8006fc2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e13f      	b.n	8007242 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8006fca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0ed      	beq.n	8006fae <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	4b9b      	ldr	r3, [pc, #620]	@ (800724c <HAL_DSI_Init+0x2f8>)
 8006fe0:	400b      	ands	r3, r1
 8006fe2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006ffa:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007002:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8007036:	2001      	movs	r0, #1
 8007038:	f7fe faa8 	bl	800558c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800703c:	f7fe fa9a 	bl	8005574 <HAL_GetTick>
 8007040:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007042:	e009      	b.n	8007058 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007044:	f7fe fa96 	bl	8005574 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007052:	d901      	bls.n	8007058 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e0f4      	b.n	8007242 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8007060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0ed      	beq.n	8007044 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f042 0201 	orr.w	r2, r2, #1
 800707a:	605a      	str	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	613b      	str	r3, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007098:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6899      	ldr	r1, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f042 0202 	orr.w	r2, r2, #2
 80070bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0204 	orr.w	r2, r2, #4
 80070d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 0203 	bic.w	r2, r2, #3
 80070e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68da      	ldr	r2, [r3, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 80070fe:	f7fe fa39 	bl	8005574 <HAL_GetTick>
 8007102:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d123      	bne.n	800715c <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007114:	e00c      	b.n	8007130 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007116:	f7fe fa2d 	bl	8005574 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007124:	d904      	bls.n	8007130 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e088      	b.n	8007242 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007138:	f003 0314 	and.w	r3, r3, #20
 800713c:	2b14      	cmp	r3, #20
 800713e:	d1ea      	bne.n	8007116 <HAL_DSI_Init+0x1c2>
 8007140:	e014      	b.n	800716c <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007142:	f7fe fa17 	bl	8005574 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007150:	d904      	bls.n	800715c <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e072      	b.n	8007242 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007164:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8007168:	2b94      	cmp	r3, #148	@ 0x94
 800716a:	d1ea      	bne.n	8007142 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_DSI_Init+0x226>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	e000      	b.n	800717c <HAL_DSI_Init+0x228>
 800717a:	2301      	movs	r3, #1
 800717c:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	4a33      	ldr	r2, [pc, #204]	@ (8007250 <HAL_DSI_Init+0x2fc>)
 8007182:	fb03 f202 	mul.w	r2, r3, r2
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	409a      	lsls	r2, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007198:	fb01 f303 	mul.w	r3, r1, r3
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80071b2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69fa      	ldr	r2, [r7, #28]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0203 	bic.w	r2, r2, #3
 8007216:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	431a      	orrs	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0201 	orr.w	r2, r2, #1
 8007230:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3728      	adds	r7, #40	@ 0x28
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	fffc8603 	.word	0xfffc8603
 8007250:	003d0900 	.word	0x003d0900

08007254 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e066      	b.n	8007334 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2203      	movs	r2, #3
 800726a:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f022 0208 	bic.w	r2, r2, #8
 8007280:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	617b      	str	r3, [r7, #20]
 8007292:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8007294:	2300      	movs	r3, #0
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	605a      	str	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	613b      	str	r3, [r7, #16]
 80072b4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f022 0206 	bic.w	r2, r2, #6
 80072c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0201 	bic.w	r2, r2, #1
 80072de:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007306:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8007312:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fb f8b8 	bl	8002490 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	7c1b      	ldrb	r3, [r3, #16]
 800734a:	2b01      	cmp	r3, #1
 800734c:	d101      	bne.n	8007352 <HAL_DSI_ConfigErrorMonitor+0x16>
 800734e:	2302      	movs	r3, #2
 8007350:	e0aa      	b.n	80074a8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800738c:	430b      	orrs	r3, r1
 800738e:	f8c2 30c4 	str.w	r3, [r2, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d009      	beq.n	80073b0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f442 12f8 	orr.w	r2, r2, #2031616	@ 0x1f0000
 80073ac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f042 0202 	orr.w	r2, r2, #2
 80073e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f003 0310 	and.w	r3, r3, #16
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d009      	beq.n	800740a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 020c 	orr.w	r2, r2, #12
 8007406:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d009      	beq.n	8007428 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0210 	orr.w	r2, r2, #16
 8007424:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0220 	orr.w	r2, r2, #32
 8007442:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007460:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800747e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f442 52f8 	orr.w	r2, r2, #7936	@ 0x1f00
 800749c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00f      	beq.n	80074ec <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80074d4:	f003 0301 	and.w	r3, r3, #1
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d007      	beq.n	80074ec <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8ad 	bl	8007646 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00f      	beq.n	800751c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d007      	beq.n	800751c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2202      	movs	r2, #2
 8007512:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 f89f 	bl	800765a <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	699b      	ldr	r3, [r3, #24]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 808c 	beq.w	800763e <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800752e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4013      	ands	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007546:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	4013      	ands	r3, r2
 8007554:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	b29b      	uxth	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f043 0201 	orr.w	r2, r3, #1
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d005      	beq.n	8007580 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	695b      	ldr	r3, [r3, #20]
 8007578:	f043 0202 	orr.w	r2, r3, #2
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f043 0204 	orr.w	r2, r3, #4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f043 0208 	orr.w	r2, r3, #8
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	f003 030c 	and.w	r3, r3, #12
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d005      	beq.n	80075c2 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f043 0210 	orr.w	r2, r3, #16
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f043 0220 	orr.w	r2, r3, #32
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800760a:	2b00      	cmp	r3, #0
 800760c:	d005      	beq.n	800761a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f818 	bl	800766e <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <HAL_DSI_SetGenericVCID>:
  *               the configuration information for the DSI.
  * @param  VirtualChannelID  Virtual channel ID
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
 8007682:	b480      	push	{r7}
 8007684:	b083      	sub	sp, #12
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7c1b      	ldrb	r3, [r3, #16]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_DSI_SetGenericVCID+0x16>
 8007694:	2302      	movs	r3, #2
 8007696:	e016      	b.n	80076c6 <HAL_DSI_SetGenericVCID+0x44>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	741a      	strb	r2, [r3, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f022 0203 	bic.w	r2, r2, #3
 80076ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d101      	bne.n	80076ea <HAL_DSI_ConfigVideoMode+0x16>
 80076e6:	2302      	movs	r3, #2
 80076e8:	e1ee      	b.n	8007ac8 <HAL_DSI_ConfigVideoMode+0x3f4>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0201 	bic.w	r2, r2, #1
 80076fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f022 0201 	bic.w	r2, r2, #1
 8007710:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0203 	bic.w	r2, r2, #3
 8007722:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	4b8b      	ldr	r3, [pc, #556]	@ (8007970 <HAL_DSI_ConfigVideoMode+0x29c>)
 8007742:	400b      	ands	r3, r1
 8007744:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	691a      	ldr	r2, [r3, #16]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b84      	ldr	r3, [pc, #528]	@ (8007974 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007764:	400b      	ands	r3, r1
 8007766:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	695a      	ldr	r2, [r3, #20]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4b7b      	ldr	r3, [pc, #492]	@ (8007974 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8007786:	400b      	ands	r3, r1
 8007788:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0203 	bic.w	r2, r2, #3
 80077aa:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	68d9      	ldr	r1, [r3, #12]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695a      	ldr	r2, [r3, #20]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0207 	bic.w	r2, r2, #7
 80077cc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6959      	ldr	r1, [r3, #20]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	431a      	orrs	r2, r3
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 020f 	bic.w	r2, r2, #15
 80077fa:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6919      	ldr	r1, [r3, #16]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 020e 	bic.w	r2, r2, #14
 800781e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	005a      	lsls	r2, r3, #1
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2b03      	cmp	r3, #3
 8007840:	d110      	bne.n	8007864 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007850:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6919      	ldr	r1, [r3, #16]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689a      	ldr	r2, [r3, #8]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	4b42      	ldr	r3, [pc, #264]	@ (8007978 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8007870:	400b      	ands	r3, r1
 8007872:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b39      	ldr	r3, [pc, #228]	@ (8007978 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8007892:	400b      	ands	r3, r1
 8007894:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b32      	ldr	r3, [pc, #200]	@ (800797c <HAL_DSI_ConfigVideoMode+0x2a8>)
 80078b4:	400b      	ands	r3, r1
 80078b6:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007980 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80078d6:	400b      	ands	r3, r1
 80078d8:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	430a      	orrs	r2, r1
 80078ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b22      	ldr	r3, [pc, #136]	@ (8007980 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80078f8:	400b      	ands	r3, r1
 80078fa:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800791a:	400b      	ands	r3, r1
 800791c:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <HAL_DSI_ConfigVideoMode+0x29c>)
 800793c:	400b      	ands	r3, r1
 800793e:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800796c:	e00a      	b.n	8007984 <HAL_DSI_ConfigVideoMode+0x2b0>
 800796e:	bf00      	nop
 8007970:	ffffc000 	.word	0xffffc000
 8007974:	ffffe000 	.word	0xffffe000
 8007978:	fffff000 	.word	0xfffff000
 800797c:	ffff8000 	.word	0xffff8000
 8007980:	fffffc00 	.word	0xfffffc00
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800799a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6999      	ldr	r1, [r3, #24]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079a6:	041a      	lsls	r2, r3, #16
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	430a      	orrs	r2, r1
 80079ae:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699a      	ldr	r2, [r3, #24]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80079be:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	6999      	ldr	r1, [r3, #24]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	430a      	orrs	r2, r1
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a24:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	430a      	orrs	r2, r1
 8007a36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a46:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007a68:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7c1b      	ldrb	r3, [r3, #16]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e0c5      	b.n	8007c76 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f022 0201 	bic.w	r2, r2, #1
 8007b10:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f042 0201 	orr.w	r2, r2, #1
 8007b24:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0203 	bic.w	r2, r2, #3
 8007b36:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68d9      	ldr	r1, [r3, #12]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695a      	ldr	r2, [r3, #20]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0207 	bic.w	r2, r2, #7
 8007b58:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6959      	ldr	r1, [r3, #20]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691a      	ldr	r2, [r3, #16]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 020f 	bic.w	r2, r2, #15
 8007b86:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6919      	ldr	r1, [r3, #16]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 020e 	bic.w	r2, r2, #14
 8007baa:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	005a      	lsls	r2, r3, #1
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8007c84 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 8007bd2:	400b      	ands	r3, r1
 8007bd4:	6653      	str	r3, [r2, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8007bf8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	431a      	orrs	r2, r3
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f022 0201 	bic.w	r2, r2, #1
 8007c32:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0201 	orr.w	r2, r2, #1
 8007c56:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0202 	orr.w	r2, r2, #2
 8007c6a:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	ffff0000 	.word	0xffff0000

08007c88 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7c1b      	ldrb	r3, [r3, #16]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_DSI_ConfigCommand+0x16>
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	e049      	b.n	8007d32 <HAL_DSI_ConfigCommand+0xaa>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b24      	ldr	r3, [pc, #144]	@ (8007d40 <HAL_DSI_ConfigCommand+0xb8>)
 8007cb0:	400b      	ands	r3, r1
 8007cb2:	6693      	str	r3, [r2, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007cc2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8007cc8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8007cce:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8007cd4:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8007cda:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8007ce0:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8007ce6:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8007cec:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8007cf2:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8007cf8:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8007cfe:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0202 	bic.w	r2, r2, #2
 8007d16:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	430a      	orrs	r2, r1
 8007d28:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	fef080ff 	.word	0xfef080ff

08007d44 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7c1b      	ldrb	r3, [r3, #16]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d101      	bne.n	8007d5a <HAL_DSI_ConfigFlowControl+0x16>
 8007d56:	2302      	movs	r3, #2
 8007d58:	e016      	b.n	8007d88 <HAL_DSI_ConfigFlowControl+0x44>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 021f 	bic.w	r2, r2, #31
 8007d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b085      	sub	sp, #20
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	7c1b      	ldrb	r3, [r3, #16]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_DSI_ConfigPhyTimer+0x16>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e058      	b.n	8007e5c <HAL_DSI_ConfigPhyTimer+0xc8>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	bf38      	it	cc
 8007dbc:	4613      	movcc	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007dd0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	041a      	lsls	r2, r3, #16
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	431a      	orrs	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 8007dfe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f8d3 109c 	ldr.w	r1, [r3, #156]	@ 0x9c
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	041b      	lsls	r3, r3, #16
 8007e14:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007e38:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	021a      	lsls	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7c1b      	ldrb	r3, [r3, #16]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d101      	bne.n	8007e7e <HAL_DSI_ConfigHostTimeouts+0x16>
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	e0b4      	b.n	8007fe8 <HAL_DSI_ConfigHostTimeouts+0x180>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007e92:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6899      	ldr	r1, [r3, #8]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	021a      	lsls	r2, r3, #8
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	041a      	lsls	r2, r3, #16
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b47      	ldr	r3, [pc, #284]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	6793      	str	r3, [r2, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	679a      	str	r2, [r3, #120]	@ 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007ef8:	400b      	ands	r3, r1
 8007efa:	67d3      	str	r3, [r2, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b36      	ldr	r3, [pc, #216]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007f1c:	400b      	ands	r3, r1
 8007f1e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f8d3 1080 	ldr.w	r1, [r3, #128]	@ 0x80
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	430a      	orrs	r2, r1
 8007f34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	4b2b      	ldr	r3, [pc, #172]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007f46:	400b      	ands	r3, r1
 8007f48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	430a      	orrs	r2, r1
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8d3 1084 	ldr.w	r1, [r3, #132]	@ 0x84
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	430a      	orrs	r2, r1
 8007f88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b16      	ldr	r3, [pc, #88]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007f9a:	400b      	ands	r3, r1
 8007f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff4 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6a1a      	ldr	r2, [r3, #32]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	ffff0000 	.word	0xffff0000

08007ff8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7c1b      	ldrb	r3, [r3, #16]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_DSI_Start+0x14>
 8008008:	2302      	movs	r3, #2
 800800a:	e02b      	b.n	8008064 <HAL_DSI_Start+0x6c>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0201 	orr.w	r2, r2, #1
 8008024:	605a      	str	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8008034:	2300      	movs	r3, #0
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f042 0208 	orr.w	r2, r2, #8
 8008048:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8008054:	f003 0308 	and.w	r3, r3, #8
 8008058:	60bb      	str	r3, [r7, #8]
 800805a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b088      	sub	sp, #32
 8008074:	af02      	add	r7, sp, #8
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	7c1b      	ldrb	r3, [r3, #16]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_DSI_ShortWrite+0x1a>
 8008086:	2302      	movs	r3, #2
 8008088:	e010      	b.n	80080ac <HAL_DSI_ShortWrite+0x3c>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f7fe ff2b 	bl	8006ef6 <DSI_ShortWrite>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	741a      	strb	r2, [r3, #16]

  return status;
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08c      	sub	sp, #48	@ 0x30
 80080b8:	af02      	add	r7, sp, #8
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 80080c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c4:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	7c1b      	ldrb	r3, [r3, #16]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_DSI_LongWrite+0x1e>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e084      	b.n	80081dc <HAL_DSI_LongWrite+0x128>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 80080d8:	f7fd fa4c 	bl	8005574 <HAL_GetTick>
 80080dc:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80080de:	e00c      	b.n	80080fa <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80080e0:	f7fd fa48 	bl	8005574 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080ee:	d904      	bls.n	80080fa <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e070      	b.n	80081dc <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0eb      	beq.n	80080e0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b03      	cmp	r3, #3
 8008110:	bf28      	it	cs
 8008112:	2303      	movcs	r3, #3
 8008114:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8008116:	2300      	movs	r3, #0
 8008118:	623b      	str	r3, [r7, #32]
 800811a:	e00f      	b.n	800813c <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	4413      	add	r3, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	461a      	mov	r2, r3
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	3301      	adds	r3, #1
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	fa02 f303 	lsl.w	r3, r2, r3
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	4313      	orrs	r3, r2
 8008134:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	3301      	adds	r3, #1
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	6a3a      	ldr	r2, [r7, #32]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	429a      	cmp	r2, r3
 8008142:	d3eb      	bcc.n	800811c <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69fa      	ldr	r2, [r7, #28]
 800814a:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800815c:	e028      	b.n	80081b0 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008160:	2b04      	cmp	r3, #4
 8008162:	bf28      	it	cs
 8008164:	2304      	movcs	r3, #4
 8008166:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800816c:	2300      	movs	r3, #0
 800816e:	623b      	str	r3, [r7, #32]
 8008170:	e00e      	b.n	8008190 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	4413      	add	r3, r2
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	461a      	mov	r2, r3
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	fa02 f303 	lsl.w	r3, r2, r3
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	4313      	orrs	r3, r2
 8008188:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	3301      	adds	r3, #1
 800818e:	623b      	str	r3, [r7, #32]
 8008190:	6a3a      	ldr	r2, [r7, #32]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	429a      	cmp	r2, r3
 8008196:	d3ec      	bcc.n	8008172 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 80081a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80081b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1d3      	bne.n	800815e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80081be:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4613      	mov	r3, r2
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	f7fe fe78 	bl	8006ec4 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	@ 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7c1b      	ldrb	r3, [r3, #16]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d101      	bne.n	80081fa <HAL_DSI_SetLowPowerRXFilter+0x16>
 80081f6:	2302      	movs	r3, #2
 80081f8:	e01b      	b.n	8008232 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f8d3 241c 	ldr.w	r2, [r3, #1052]	@ 0x41c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8008210:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f8d3 141c 	ldr.w	r1, [r3, #1052]	@ 0x41c
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	065a      	lsls	r2, r3, #25
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	430a      	orrs	r2, r1
 8008226:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e086      	b.n	8008360 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2223      	movs	r2, #35	@ 0x23
 8008260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fa f933 	bl	80024d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800826a:	4b3f      	ldr	r3, [pc, #252]	@ (8008368 <HAL_ETH_Init+0x128>)
 800826c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800826e:	4a3e      	ldr	r2, [pc, #248]	@ (8008368 <HAL_ETH_Init+0x128>)
 8008270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008274:	6453      	str	r3, [r2, #68]	@ 0x44
 8008276:	4b3c      	ldr	r3, [pc, #240]	@ (8008368 <HAL_ETH_Init+0x128>)
 8008278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800827a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800827e:	60bb      	str	r3, [r7, #8]
 8008280:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008282:	4b3a      	ldr	r3, [pc, #232]	@ (800836c <HAL_ETH_Init+0x12c>)
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	4a39      	ldr	r2, [pc, #228]	@ (800836c <HAL_ETH_Init+0x12c>)
 8008288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800828c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800828e:	4b37      	ldr	r3, [pc, #220]	@ (800836c <HAL_ETH_Init+0x12c>)
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	4935      	ldr	r1, [pc, #212]	@ (800836c <HAL_ETH_Init+0x12c>)
 8008298:	4313      	orrs	r3, r2
 800829a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800829c:	4b33      	ldr	r3, [pc, #204]	@ (800836c <HAL_ETH_Init+0x12c>)
 800829e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80082b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082b8:	f7fd f95c 	bl	8005574 <HAL_GetTick>
 80082bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80082be:	e011      	b.n	80082e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80082c0:	f7fd f958 	bl	8005574 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80082ce:	d909      	bls.n	80082e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2204      	movs	r2, #4
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	22e0      	movs	r2, #224	@ 0xe0
 80082dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e03d      	b.n	8008360 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e4      	bne.n	80082c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f97a 	bl	80085f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fa25 	bl	800874c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fa7b 	bl	80087fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	461a      	mov	r2, r3
 800830e:	2100      	movs	r1, #0
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f9e3 	bl	80086dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8008324:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b0f      	ldr	r3, [pc, #60]	@ (8008370 <HAL_ETH_Init+0x130>)
 8008334:	430b      	orrs	r3, r1
 8008336:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800834a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2210      	movs	r2, #16
 800835a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	40023800 	.word	0x40023800
 800836c:	40013800 	.word	0x40013800
 8008370:	00020060 	.word	0x00020060

08008374 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4b53      	ldr	r3, [pc, #332]	@ (80084d8 <ETH_SetMACConfig+0x164>)
 800838a:	4013      	ands	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	7b9b      	ldrb	r3, [r3, #14]
 8008392:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	7c12      	ldrb	r2, [r2, #16]
 8008398:	2a00      	cmp	r2, #0
 800839a:	d102      	bne.n	80083a2 <ETH_SetMACConfig+0x2e>
 800839c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80083a0:	e000      	b.n	80083a4 <ETH_SetMACConfig+0x30>
 80083a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80083a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	7c52      	ldrb	r2, [r2, #17]
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	d102      	bne.n	80083b4 <ETH_SetMACConfig+0x40>
 80083ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80083b2:	e000      	b.n	80083b6 <ETH_SetMACConfig+0x42>
 80083b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80083b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80083bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	7fdb      	ldrb	r3, [r3, #31]
 80083c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80083c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80083ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	7f92      	ldrb	r2, [r2, #30]
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	d102      	bne.n	80083da <ETH_SetMACConfig+0x66>
 80083d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80083d8:	e000      	b.n	80083dc <ETH_SetMACConfig+0x68>
 80083da:	2200      	movs	r2, #0
                        macconf->Speed |
 80083dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	7f1b      	ldrb	r3, [r3, #28]
 80083e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80083e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80083ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	791b      	ldrb	r3, [r3, #4]
 80083f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80083f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80083f4:	683a      	ldr	r2, [r7, #0]
 80083f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80083fa:	2a00      	cmp	r2, #0
 80083fc:	d102      	bne.n	8008404 <ETH_SetMACConfig+0x90>
 80083fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008402:	e000      	b.n	8008406 <ETH_SetMACConfig+0x92>
 8008404:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008406:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	7bdb      	ldrb	r3, [r3, #15]
 800840c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800840e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008414:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800841c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800841e:	4313      	orrs	r3, r2
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008436:	2001      	movs	r0, #1
 8008438:	f7fd f8a8 	bl	800558c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8008452:	4013      	ands	r3, r2
 8008454:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800845a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8008462:	2a00      	cmp	r2, #0
 8008464:	d101      	bne.n	800846a <ETH_SetMACConfig+0xf6>
 8008466:	2280      	movs	r2, #128	@ 0x80
 8008468:	e000      	b.n	800846c <ETH_SetMACConfig+0xf8>
 800846a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800846c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008472:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800847a:	2a01      	cmp	r2, #1
 800847c:	d101      	bne.n	8008482 <ETH_SetMACConfig+0x10e>
 800847e:	2208      	movs	r2, #8
 8008480:	e000      	b.n	8008484 <ETH_SetMACConfig+0x110>
 8008482:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8008484:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800848c:	2a01      	cmp	r2, #1
 800848e:	d101      	bne.n	8008494 <ETH_SetMACConfig+0x120>
 8008490:	2204      	movs	r2, #4
 8008492:	e000      	b.n	8008496 <ETH_SetMACConfig+0x122>
 8008494:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008496:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800849e:	2a01      	cmp	r2, #1
 80084a0:	d101      	bne.n	80084a6 <ETH_SetMACConfig+0x132>
 80084a2:	2202      	movs	r2, #2
 80084a4:	e000      	b.n	80084a8 <ETH_SetMACConfig+0x134>
 80084a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80084a8:	4313      	orrs	r3, r2
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80084c0:	2001      	movs	r0, #1
 80084c2:	f7fd f863 	bl	800558c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	619a      	str	r2, [r3, #24]
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	fd20810f 	.word	0xfd20810f

080084dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4b3d      	ldr	r3, [pc, #244]	@ (80085ec <ETH_SetDMAConfig+0x110>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	7b1b      	ldrb	r3, [r3, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d102      	bne.n	8008508 <ETH_SetDMAConfig+0x2c>
 8008502:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008506:	e000      	b.n	800850a <ETH_SetDMAConfig+0x2e>
 8008508:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	7b5b      	ldrb	r3, [r3, #13]
 800850e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008510:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	7f52      	ldrb	r2, [r2, #29]
 8008516:	2a00      	cmp	r2, #0
 8008518:	d102      	bne.n	8008520 <ETH_SetDMAConfig+0x44>
 800851a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800851e:	e000      	b.n	8008522 <ETH_SetDMAConfig+0x46>
 8008520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8008522:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	7b9b      	ldrb	r3, [r3, #14]
 8008528:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800852a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8008530:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	7f1b      	ldrb	r3, [r3, #28]
 8008536:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8008538:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	7f9b      	ldrb	r3, [r3, #30]
 800853e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8008540:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8008546:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800854e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8008550:	4313      	orrs	r3, r2
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4313      	orrs	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008560:	461a      	mov	r2, r3
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008572:	2001      	movs	r0, #1
 8008574:	f7fd f80a 	bl	800558c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008580:	461a      	mov	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008590:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8008596:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800859c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80085a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80085a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80085ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80085b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80085be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80085c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7fc ffdb 	bl	800558c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6013      	str	r3, [r2, #0]
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	f8de3f23 	.word	0xf8de3f23

080085f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b0a6      	sub	sp, #152	@ 0x98
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80085fe:	2301      	movs	r3, #1
 8008600:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8008604:	2300      	movs	r3, #0
 8008606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008608:	2300      	movs	r3, #0
 800860a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8008614:	2300      	movs	r3, #0
 8008616:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8008626:	2300      	movs	r3, #0
 8008628:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008632:	2300      	movs	r3, #0
 8008634:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8008636:	2300      	movs	r3, #0
 8008638:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800863c:	2300      	movs	r3, #0
 800863e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8008640:	2300      	movs	r3, #0
 8008642:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8008646:	2300      	movs	r3, #0
 8008648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800864c:	2300      	movs	r3, #0
 800864e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008658:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800865c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800865e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008664:	2300      	movs	r3, #0
 8008666:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800866a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7ff fe7f 	bl	8008374 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008676:	2301      	movs	r3, #1
 8008678:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800867a:	2301      	movs	r3, #1
 800867c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008684:	2301      	movs	r3, #1
 8008686:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800868c:	2300      	movs	r3, #0
 800868e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008692:	2300      	movs	r3, #0
 8008694:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008698:	2300      	movs	r3, #0
 800869a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800869c:	2301      	movs	r3, #1
 800869e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80086a2:	2301      	movs	r3, #1
 80086a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80086a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80086aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80086ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80086b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80086b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80086b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80086b8:	2301      	movs	r3, #1
 80086ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80086c6:	f107 0308 	add.w	r3, r7, #8
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f7ff ff05 	bl	80084dc <ETH_SetDMAConfig>
}
 80086d2:	bf00      	nop
 80086d4:	3798      	adds	r7, #152	@ 0x98
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
	...

080086dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	3305      	adds	r3, #5
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	3204      	adds	r2, #4
 80086f4:	7812      	ldrb	r2, [r2, #0]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4b11      	ldr	r3, [pc, #68]	@ (8008744 <ETH_MACAddressConfig+0x68>)
 80086fe:	4413      	add	r3, r2
 8008700:	461a      	mov	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	3303      	adds	r3, #3
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	061a      	lsls	r2, r3, #24
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3302      	adds	r3, #2
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3301      	adds	r3, #1
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	4313      	orrs	r3, r2
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	7812      	ldrb	r2, [r2, #0]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	4b06      	ldr	r3, [pc, #24]	@ (8008748 <ETH_MACAddressConfig+0x6c>)
 800872e:	4413      	add	r3, r2
 8008730:	461a      	mov	r2, r3
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6013      	str	r3, [r2, #0]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	40028040 	.word	0x40028040
 8008748:	40028044 	.word	0x40028044

0800874c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	e03e      	b.n	80087d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68d9      	ldr	r1, [r3, #12]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4613      	mov	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	4413      	add	r3, r2
 8008766:	00db      	lsls	r3, r3, #3
 8008768:	440b      	add	r3, r1
 800876a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008784:	68b9      	ldr	r1, [r7, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	3206      	adds	r2, #6
 800878c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d80c      	bhi.n	80087bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68d9      	ldr	r1, [r3, #12]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	4613      	mov	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4413      	add	r3, r2
 80087b0:	00db      	lsls	r3, r3, #3
 80087b2:	440b      	add	r3, r1
 80087b4:	461a      	mov	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	e004      	b.n	80087c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	461a      	mov	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d9bd      	bls.n	800875a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68da      	ldr	r2, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f0:	611a      	str	r2, [r3, #16]
}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008806:	2300      	movs	r3, #0
 8008808:	60fb      	str	r3, [r7, #12]
 800880a:	e048      	b.n	800889e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6919      	ldr	r1, [r3, #16]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	440b      	add	r3, r1
 800881c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2200      	movs	r2, #0
 8008828:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2200      	movs	r2, #0
 8008834:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2200      	movs	r2, #0
 800883a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008848:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	3212      	adds	r2, #18
 800886a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d80c      	bhi.n	800888e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6919      	ldr	r1, [r3, #16]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	1c5a      	adds	r2, r3, #1
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	440b      	add	r3, r1
 8008886:	461a      	mov	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	60da      	str	r2, [r3, #12]
 800888c:	e004      	b.n	8008898 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	461a      	mov	r2, r3
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d9b3      	bls.n	800880c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691a      	ldr	r2, [r3, #16]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088ce:	60da      	str	r2, [r3, #12]
}
 80088d0:	bf00      	nop
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088dc:	b480      	push	{r7}
 80088de:	b089      	sub	sp, #36	@ 0x24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80088e6:	2300      	movs	r3, #0
 80088e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80088ea:	2300      	movs	r3, #0
 80088ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	e175      	b.n	8008be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80088fc:	2201      	movs	r2, #1
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	4013      	ands	r3, r2
 800890e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	429a      	cmp	r2, r3
 8008916:	f040 8164 	bne.w	8008be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	2b01      	cmp	r3, #1
 8008924:	d005      	beq.n	8008932 <HAL_GPIO_Init+0x56>
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f003 0303 	and.w	r3, r3, #3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d130      	bne.n	8008994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	2203      	movs	r2, #3
 800893e:	fa02 f303 	lsl.w	r3, r2, r3
 8008942:	43db      	mvns	r3, r3
 8008944:	69ba      	ldr	r2, [r7, #24]
 8008946:	4013      	ands	r3, r2
 8008948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	fa02 f303 	lsl.w	r3, r2, r3
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	4313      	orrs	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008968:	2201      	movs	r2, #1
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	4013      	ands	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	091b      	lsrs	r3, r3, #4
 800897e:	f003 0201 	and.w	r2, r3, #1
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	fa02 f303 	lsl.w	r3, r2, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4313      	orrs	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69ba      	ldr	r2, [r7, #24]
 8008992:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	2b03      	cmp	r3, #3
 800899e:	d017      	beq.n	80089d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	2203      	movs	r2, #3
 80089ac:	fa02 f303 	lsl.w	r3, r2, r3
 80089b0:	43db      	mvns	r3, r3
 80089b2:	69ba      	ldr	r2, [r7, #24]
 80089b4:	4013      	ands	r3, r2
 80089b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	689a      	ldr	r2, [r3, #8]
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	fa02 f303 	lsl.w	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f003 0303 	and.w	r3, r3, #3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d123      	bne.n	8008a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	08da      	lsrs	r2, r3, #3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3208      	adds	r2, #8
 80089e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	220f      	movs	r2, #15
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	43db      	mvns	r3, r3
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	4013      	ands	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	691a      	ldr	r2, [r3, #16]
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	08da      	lsrs	r2, r3, #3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	3208      	adds	r2, #8
 8008a1e:	69b9      	ldr	r1, [r7, #24]
 8008a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	005b      	lsls	r3, r3, #1
 8008a2e:	2203      	movs	r2, #3
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f003 0203 	and.w	r2, r3, #3
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 80be 	beq.w	8008be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a66:	4b66      	ldr	r3, [pc, #408]	@ (8008c00 <HAL_GPIO_Init+0x324>)
 8008a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6a:	4a65      	ldr	r2, [pc, #404]	@ (8008c00 <HAL_GPIO_Init+0x324>)
 8008a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8008a72:	4b63      	ldr	r3, [pc, #396]	@ (8008c00 <HAL_GPIO_Init+0x324>)
 8008a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008a7e:	4a61      	ldr	r2, [pc, #388]	@ (8008c04 <HAL_GPIO_Init+0x328>)
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	089b      	lsrs	r3, r3, #2
 8008a84:	3302      	adds	r3, #2
 8008a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	220f      	movs	r2, #15
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a58      	ldr	r2, [pc, #352]	@ (8008c08 <HAL_GPIO_Init+0x32c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d037      	beq.n	8008b1a <HAL_GPIO_Init+0x23e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a57      	ldr	r2, [pc, #348]	@ (8008c0c <HAL_GPIO_Init+0x330>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d031      	beq.n	8008b16 <HAL_GPIO_Init+0x23a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a56      	ldr	r2, [pc, #344]	@ (8008c10 <HAL_GPIO_Init+0x334>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d02b      	beq.n	8008b12 <HAL_GPIO_Init+0x236>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a55      	ldr	r2, [pc, #340]	@ (8008c14 <HAL_GPIO_Init+0x338>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d025      	beq.n	8008b0e <HAL_GPIO_Init+0x232>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a54      	ldr	r2, [pc, #336]	@ (8008c18 <HAL_GPIO_Init+0x33c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d01f      	beq.n	8008b0a <HAL_GPIO_Init+0x22e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a53      	ldr	r2, [pc, #332]	@ (8008c1c <HAL_GPIO_Init+0x340>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d019      	beq.n	8008b06 <HAL_GPIO_Init+0x22a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a52      	ldr	r2, [pc, #328]	@ (8008c20 <HAL_GPIO_Init+0x344>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d013      	beq.n	8008b02 <HAL_GPIO_Init+0x226>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a51      	ldr	r2, [pc, #324]	@ (8008c24 <HAL_GPIO_Init+0x348>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00d      	beq.n	8008afe <HAL_GPIO_Init+0x222>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a50      	ldr	r2, [pc, #320]	@ (8008c28 <HAL_GPIO_Init+0x34c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <HAL_GPIO_Init+0x21e>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a4f      	ldr	r2, [pc, #316]	@ (8008c2c <HAL_GPIO_Init+0x350>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d101      	bne.n	8008af6 <HAL_GPIO_Init+0x21a>
 8008af2:	2309      	movs	r3, #9
 8008af4:	e012      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008af6:	230a      	movs	r3, #10
 8008af8:	e010      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008afa:	2308      	movs	r3, #8
 8008afc:	e00e      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008afe:	2307      	movs	r3, #7
 8008b00:	e00c      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b02:	2306      	movs	r3, #6
 8008b04:	e00a      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b06:	2305      	movs	r3, #5
 8008b08:	e008      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b0a:	2304      	movs	r3, #4
 8008b0c:	e006      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e004      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b12:	2302      	movs	r3, #2
 8008b14:	e002      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <HAL_GPIO_Init+0x240>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	f002 0203 	and.w	r2, r2, #3
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	4093      	lsls	r3, r2
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008b2c:	4935      	ldr	r1, [pc, #212]	@ (8008c04 <HAL_GPIO_Init+0x328>)
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	089b      	lsrs	r3, r3, #2
 8008b32:	3302      	adds	r3, #2
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	43db      	mvns	r3, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	4013      	ands	r3, r2
 8008b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b5e:	4a34      	ldr	r2, [pc, #208]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b64:	4b32      	ldr	r3, [pc, #200]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	4013      	ands	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b88:	4a29      	ldr	r2, [pc, #164]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008b8e:	4b28      	ldr	r3, [pc, #160]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	43db      	mvns	r3, r3
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008bb4:	69bb      	ldr	r3, [r7, #24]
 8008bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d003      	beq.n	8008bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008bdc:	4a14      	ldr	r2, [pc, #80]	@ (8008c30 <HAL_GPIO_Init+0x354>)
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	3301      	adds	r3, #1
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	2b0f      	cmp	r3, #15
 8008bec:	f67f ae86 	bls.w	80088fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	3724      	adds	r7, #36	@ 0x24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40023800 	.word	0x40023800
 8008c04:	40013800 	.word	0x40013800
 8008c08:	40020000 	.word	0x40020000
 8008c0c:	40020400 	.word	0x40020400
 8008c10:	40020800 	.word	0x40020800
 8008c14:	40020c00 	.word	0x40020c00
 8008c18:	40021000 	.word	0x40021000
 8008c1c:	40021400 	.word	0x40021400
 8008c20:	40021800 	.word	0x40021800
 8008c24:	40021c00 	.word	0x40021c00
 8008c28:	40022000 	.word	0x40022000
 8008c2c:	40022400 	.word	0x40022400
 8008c30:	40013c00 	.word	0x40013c00

08008c34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b087      	sub	sp, #28
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008c46:	2300      	movs	r3, #0
 8008c48:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	617b      	str	r3, [r7, #20]
 8008c4e:	e0d9      	b.n	8008e04 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008c50:	2201      	movs	r2, #1
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	fa02 f303 	lsl.w	r3, r2, r3
 8008c58:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	f040 80c9 	bne.w	8008dfe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8008e1c <HAL_GPIO_DeInit+0x1e8>)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	089b      	lsrs	r3, r3, #2
 8008c72:	3302      	adds	r3, #2
 8008c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c78:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f003 0303 	and.w	r3, r3, #3
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	220f      	movs	r2, #15
 8008c84:	fa02 f303 	lsl.w	r3, r2, r3
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a63      	ldr	r2, [pc, #396]	@ (8008e20 <HAL_GPIO_DeInit+0x1ec>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d037      	beq.n	8008d06 <HAL_GPIO_DeInit+0xd2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a62      	ldr	r2, [pc, #392]	@ (8008e24 <HAL_GPIO_DeInit+0x1f0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d031      	beq.n	8008d02 <HAL_GPIO_DeInit+0xce>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a61      	ldr	r2, [pc, #388]	@ (8008e28 <HAL_GPIO_DeInit+0x1f4>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d02b      	beq.n	8008cfe <HAL_GPIO_DeInit+0xca>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a60      	ldr	r2, [pc, #384]	@ (8008e2c <HAL_GPIO_DeInit+0x1f8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d025      	beq.n	8008cfa <HAL_GPIO_DeInit+0xc6>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a5f      	ldr	r2, [pc, #380]	@ (8008e30 <HAL_GPIO_DeInit+0x1fc>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01f      	beq.n	8008cf6 <HAL_GPIO_DeInit+0xc2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8008e34 <HAL_GPIO_DeInit+0x200>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d019      	beq.n	8008cf2 <HAL_GPIO_DeInit+0xbe>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a5d      	ldr	r2, [pc, #372]	@ (8008e38 <HAL_GPIO_DeInit+0x204>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d013      	beq.n	8008cee <HAL_GPIO_DeInit+0xba>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8008e3c <HAL_GPIO_DeInit+0x208>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00d      	beq.n	8008cea <HAL_GPIO_DeInit+0xb6>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a5b      	ldr	r2, [pc, #364]	@ (8008e40 <HAL_GPIO_DeInit+0x20c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d007      	beq.n	8008ce6 <HAL_GPIO_DeInit+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a5a      	ldr	r2, [pc, #360]	@ (8008e44 <HAL_GPIO_DeInit+0x210>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d101      	bne.n	8008ce2 <HAL_GPIO_DeInit+0xae>
 8008cde:	2309      	movs	r3, #9
 8008ce0:	e012      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	e010      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008ce6:	2308      	movs	r3, #8
 8008ce8:	e00e      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cea:	2307      	movs	r3, #7
 8008cec:	e00c      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cee:	2306      	movs	r3, #6
 8008cf0:	e00a      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cf2:	2305      	movs	r3, #5
 8008cf4:	e008      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cf6:	2304      	movs	r3, #4
 8008cf8:	e006      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e004      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e002      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <HAL_GPIO_DeInit+0xd4>
 8008d06:	2300      	movs	r3, #0
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	f002 0203 	and.w	r2, r2, #3
 8008d0e:	0092      	lsls	r2, r2, #2
 8008d10:	4093      	lsls	r3, r2
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d132      	bne.n	8008d7e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008d18:	4b4b      	ldr	r3, [pc, #300]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	4949      	ldr	r1, [pc, #292]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008d26:	4b48      	ldr	r3, [pc, #288]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	4946      	ldr	r1, [pc, #280]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d30:	4013      	ands	r3, r2
 8008d32:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008d34:	4b44      	ldr	r3, [pc, #272]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d36:	68da      	ldr	r2, [r3, #12]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	4942      	ldr	r1, [pc, #264]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d3e:	4013      	ands	r3, r2
 8008d40:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008d42:	4b41      	ldr	r3, [pc, #260]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	493f      	ldr	r1, [pc, #252]	@ (8008e48 <HAL_GPIO_DeInit+0x214>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	220f      	movs	r2, #15
 8008d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008d60:	4a2e      	ldr	r2, [pc, #184]	@ (8008e1c <HAL_GPIO_DeInit+0x1e8>)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	089b      	lsrs	r3, r3, #2
 8008d66:	3302      	adds	r3, #2
 8008d68:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	43da      	mvns	r2, r3
 8008d70:	482a      	ldr	r0, [pc, #168]	@ (8008e1c <HAL_GPIO_DeInit+0x1e8>)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	089b      	lsrs	r3, r3, #2
 8008d76:	400a      	ands	r2, r1
 8008d78:	3302      	adds	r3, #2
 8008d7a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	2103      	movs	r1, #3
 8008d88:	fa01 f303 	lsl.w	r3, r1, r3
 8008d8c:	43db      	mvns	r3, r3
 8008d8e:	401a      	ands	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	08da      	lsrs	r2, r3, #3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3208      	adds	r2, #8
 8008d9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f003 0307 	and.w	r3, r3, #7
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	220f      	movs	r2, #15
 8008daa:	fa02 f303 	lsl.w	r3, r2, r3
 8008dae:	43db      	mvns	r3, r3
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	08d2      	lsrs	r2, r2, #3
 8008db4:	4019      	ands	r1, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	3208      	adds	r2, #8
 8008dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	2103      	movs	r1, #3
 8008dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dcc:	43db      	mvns	r3, r3
 8008dce:	401a      	ands	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	2101      	movs	r1, #1
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8008de0:	43db      	mvns	r3, r3
 8008de2:	401a      	ands	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	2103      	movs	r1, #3
 8008df2:	fa01 f303 	lsl.w	r3, r1, r3
 8008df6:	43db      	mvns	r3, r3
 8008df8:	401a      	ands	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	3301      	adds	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b0f      	cmp	r3, #15
 8008e08:	f67f af22 	bls.w	8008c50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	40013800 	.word	0x40013800
 8008e20:	40020000 	.word	0x40020000
 8008e24:	40020400 	.word	0x40020400
 8008e28:	40020800 	.word	0x40020800
 8008e2c:	40020c00 	.word	0x40020c00
 8008e30:	40021000 	.word	0x40021000
 8008e34:	40021400 	.word	0x40021400
 8008e38:	40021800 	.word	0x40021800
 8008e3c:	40021c00 	.word	0x40021c00
 8008e40:	40022000 	.word	0x40022000
 8008e44:	40022400 	.word	0x40022400
 8008e48:	40013c00 	.word	0x40013c00

08008e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e5c:	787b      	ldrb	r3, [r7, #1]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e62:	887a      	ldrh	r2, [r7, #2]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008e68:	e003      	b.n	8008e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008e6a:	887b      	ldrh	r3, [r7, #2]
 8008e6c:	041a      	lsls	r2, r3, #16
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	619a      	str	r2, [r3, #24]
}
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
	...

08008e80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	4603      	mov	r3, r0
 8008e88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008e8a:	4b08      	ldr	r3, [pc, #32]	@ (8008eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e8c:	695a      	ldr	r2, [r3, #20]
 8008e8e:	88fb      	ldrh	r3, [r7, #6]
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e96:	4a05      	ldr	r2, [pc, #20]	@ (8008eac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008e98:	88fb      	ldrh	r3, [r7, #6]
 8008e9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008e9c:	88fb      	ldrh	r3, [r7, #6]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7f7 fd6e 	bl	8000980 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	40013c00 	.word	0x40013c00

08008eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e08b      	b.n	8008fda <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d106      	bne.n	8008edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f7f9 fbfc 	bl	80026d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2224      	movs	r2, #36	@ 0x24
 8008ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0201 	bic.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689a      	ldr	r2, [r3, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d107      	bne.n	8008f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689a      	ldr	r2, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f26:	609a      	str	r2, [r3, #8]
 8008f28:	e006      	b.n	8008f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	689a      	ldr	r2, [r3, #8]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8008f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d108      	bne.n	8008f52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4e:	605a      	str	r2, [r3, #4]
 8008f50:	e007      	b.n	8008f62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6859      	ldr	r1, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe4 <HAL_I2C_Init+0x134>)
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f80:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691a      	ldr	r2, [r3, #16]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	69d9      	ldr	r1, [r3, #28]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1a      	ldr	r2, [r3, #32]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	02008000 	.word	0x02008000

08008fe8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e021      	b.n	800903e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2224      	movs	r2, #36	@ 0x24
 8008ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0201 	bic.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7f9 fc28 	bl	8002868 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
	...

08009048 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b088      	sub	sp, #32
 800904c:	af02      	add	r7, sp, #8
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	4608      	mov	r0, r1
 8009052:	4611      	mov	r1, r2
 8009054:	461a      	mov	r2, r3
 8009056:	4603      	mov	r3, r0
 8009058:	817b      	strh	r3, [r7, #10]
 800905a:	460b      	mov	r3, r1
 800905c:	813b      	strh	r3, [r7, #8]
 800905e:	4613      	mov	r3, r2
 8009060:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b20      	cmp	r3, #32
 800906c:	f040 80f9 	bne.w	8009262 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_I2C_Mem_Write+0x34>
 8009076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009078:	2b00      	cmp	r3, #0
 800907a:	d105      	bne.n	8009088 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009082:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	e0ed      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_I2C_Mem_Write+0x4e>
 8009092:	2302      	movs	r3, #2
 8009094:	e0e6      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800909e:	f7fc fa69 	bl	8005574 <HAL_GetTick>
 80090a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2319      	movs	r3, #25
 80090aa:	2201      	movs	r2, #1
 80090ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fad1 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	e0d1      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2221      	movs	r2, #33	@ 0x21
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2240      	movs	r2, #64	@ 0x40
 80090cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a3a      	ldr	r2, [r7, #32]
 80090da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80090e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090e8:	88f8      	ldrh	r0, [r7, #6]
 80090ea:	893a      	ldrh	r2, [r7, #8]
 80090ec:	8979      	ldrh	r1, [r7, #10]
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	4603      	mov	r3, r0
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f9e1 	bl	80094c0 <I2C_RequestMemoryWrite>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e0a9      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009114:	b29b      	uxth	r3, r3
 8009116:	2bff      	cmp	r3, #255	@ 0xff
 8009118:	d90e      	bls.n	8009138 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	22ff      	movs	r2, #255	@ 0xff
 800911e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009124:	b2da      	uxtb	r2, r3
 8009126:	8979      	ldrh	r1, [r7, #10]
 8009128:	2300      	movs	r3, #0
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 fc55 	bl	80099e0 <I2C_TransferConfig>
 8009136:	e00f      	b.n	8009158 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009146:	b2da      	uxtb	r2, r3
 8009148:	8979      	ldrh	r1, [r7, #10]
 800914a:	2300      	movs	r3, #0
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 fc44 	bl	80099e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f000 fad4 	bl	800970a <I2C_WaitOnTXISFlagUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009168:	2301      	movs	r3, #1
 800916a:	e07b      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009170:	781a      	ldrb	r2, [r3, #0]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009186:	b29b      	uxth	r3, r3
 8009188:	3b01      	subs	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009194:	3b01      	subs	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d034      	beq.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d130      	bne.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	9300      	str	r3, [sp, #0]
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	2200      	movs	r2, #0
 80091b6:	2180      	movs	r1, #128	@ 0x80
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 fa4d 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e04d      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	2bff      	cmp	r3, #255	@ 0xff
 80091d0:	d90e      	bls.n	80091f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	22ff      	movs	r2, #255	@ 0xff
 80091d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	8979      	ldrh	r1, [r7, #10]
 80091e0:	2300      	movs	r3, #0
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fbf9 	bl	80099e0 <I2C_TransferConfig>
 80091ee:	e00f      	b.n	8009210 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	8979      	ldrh	r1, [r7, #10]
 8009202:	2300      	movs	r3, #0
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fbe8 	bl	80099e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009214:	b29b      	uxth	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d19e      	bne.n	8009158 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f000 faba 	bl	8009798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e01a      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2220      	movs	r2, #32
 8009234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b0a      	ldr	r3, [pc, #40]	@ (800926c <HAL_I2C_Mem_Write+0x224>)
 8009242:	400b      	ands	r3, r1
 8009244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2220      	movs	r2, #32
 800924a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	e000      	b.n	8009264 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009262:	2302      	movs	r3, #2
  }
}
 8009264:	4618      	mov	r0, r3
 8009266:	3718      	adds	r7, #24
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	fe00e800 	.word	0xfe00e800

08009270 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b088      	sub	sp, #32
 8009274:	af02      	add	r7, sp, #8
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4603      	mov	r3, r0
 8009280:	817b      	strh	r3, [r7, #10]
 8009282:	460b      	mov	r3, r1
 8009284:	813b      	strh	r3, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b20      	cmp	r3, #32
 8009294:	f040 80fd 	bne.w	8009492 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_I2C_Mem_Read+0x34>
 800929e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	e0f1      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d101      	bne.n	80092be <HAL_I2C_Mem_Read+0x4e>
 80092ba:	2302      	movs	r3, #2
 80092bc:	e0ea      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80092c6:	f7fc f955 	bl	8005574 <HAL_GetTick>
 80092ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	2319      	movs	r3, #25
 80092d2:	2201      	movs	r2, #1
 80092d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 f9bd 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e0d5      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2222      	movs	r2, #34	@ 0x22
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2240      	movs	r2, #64	@ 0x40
 80092f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a3a      	ldr	r2, [r7, #32]
 8009302:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009308:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009310:	88f8      	ldrh	r0, [r7, #6]
 8009312:	893a      	ldrh	r2, [r7, #8]
 8009314:	8979      	ldrh	r1, [r7, #10]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	9301      	str	r3, [sp, #4]
 800931a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4603      	mov	r3, r0
 8009320:	68f8      	ldr	r0, [r7, #12]
 8009322:	f000 f921 	bl	8009568 <I2C_RequestMemoryRead>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0ad      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800933c:	b29b      	uxth	r3, r3
 800933e:	2bff      	cmp	r3, #255	@ 0xff
 8009340:	d90e      	bls.n	8009360 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2201      	movs	r2, #1
 8009346:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800934c:	b2da      	uxtb	r2, r3
 800934e:	8979      	ldrh	r1, [r7, #10]
 8009350:	4b52      	ldr	r3, [pc, #328]	@ (800949c <HAL_I2C_Mem_Read+0x22c>)
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fb41 	bl	80099e0 <I2C_TransferConfig>
 800935e:	e00f      	b.n	8009380 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009364:	b29a      	uxth	r2, r3
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800936e:	b2da      	uxtb	r2, r3
 8009370:	8979      	ldrh	r1, [r7, #10]
 8009372:	4b4a      	ldr	r3, [pc, #296]	@ (800949c <HAL_I2C_Mem_Read+0x22c>)
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fb30 	bl	80099e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009386:	2200      	movs	r2, #0
 8009388:	2104      	movs	r1, #4
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 f964 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e07c      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093ac:	1c5a      	adds	r2, r3, #1
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093b6:	3b01      	subs	r3, #1
 80093b8:	b29a      	uxth	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d034      	beq.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d130      	bne.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	2200      	movs	r2, #0
 80093e6:	2180      	movs	r1, #128	@ 0x80
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f935 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e04d      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2bff      	cmp	r3, #255	@ 0xff
 8009400:	d90e      	bls.n	8009420 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2201      	movs	r2, #1
 8009406:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	8979      	ldrh	r1, [r7, #10]
 8009410:	2300      	movs	r3, #0
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fae1 	bl	80099e0 <I2C_TransferConfig>
 800941e:	e00f      	b.n	8009440 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009424:	b29a      	uxth	r2, r3
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800942e:	b2da      	uxtb	r2, r3
 8009430:	8979      	ldrh	r1, [r7, #10]
 8009432:	2300      	movs	r3, #0
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fad0 	bl	80099e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009444:	b29b      	uxth	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d19a      	bne.n	8009380 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f000 f9a2 	bl	8009798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e01a      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2220      	movs	r2, #32
 8009464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6859      	ldr	r1, [r3, #4]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	4b0b      	ldr	r3, [pc, #44]	@ (80094a0 <HAL_I2C_Mem_Read+0x230>)
 8009472:	400b      	ands	r3, r1
 8009474:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	e000      	b.n	8009494 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009492:	2302      	movs	r3, #2
  }
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	80002400 	.word	0x80002400
 80094a0:	fe00e800 	.word	0xfe00e800

080094a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094b2:	b2db      	uxtb	r3, r3
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	4608      	mov	r0, r1
 80094ca:	4611      	mov	r1, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	817b      	strh	r3, [r7, #10]
 80094d2:	460b      	mov	r3, r1
 80094d4:	813b      	strh	r3, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	b2da      	uxtb	r2, r3
 80094de:	8979      	ldrh	r1, [r7, #10]
 80094e0:	4b20      	ldr	r3, [pc, #128]	@ (8009564 <I2C_RequestMemoryWrite+0xa4>)
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fa79 	bl	80099e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	69b9      	ldr	r1, [r7, #24]
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f909 	bl	800970a <I2C_WaitOnTXISFlagUntilTimeout>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e02c      	b.n	800955c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d105      	bne.n	8009514 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009508:	893b      	ldrh	r3, [r7, #8]
 800950a:	b2da      	uxtb	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	629a      	str	r2, [r3, #40]	@ 0x28
 8009512:	e015      	b.n	8009540 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009514:	893b      	ldrh	r3, [r7, #8]
 8009516:	0a1b      	lsrs	r3, r3, #8
 8009518:	b29b      	uxth	r3, r3
 800951a:	b2da      	uxtb	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	69b9      	ldr	r1, [r7, #24]
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f8ef 	bl	800970a <I2C_WaitOnTXISFlagUntilTimeout>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d001      	beq.n	8009536 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009532:	2301      	movs	r3, #1
 8009534:	e012      	b.n	800955c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009536:	893b      	ldrh	r3, [r7, #8]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	9300      	str	r3, [sp, #0]
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2200      	movs	r2, #0
 8009548:	2180      	movs	r1, #128	@ 0x80
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 f884 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}
 8009564:	80002000 	.word	0x80002000

08009568 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af02      	add	r7, sp, #8
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	461a      	mov	r2, r3
 8009576:	4603      	mov	r3, r0
 8009578:	817b      	strh	r3, [r7, #10]
 800957a:	460b      	mov	r3, r1
 800957c:	813b      	strh	r3, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	b2da      	uxtb	r2, r3
 8009586:	8979      	ldrh	r1, [r7, #10]
 8009588:	4b20      	ldr	r3, [pc, #128]	@ (800960c <I2C_RequestMemoryRead+0xa4>)
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	2300      	movs	r3, #0
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f000 fa26 	bl	80099e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	69b9      	ldr	r1, [r7, #24]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f8b6 	bl	800970a <I2C_WaitOnTXISFlagUntilTimeout>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	e02c      	b.n	8009602 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095a8:	88fb      	ldrh	r3, [r7, #6]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d105      	bne.n	80095ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095ae:	893b      	ldrh	r3, [r7, #8]
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80095b8:	e015      	b.n	80095e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80095ba:	893b      	ldrh	r3, [r7, #8]
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	b29b      	uxth	r3, r3
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	69b9      	ldr	r1, [r7, #24]
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f89c 	bl	800970a <I2C_WaitOnTXISFlagUntilTimeout>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e012      	b.n	8009602 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80095dc:	893b      	ldrh	r3, [r7, #8]
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	2200      	movs	r2, #0
 80095ee:	2140      	movs	r1, #64	@ 0x40
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f831 	bl	8009658 <I2C_WaitOnFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e000      	b.n	8009602 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	80002000 	.word	0x80002000

08009610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	699b      	ldr	r3, [r3, #24]
 800961e:	f003 0302 	and.w	r3, r3, #2
 8009622:	2b02      	cmp	r3, #2
 8009624:	d103      	bne.n	800962e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2200      	movs	r2, #0
 800962c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b01      	cmp	r3, #1
 800963a:	d007      	beq.n	800964c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f042 0201 	orr.w	r2, r2, #1
 800964a:	619a      	str	r2, [r3, #24]
  }
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	603b      	str	r3, [r7, #0]
 8009664:	4613      	mov	r3, r2
 8009666:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009668:	e03b      	b.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800966a:	69ba      	ldr	r2, [r7, #24]
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f8d6 	bl	8009820 <I2C_IsErrorOccurred>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e041      	b.n	8009702 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009684:	d02d      	beq.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009686:	f7fb ff75 	bl	8005574 <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d302      	bcc.n	800969c <I2C_WaitOnFlagUntilTimeout+0x44>
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d122      	bne.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699a      	ldr	r2, [r3, #24]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4013      	ands	r3, r2
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	bf0c      	ite	eq
 80096ac:	2301      	moveq	r3, #1
 80096ae:	2300      	movne	r3, #0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	461a      	mov	r2, r3
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d113      	bne.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096be:	f043 0220 	orr.w	r2, r3, #32
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e00f      	b.n	8009702 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	4013      	ands	r3, r2
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	bf0c      	ite	eq
 80096f2:	2301      	moveq	r3, #1
 80096f4:	2300      	movne	r3, #0
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	461a      	mov	r2, r3
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d0b4      	beq.n	800966a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009716:	e033      	b.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	68b9      	ldr	r1, [r7, #8]
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 f87f 	bl	8009820 <I2C_IsErrorOccurred>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e031      	b.n	8009790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009732:	d025      	beq.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009734:	f7fb ff1e 	bl	8005574 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	429a      	cmp	r2, r3
 8009742:	d302      	bcc.n	800974a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d11a      	bne.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b02      	cmp	r3, #2
 8009756:	d013      	beq.n	8009780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800975c:	f043 0220 	orr.w	r2, r3, #32
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e007      	b.n	8009790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	2b02      	cmp	r3, #2
 800978c:	d1c4      	bne.n	8009718 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80097a4:	e02f      	b.n	8009806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	68b9      	ldr	r1, [r7, #8]
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f000 f838 	bl	8009820 <I2C_IsErrorOccurred>
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e02d      	b.n	8009816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ba:	f7fb fedb 	bl	8005574 <HAL_GetTick>
 80097be:	4602      	mov	r2, r0
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	1ad3      	subs	r3, r2, r3
 80097c4:	68ba      	ldr	r2, [r7, #8]
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d302      	bcc.n	80097d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11a      	bne.n	8009806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	f003 0320 	and.w	r3, r3, #32
 80097da:	2b20      	cmp	r3, #32
 80097dc:	d013      	beq.n	8009806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097e2:	f043 0220 	orr.w	r2, r3, #32
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e007      	b.n	8009816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b20      	cmp	r3, #32
 8009812:	d1c8      	bne.n	80097a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	@ 0x28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800983a:	2300      	movs	r3, #0
 800983c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	f003 0310 	and.w	r3, r3, #16
 8009848:	2b00      	cmp	r3, #0
 800984a:	d068      	beq.n	800991e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2210      	movs	r2, #16
 8009852:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009854:	e049      	b.n	80098ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985c:	d045      	beq.n	80098ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800985e:	f7fb fe89 	bl	8005574 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	429a      	cmp	r2, r3
 800986c:	d302      	bcc.n	8009874 <I2C_IsErrorOccurred+0x54>
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d13a      	bne.n	80098ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800987e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009886:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009896:	d121      	bne.n	80098dc <I2C_IsErrorOccurred+0xbc>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800989e:	d01d      	beq.n	80098dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80098a0:	7cfb      	ldrb	r3, [r7, #19]
 80098a2:	2b20      	cmp	r3, #32
 80098a4:	d01a      	beq.n	80098dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80098b6:	f7fb fe5d 	bl	8005574 <HAL_GetTick>
 80098ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098bc:	e00e      	b.n	80098dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80098be:	f7fb fe59 	bl	8005574 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b19      	cmp	r3, #25
 80098ca:	d907      	bls.n	80098dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	f043 0320 	orr.w	r3, r3, #32
 80098d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80098da:	e006      	b.n	80098ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	f003 0320 	and.w	r3, r3, #32
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	d1e9      	bne.n	80098be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d003      	beq.n	8009900 <I2C_IsErrorOccurred+0xe0>
 80098f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0aa      	beq.n	8009856 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009904:	2b00      	cmp	r3, #0
 8009906:	d103      	bne.n	8009910 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2220      	movs	r2, #32
 800990e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	f043 0304 	orr.w	r3, r3, #4
 8009916:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	f043 0308 	orr.w	r3, r3, #8
 8009958:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00b      	beq.n	800998c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	f043 0302 	orr.w	r3, r3, #2
 800997a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800998c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01c      	beq.n	80099ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff fe3b 	bl	8009610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6859      	ldr	r1, [r3, #4]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <I2C_IsErrorOccurred+0x1bc>)
 80099a6:	400b      	ands	r3, r1
 80099a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80099ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3728      	adds	r7, #40	@ 0x28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	fe00e800 	.word	0xfe00e800

080099e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	607b      	str	r3, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	817b      	strh	r3, [r7, #10]
 80099ee:	4613      	mov	r3, r2
 80099f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80099f2:	897b      	ldrh	r3, [r7, #10]
 80099f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80099f8:	7a7b      	ldrb	r3, [r7, #9]
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	0d5b      	lsrs	r3, r3, #21
 8009a1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009a1e:	4b08      	ldr	r3, [pc, #32]	@ (8009a40 <I2C_TransferConfig+0x60>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	43db      	mvns	r3, r3
 8009a24:	ea02 0103 	and.w	r1, r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	430a      	orrs	r2, r1
 8009a30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009a32:	bf00      	nop
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	03ff63ff 	.word	0x03ff63ff

08009a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d138      	bne.n	8009acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e032      	b.n	8009ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2224      	movs	r2, #36	@ 0x24
 8009a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f022 0201 	bic.w	r2, r2, #1
 8009a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2220      	movs	r2, #32
 8009abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e000      	b.n	8009ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009acc:	2302      	movs	r3, #2
  }
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b085      	sub	sp, #20
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
 8009ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d139      	bne.n	8009b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e033      	b.n	8009b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2224      	movs	r2, #36	@ 0x24
 8009b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0201 	bic.w	r2, r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	021b      	lsls	r3, r3, #8
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2220      	movs	r2, #32
 8009b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e000      	b.n	8009b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009b64:	2302      	movs	r3, #2
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
	...

08009b74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e0bf      	b.n	8009d06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d106      	bne.n	8009ba0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7f8 fea0 	bl	80028e0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	699a      	ldr	r2, [r3, #24]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009bb6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	6999      	ldr	r1, [r3, #24]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bcc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6899      	ldr	r1, [r3, #8]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	4b4a      	ldr	r3, [pc, #296]	@ (8009d10 <HAL_LTDC_Init+0x19c>)
 8009be8:	400b      	ands	r3, r1
 8009bea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	041b      	lsls	r3, r3, #16
 8009bf2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6899      	ldr	r1, [r3, #8]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	699a      	ldr	r2, [r3, #24]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68d9      	ldr	r1, [r3, #12]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4b3e      	ldr	r3, [pc, #248]	@ (8009d10 <HAL_LTDC_Init+0x19c>)
 8009c16:	400b      	ands	r3, r1
 8009c18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	041b      	lsls	r3, r3, #16
 8009c20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68d9      	ldr	r1, [r3, #12]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	431a      	orrs	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6919      	ldr	r1, [r3, #16]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	4b33      	ldr	r3, [pc, #204]	@ (8009d10 <HAL_LTDC_Init+0x19c>)
 8009c44:	400b      	ands	r3, r1
 8009c46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4c:	041b      	lsls	r3, r3, #16
 8009c4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6919      	ldr	r1, [r3, #16]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6959      	ldr	r1, [r3, #20]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	4b27      	ldr	r3, [pc, #156]	@ (8009d10 <HAL_LTDC_Init+0x19c>)
 8009c72:	400b      	ands	r3, r1
 8009c74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7a:	041b      	lsls	r3, r3, #16
 8009c7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	6959      	ldr	r1, [r3, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	430a      	orrs	r2, r1
 8009c92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0206 	orr.w	r2, r2, #6
 8009ce2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	f000f800 	.word	0xf000f800

08009d14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b084      	sub	sp, #16
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f003 0304 	and.w	r3, r3, #4
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d023      	beq.n	8009d7e <HAL_LTDC_IRQHandler+0x6a>
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	f003 0304 	and.w	r3, r3, #4
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01e      	beq.n	8009d7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 0204 	bic.w	r2, r2, #4
 8009d4e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2204      	movs	r2, #4
 8009d56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d5e:	f043 0201 	orr.w	r2, r3, #1
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2204      	movs	r2, #4
 8009d6c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f86f 	bl	8009e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d023      	beq.n	8009dd0 <HAL_LTDC_IRQHandler+0xbc>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f003 0302 	and.w	r3, r3, #2
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d01e      	beq.n	8009dd0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f022 0202 	bic.w	r2, r2, #2
 8009da0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2202      	movs	r2, #2
 8009da8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009db0:	f043 0202 	orr.w	r2, r3, #2
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f846 	bl	8009e5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01b      	beq.n	8009e12 <HAL_LTDC_IRQHandler+0xfe>
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d016      	beq.n	8009e12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f82f 	bl	8009e70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f003 0308 	and.w	r3, r3, #8
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01b      	beq.n	8009e54 <HAL_LTDC_IRQHandler+0x140>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f003 0308 	and.w	r3, r3, #8
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d016      	beq.n	8009e54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f022 0208 	bic.w	r2, r2, #8
 8009e34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2208      	movs	r2, #8
 8009e3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f818 	bl	8009e84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8009e54:	bf00      	nop
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009e98:	b5b0      	push	{r4, r5, r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	60f8      	str	r0, [r7, #12]
 8009ea0:	60b9      	str	r1, [r7, #8]
 8009ea2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_LTDC_ConfigLayer+0x1a>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e02c      	b.n	8009f0c <HAL_LTDC_ConfigLayer+0x74>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2134      	movs	r1, #52	@ 0x34
 8009ec8:	fb01 f303 	mul.w	r3, r1, r3
 8009ecc:	4413      	add	r3, r2
 8009ece:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	461d      	mov	r5, r3
 8009ed8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 f811 	bl	8009f14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bdb0      	pop	{r4, r5, r7, pc}

08009f14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b089      	sub	sp, #36	@ 0x24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f30:	4413      	add	r3, r2
 8009f32:	041b      	lsls	r3, r3, #16
 8009f34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	01db      	lsls	r3, r3, #7
 8009f40:	4413      	add	r3, r2
 8009f42:	3384      	adds	r3, #132	@ 0x84
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	01d2      	lsls	r2, r2, #7
 8009f50:	440a      	add	r2, r1
 8009f52:	3284      	adds	r2, #132	@ 0x84
 8009f54:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009f58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f6a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f6c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	01db      	lsls	r3, r3, #7
 8009f78:	440b      	add	r3, r1
 8009f7a:	3384      	adds	r3, #132	@ 0x84
 8009f7c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f92:	4413      	add	r3, r2
 8009f94:	041b      	lsls	r3, r3, #16
 8009f96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	01db      	lsls	r3, r3, #7
 8009fa2:	4413      	add	r3, r2
 8009fa4:	3384      	adds	r3, #132	@ 0x84
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	6812      	ldr	r2, [r2, #0]
 8009fac:	4611      	mov	r1, r2
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	01d2      	lsls	r2, r2, #7
 8009fb2:	440a      	add	r2, r1
 8009fb4:	3284      	adds	r2, #132	@ 0x84
 8009fb6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009fba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	689a      	ldr	r2, [r3, #8]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fca:	4413      	add	r3, r2
 8009fcc:	1c5a      	adds	r2, r3, #1
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	01db      	lsls	r3, r3, #7
 8009fd8:	440b      	add	r3, r1
 8009fda:	3384      	adds	r3, #132	@ 0x84
 8009fdc:	4619      	mov	r1, r3
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	01db      	lsls	r3, r3, #7
 8009fee:	4413      	add	r3, r2
 8009ff0:	3384      	adds	r3, #132	@ 0x84
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	6812      	ldr	r2, [r2, #0]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	01d2      	lsls	r2, r2, #7
 8009ffe:	440a      	add	r2, r1
 800a000:	3284      	adds	r2, #132	@ 0x84
 800a002:	f023 0307 	bic.w	r3, r3, #7
 800a006:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	461a      	mov	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	01db      	lsls	r3, r3, #7
 800a012:	4413      	add	r3, r2
 800a014:	3384      	adds	r3, #132	@ 0x84
 800a016:	461a      	mov	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	691b      	ldr	r3, [r3, #16]
 800a01c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a024:	021b      	lsls	r3, r3, #8
 800a026:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a02e:	041b      	lsls	r3, r3, #16
 800a030:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	061b      	lsls	r3, r3, #24
 800a038:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	01db      	lsls	r3, r3, #7
 800a044:	4413      	add	r3, r2
 800a046:	3384      	adds	r3, #132	@ 0x84
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	461a      	mov	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	01db      	lsls	r3, r3, #7
 800a054:	4413      	add	r3, r2
 800a056:	3384      	adds	r3, #132	@ 0x84
 800a058:	461a      	mov	r2, r3
 800a05a:	2300      	movs	r3, #0
 800a05c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a064:	461a      	mov	r2, r3
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	431a      	orrs	r2, r3
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4619      	mov	r1, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	01db      	lsls	r3, r3, #7
 800a078:	440b      	add	r3, r1
 800a07a:	3384      	adds	r3, #132	@ 0x84
 800a07c:	4619      	mov	r1, r3
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	4313      	orrs	r3, r2
 800a082:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	01db      	lsls	r3, r3, #7
 800a08e:	4413      	add	r3, r2
 800a090:	3384      	adds	r3, #132	@ 0x84
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	4611      	mov	r1, r2
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	01d2      	lsls	r2, r2, #7
 800a09e:	440a      	add	r2, r1
 800a0a0:	3284      	adds	r2, #132	@ 0x84
 800a0a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a0a6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	01db      	lsls	r3, r3, #7
 800a0b2:	4413      	add	r3, r2
 800a0b4:	3384      	adds	r3, #132	@ 0x84
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	695b      	ldr	r3, [r3, #20]
 800a0bc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	01db      	lsls	r3, r3, #7
 800a0c8:	4413      	add	r3, r2
 800a0ca:	3384      	adds	r3, #132	@ 0x84
 800a0cc:	69da      	ldr	r2, [r3, #28]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	01db      	lsls	r3, r3, #7
 800a0d8:	440b      	add	r3, r1
 800a0da:	3384      	adds	r3, #132	@ 0x84
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4b58      	ldr	r3, [pc, #352]	@ (800a240 <LTDC_SetConfig+0x32c>)
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	69da      	ldr	r2, [r3, #28]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	6809      	ldr	r1, [r1, #0]
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	01c9      	lsls	r1, r1, #7
 800a0f6:	4401      	add	r1, r0
 800a0f8:	3184      	adds	r1, #132	@ 0x84
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	01db      	lsls	r3, r3, #7
 800a108:	4413      	add	r3, r2
 800a10a:	3384      	adds	r3, #132	@ 0x84
 800a10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	01db      	lsls	r3, r3, #7
 800a118:	4413      	add	r3, r2
 800a11a:	3384      	adds	r3, #132	@ 0x84
 800a11c:	461a      	mov	r2, r3
 800a11e:	2300      	movs	r3, #0
 800a120:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	01db      	lsls	r3, r3, #7
 800a12c:	4413      	add	r3, r2
 800a12e:	3384      	adds	r3, #132	@ 0x84
 800a130:	461a      	mov	r2, r3
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a136:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d102      	bne.n	800a146 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a140:	2304      	movs	r3, #4
 800a142:	61fb      	str	r3, [r7, #28]
 800a144:	e01b      	b.n	800a17e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d102      	bne.n	800a154 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a14e:	2303      	movs	r3, #3
 800a150:	61fb      	str	r3, [r7, #28]
 800a152:	e014      	b.n	800a17e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b04      	cmp	r3, #4
 800a15a:	d00b      	beq.n	800a174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a160:	2b02      	cmp	r3, #2
 800a162:	d007      	beq.n	800a174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a168:	2b03      	cmp	r3, #3
 800a16a:	d003      	beq.n	800a174 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a170:	2b07      	cmp	r3, #7
 800a172:	d102      	bne.n	800a17a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a174:	2302      	movs	r3, #2
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e001      	b.n	800a17e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a17a:	2301      	movs	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	01db      	lsls	r3, r3, #7
 800a188:	4413      	add	r3, r2
 800a18a:	3384      	adds	r3, #132	@ 0x84
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	6812      	ldr	r2, [r2, #0]
 800a192:	4611      	mov	r1, r2
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	01d2      	lsls	r2, r2, #7
 800a198:	440a      	add	r2, r1
 800a19a:	3284      	adds	r2, #132	@ 0x84
 800a19c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a1a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a6:	69fa      	ldr	r2, [r7, #28]
 800a1a8:	fb02 f303 	mul.w	r3, r2, r3
 800a1ac:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	6859      	ldr	r1, [r3, #4]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	1acb      	subs	r3, r1, r3
 800a1b8:	69f9      	ldr	r1, [r7, #28]
 800a1ba:	fb01 f303 	mul.w	r3, r1, r3
 800a1be:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a1c0:	68f9      	ldr	r1, [r7, #12]
 800a1c2:	6809      	ldr	r1, [r1, #0]
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	01c9      	lsls	r1, r1, #7
 800a1ca:	4401      	add	r1, r0
 800a1cc:	3184      	adds	r1, #132	@ 0x84
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	01db      	lsls	r3, r3, #7
 800a1dc:	4413      	add	r3, r2
 800a1de:	3384      	adds	r3, #132	@ 0x84
 800a1e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	01db      	lsls	r3, r3, #7
 800a1ec:	440b      	add	r3, r1
 800a1ee:	3384      	adds	r3, #132	@ 0x84
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4b14      	ldr	r3, [pc, #80]	@ (800a244 <LTDC_SetConfig+0x330>)
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	01db      	lsls	r3, r3, #7
 800a202:	4413      	add	r3, r2
 800a204:	3384      	adds	r3, #132	@ 0x84
 800a206:	461a      	mov	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a20c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	01db      	lsls	r3, r3, #7
 800a218:	4413      	add	r3, r2
 800a21a:	3384      	adds	r3, #132	@ 0x84
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	4611      	mov	r1, r2
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	01d2      	lsls	r2, r2, #7
 800a228:	440a      	add	r2, r1
 800a22a:	3284      	adds	r2, #132	@ 0x84
 800a22c:	f043 0301 	orr.w	r3, r3, #1
 800a230:	6013      	str	r3, [r2, #0]
}
 800a232:	bf00      	nop
 800a234:	3724      	adds	r7, #36	@ 0x24
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	fffff8f8 	.word	0xfffff8f8
 800a244:	fffff800 	.word	0xfffff800

0800a248 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

#if !defined(POLARITIES_INVERSION_UPDATED)
  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800a25a:	2200      	movs	r2, #0
 800a25c:	e001      	b.n	800a262 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800a25e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800a26e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a272:	e000      	b.n	800a276 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 800a274:	2200      	movs	r2, #0
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800a282:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a286:	e000      	b.n	800a28a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 800a288:	2200      	movs	r2, #0
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
  hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29;
#endif /* POLARITIES_INVERSION_UPDATED */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a292:	1e5a      	subs	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	4413      	add	r3, r2
 800a2a2:	1e5a      	subs	r2, r3, #1
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2b0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2b6:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 800a2b8:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c6:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2cc:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2d2:	4413      	add	r3, r2
 800a2d4:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800a2da:	2300      	movs	r3, #0
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	370c      	adds	r7, #12
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b086      	sub	sp, #24
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e108      	b.n	800a50c <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d106      	bne.n	800a31a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7f8 ff2f 	bl	8003178 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2203      	movs	r2, #3
 800a31e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a328:	d102      	bne.n	800a330 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4618      	mov	r0, r3
 800a336:	f005 fa39 	bl	800f7ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6818      	ldr	r0, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7c1a      	ldrb	r2, [r3, #16]
 800a342:	f88d 2000 	strb.w	r2, [sp]
 800a346:	3304      	adds	r3, #4
 800a348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a34a:	f005 f933 	bl	800f5b4 <USB_CoreInit>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e0d5      	b.n	800a50c <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2100      	movs	r1, #0
 800a366:	4618      	mov	r0, r3
 800a368:	f005 fa31 	bl	800f7ce <USB_SetCurrentMode>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d005      	beq.n	800a37e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2202      	movs	r2, #2
 800a376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e0c6      	b.n	800a50c <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
 800a382:	e04a      	b.n	800a41a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a384:	7bfa      	ldrb	r2, [r7, #15]
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	4613      	mov	r3, r2
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	3315      	adds	r3, #21
 800a394:	2201      	movs	r2, #1
 800a396:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a398:	7bfa      	ldrb	r2, [r7, #15]
 800a39a:	6879      	ldr	r1, [r7, #4]
 800a39c:	4613      	mov	r3, r2
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	440b      	add	r3, r1
 800a3a6:	3314      	adds	r3, #20
 800a3a8:	7bfa      	ldrb	r2, [r7, #15]
 800a3aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a3ac:	7bfa      	ldrb	r2, [r7, #15]
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
 800a3b0:	b298      	uxth	r0, r3
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4613      	mov	r3, r2
 800a3b6:	00db      	lsls	r3, r3, #3
 800a3b8:	4413      	add	r3, r2
 800a3ba:	009b      	lsls	r3, r3, #2
 800a3bc:	440b      	add	r3, r1
 800a3be:	332e      	adds	r3, #46	@ 0x2e
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a3c4:	7bfa      	ldrb	r2, [r7, #15]
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	440b      	add	r3, r1
 800a3d2:	3318      	adds	r3, #24
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a3d8:	7bfa      	ldrb	r2, [r7, #15]
 800a3da:	6879      	ldr	r1, [r7, #4]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	440b      	add	r3, r1
 800a3e6:	331c      	adds	r3, #28
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a3ec:	7bfa      	ldrb	r2, [r7, #15]
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	4413      	add	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	440b      	add	r3, r1
 800a3fa:	3320      	adds	r3, #32
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a400:	7bfa      	ldrb	r2, [r7, #15]
 800a402:	6879      	ldr	r1, [r7, #4]
 800a404:	4613      	mov	r3, r2
 800a406:	00db      	lsls	r3, r3, #3
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	3324      	adds	r3, #36	@ 0x24
 800a410:	2200      	movs	r2, #0
 800a412:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a414:	7bfb      	ldrb	r3, [r7, #15]
 800a416:	3301      	adds	r3, #1
 800a418:	73fb      	strb	r3, [r7, #15]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	791b      	ldrb	r3, [r3, #4]
 800a41e:	7bfa      	ldrb	r2, [r7, #15]
 800a420:	429a      	cmp	r2, r3
 800a422:	d3af      	bcc.n	800a384 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
 800a428:	e044      	b.n	800a4b4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a42a:	7bfa      	ldrb	r2, [r7, #15]
 800a42c:	6879      	ldr	r1, [r7, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	440b      	add	r3, r1
 800a438:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800a43c:	2200      	movs	r2, #0
 800a43e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a440:	7bfa      	ldrb	r2, [r7, #15]
 800a442:	6879      	ldr	r1, [r7, #4]
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	4413      	add	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	440b      	add	r3, r1
 800a44e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800a452:	7bfa      	ldrb	r2, [r7, #15]
 800a454:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a456:	7bfa      	ldrb	r2, [r7, #15]
 800a458:	6879      	ldr	r1, [r7, #4]
 800a45a:	4613      	mov	r3, r2
 800a45c:	00db      	lsls	r3, r3, #3
 800a45e:	4413      	add	r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	440b      	add	r3, r1
 800a464:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a46c:	7bfa      	ldrb	r2, [r7, #15]
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	4613      	mov	r3, r2
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	4413      	add	r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	440b      	add	r3, r1
 800a47a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800a47e:	2200      	movs	r2, #0
 800a480:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a482:	7bfa      	ldrb	r2, [r7, #15]
 800a484:	6879      	ldr	r1, [r7, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	440b      	add	r3, r1
 800a490:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800a494:	2200      	movs	r2, #0
 800a496:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a498:	7bfa      	ldrb	r2, [r7, #15]
 800a49a:	6879      	ldr	r1, [r7, #4]
 800a49c:	4613      	mov	r3, r2
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	440b      	add	r3, r1
 800a4a6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	791b      	ldrb	r3, [r3, #4]
 800a4b8:	7bfa      	ldrb	r2, [r7, #15]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d3b5      	bcc.n	800a42a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6818      	ldr	r0, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	7c1a      	ldrb	r2, [r3, #16]
 800a4c6:	f88d 2000 	strb.w	r2, [sp]
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4ce:	f005 f9cb 	bl	800f868 <USB_DevInit>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e013      	b.n	800a50c <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	7b1b      	ldrb	r3, [r3, #12]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d102      	bne.n	800a500 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 ff3a 	bl	800b374 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4618      	mov	r0, r3
 800a506:	f005 fceb 	bl	800fee0 <USB_DevDisconnect>

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a514:	b590      	push	{r4, r7, lr}
 800a516:	b08d      	sub	sp, #52	@ 0x34
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f005 fd8c 	bl	8010048 <USB_GetMode>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	f040 84b9 	bne.w	800aeaa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4618      	mov	r0, r3
 800a53e:	f005 fcf0 	bl	800ff22 <USB_ReadInterrupts>
 800a542:	4603      	mov	r3, r0
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 84af 	beq.w	800aea8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a550:	689b      	ldr	r3, [r3, #8]
 800a552:	0a1b      	lsrs	r3, r3, #8
 800a554:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4618      	mov	r0, r3
 800a564:	f005 fcdd 	bl	800ff22 <USB_ReadInterrupts>
 800a568:	4603      	mov	r3, r0
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b02      	cmp	r3, #2
 800a570:	d107      	bne.n	800a582 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	695a      	ldr	r2, [r3, #20]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f002 0202 	and.w	r2, r2, #2
 800a580:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f005 fccb 	bl	800ff22 <USB_ReadInterrupts>
 800a58c:	4603      	mov	r3, r0
 800a58e:	f003 0310 	and.w	r3, r3, #16
 800a592:	2b10      	cmp	r3, #16
 800a594:	d161      	bne.n	800a65a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	699a      	ldr	r2, [r3, #24]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0210 	bic.w	r2, r2, #16
 800a5a4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	f003 020f 	and.w	r2, r3, #15
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	4413      	add	r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	0c5b      	lsrs	r3, r3, #17
 800a5ca:	f003 030f 	and.w	r3, r3, #15
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d124      	bne.n	800a61c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800a5d8:	4013      	ands	r3, r2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d035      	beq.n	800a64a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	091b      	lsrs	r3, r3, #4
 800a5e6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a5e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	6a38      	ldr	r0, [r7, #32]
 800a5f2:	f005 fc1d 	bl	800fe30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	68da      	ldr	r2, [r3, #12]
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	091b      	lsrs	r3, r3, #4
 800a5fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a602:	441a      	add	r2, r3
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	695a      	ldr	r2, [r3, #20]
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	091b      	lsrs	r3, r3, #4
 800a610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a614:	441a      	add	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	615a      	str	r2, [r3, #20]
 800a61a:	e016      	b.n	800a64a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	0c5b      	lsrs	r3, r3, #17
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	2b06      	cmp	r3, #6
 800a626:	d110      	bne.n	800a64a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a62e:	2208      	movs	r2, #8
 800a630:	4619      	mov	r1, r3
 800a632:	6a38      	ldr	r0, [r7, #32]
 800a634:	f005 fbfc 	bl	800fe30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	695a      	ldr	r2, [r3, #20]
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	091b      	lsrs	r3, r3, #4
 800a640:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a644:	441a      	add	r2, r3
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	699a      	ldr	r2, [r3, #24]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f042 0210 	orr.w	r2, r2, #16
 800a658:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4618      	mov	r0, r3
 800a660:	f005 fc5f 	bl	800ff22 <USB_ReadInterrupts>
 800a664:	4603      	mov	r3, r0
 800a666:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a66a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a66e:	f040 80a7 	bne.w	800a7c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4618      	mov	r0, r3
 800a67c:	f005 fc64 	bl	800ff48 <USB_ReadDevAllOutEpInterrupt>
 800a680:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800a682:	e099      	b.n	800a7b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f000 808e 	beq.w	800a7ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	4611      	mov	r1, r2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f005 fc88 	bl	800ffb0 <USB_ReadDevOutEPInterrupt>
 800a6a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00c      	beq.n	800a6c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a6be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 fd29 	bl	800b118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00c      	beq.n	800a6ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2308      	movs	r3, #8
 800a6e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a6e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fdff 	bl	800b2e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d008      	beq.n	800a706 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a700:	461a      	mov	r2, r3
 800a702:	2310      	movs	r3, #16
 800a704:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f003 0302 	and.w	r3, r3, #2
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d030      	beq.n	800a772 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a718:	2b80      	cmp	r3, #128	@ 0x80
 800a71a:	d109      	bne.n	800a730 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	69fa      	ldr	r2, [r7, #28]
 800a726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a72a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a72e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a732:	4613      	mov	r3, r2
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4413      	add	r3, r2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	4413      	add	r3, r2
 800a742:	3304      	adds	r3, #4
 800a744:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	78db      	ldrb	r3, [r3, #3]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d108      	bne.n	800a760 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	2200      	movs	r2, #0
 800a752:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a756:	b2db      	uxtb	r3, r3
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fbf2 	bl	800af44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	4413      	add	r3, r2
 800a768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a76c:	461a      	mov	r2, r3
 800a76e:	2302      	movs	r3, #2
 800a770:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	f003 0320 	and.w	r3, r3, #32
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d008      	beq.n	800a78e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a77e:	015a      	lsls	r2, r3, #5
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	4413      	add	r3, r2
 800a784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a788:	461a      	mov	r2, r3
 800a78a:	2320      	movs	r3, #32
 800a78c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d009      	beq.n	800a7ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a7aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b4:	085b      	lsrs	r3, r3, #1
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f47f af62 	bne.w	800a684 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f005 fbac 	bl	800ff22 <USB_ReadInterrupts>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a7d4:	f040 80db 	bne.w	800a98e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f005 fbcd 	bl	800ff7c <USB_ReadDevAllInEpInterrupt>
 800a7e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800a7e8:	e0cd      	b.n	800a986 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a7ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ec:	f003 0301 	and.w	r3, r3, #1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80c2 	beq.w	800a97a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	4611      	mov	r1, r2
 800a800:	4618      	mov	r0, r3
 800a802:	f005 fbf3 	bl	800ffec <USB_ReadDevInEPInterrupt>
 800a806:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f003 0301 	and.w	r3, r3, #1
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d057      	beq.n	800a8c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	2201      	movs	r2, #1
 800a81a:	fa02 f303 	lsl.w	r3, r2, r3
 800a81e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	43db      	mvns	r3, r3
 800a82c:	69f9      	ldr	r1, [r7, #28]
 800a82e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a832:	4013      	ands	r3, r2
 800a834:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a842:	461a      	mov	r2, r3
 800a844:	2301      	movs	r3, #1
 800a846:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	799b      	ldrb	r3, [r3, #6]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d132      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a854:	4613      	mov	r3, r2
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	4413      	add	r3, r2
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	3320      	adds	r3, #32
 800a860:	6819      	ldr	r1, [r3, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a866:	4613      	mov	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	4403      	add	r3, r0
 800a870:	331c      	adds	r3, #28
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4419      	add	r1, r3
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a87a:	4613      	mov	r3, r2
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	4413      	add	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4403      	add	r3, r0
 800a884:	3320      	adds	r3, #32
 800a886:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d113      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x3a2>
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	440b      	add	r3, r1
 800a89c:	3324      	adds	r3, #36	@ 0x24
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d108      	bne.n	800a8b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	f005 fbfb 	bl	80100ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fb03 	bl	800aec8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d008      	beq.n	800a8de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d8:	461a      	mov	r2, r3
 800a8da:	2308      	movs	r3, #8
 800a8dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d008      	beq.n	800a8fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	2310      	movs	r3, #16
 800a8f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d008      	beq.n	800a916 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a910:	461a      	mov	r2, r3
 800a912:	2340      	movs	r3, #64	@ 0x40
 800a914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d023      	beq.n	800a968 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a922:	6a38      	ldr	r0, [r7, #32]
 800a924:	f005 f8fe 	bl	800fb24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a92a:	4613      	mov	r3, r2
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	4413      	add	r3, r2
 800a930:	009b      	lsls	r3, r3, #2
 800a932:	3310      	adds	r3, #16
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	4413      	add	r3, r2
 800a938:	3304      	adds	r3, #4
 800a93a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	78db      	ldrb	r3, [r3, #3]
 800a940:	2b01      	cmp	r3, #1
 800a942:	d108      	bne.n	800a956 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2200      	movs	r2, #0
 800a948:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fb03 	bl	800af5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a962:	461a      	mov	r2, r3
 800a964:	2302      	movs	r3, #2
 800a966:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 fb42 	bl	800affe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97c:	3301      	adds	r3, #1
 800a97e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800a986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f47f af2e 	bne.w	800a7ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4618      	mov	r0, r3
 800a994:	f005 fac5 	bl	800ff22 <USB_ReadInterrupts>
 800a998:	4603      	mov	r3, r0
 800a99a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a99e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9a2:	d122      	bne.n	800a9ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9b2:	f023 0301 	bic.w	r3, r3, #1
 800a9b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d108      	bne.n	800a9d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fcf5 	bl	800b3bc <HAL_PCDEx_LPM_Callback>
 800a9d2:	e002      	b.n	800a9da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 faab 	bl	800af30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	695a      	ldr	r2, [r3, #20]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800a9e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f005 fa97 	bl	800ff22 <USB_ReadInterrupts>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9fe:	d112      	bne.n	800aa26 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d102      	bne.n	800aa16 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 fa83 	bl	800af1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	695a      	ldr	r2, [r3, #20]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800aa24:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f005 fa79 	bl	800ff22 <USB_ReadInterrupts>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa3a:	d121      	bne.n	800aa80 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	695a      	ldr	r2, [r3, #20]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800aa4a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d111      	bne.n	800aa7a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa64:	089b      	lsrs	r3, r3, #2
 800aa66:	f003 020f 	and.w	r2, r3, #15
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800aa70:	2101      	movs	r1, #1
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fca2 	bl	800b3bc <HAL_PCDEx_LPM_Callback>
 800aa78:	e002      	b.n	800aa80 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa4e 	bl	800af1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f005 fa4c 	bl	800ff22 <USB_ReadInterrupts>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aa90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa94:	f040 80b7 	bne.w	800ac06 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2110      	movs	r1, #16
 800aab2:	4618      	mov	r0, r3
 800aab4:	f005 f836 	bl	800fb24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aab8:	2300      	movs	r3, #0
 800aaba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aabc:	e046      	b.n	800ab4c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aabe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaca:	461a      	mov	r2, r3
 800aacc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aad0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aae2:	0151      	lsls	r1, r2, #5
 800aae4:	69fa      	ldr	r2, [r7, #28]
 800aae6:	440a      	add	r2, r1
 800aae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aaf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800aaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aafe:	461a      	mov	r2, r3
 800ab00:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ab04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ab06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab16:	0151      	lsls	r1, r2, #5
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	440a      	add	r2, r1
 800ab1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab20:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ab26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab36:	0151      	lsls	r1, r2, #5
 800ab38:	69fa      	ldr	r2, [r7, #28]
 800ab3a:	440a      	add	r2, r1
 800ab3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab48:	3301      	adds	r3, #1
 800ab4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	791b      	ldrb	r3, [r3, #4]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d3b2      	bcc.n	800aabe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab5e:	69db      	ldr	r3, [r3, #28]
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab66:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800ab6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7bdb      	ldrb	r3, [r3, #15]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d016      	beq.n	800aba2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab84:	f043 030b 	orr.w	r3, r3, #11
 800ab88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab94:	69fa      	ldr	r2, [r7, #28]
 800ab96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab9a:	f043 030b 	orr.w	r3, r3, #11
 800ab9e:	6453      	str	r3, [r2, #68]	@ 0x44
 800aba0:	e015      	b.n	800abce <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb0:	4619      	mov	r1, r3
 800abb2:	f242 032b 	movw	r3, #8235	@ 0x202b
 800abb6:	4313      	orrs	r3, r2
 800abb8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	69fa      	ldr	r2, [r7, #28]
 800abc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abc8:	f043 030b 	orr.w	r3, r3, #11
 800abcc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	69fa      	ldr	r2, [r7, #28]
 800abd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800abdc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800abe0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800abf0:	461a      	mov	r2, r3
 800abf2:	f005 fa5b 	bl	80100ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	695a      	ldr	r2, [r3, #20]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ac04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f005 f989 	bl	800ff22 <USB_ReadInterrupts>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac1a:	d123      	bne.n	800ac64 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f005 fa1f 	bl	8010064 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f004 fff3 	bl	800fc16 <USB_GetDevSpeed>
 800ac30:	4603      	mov	r3, r0
 800ac32:	461a      	mov	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681c      	ldr	r4, [r3, #0]
 800ac3c:	f001 f9b0 	bl	800bfa0 <HAL_RCC_GetHCLKFreq>
 800ac40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ac46:	461a      	mov	r2, r3
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f004 fd0d 	bl	800f668 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f95a 	bl	800af08 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	695a      	ldr	r2, [r3, #20]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800ac62:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f005 f95a 	bl	800ff22 <USB_ReadInterrupts>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	f003 0308 	and.w	r3, r3, #8
 800ac74:	2b08      	cmp	r3, #8
 800ac76:	d10a      	bne.n	800ac8e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f93b 	bl	800aef4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	695a      	ldr	r2, [r3, #20]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f002 0208 	and.w	r2, r2, #8
 800ac8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f005 f945 	bl	800ff22 <USB_ReadInterrupts>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac9e:	2b80      	cmp	r3, #128	@ 0x80
 800aca0:	d123      	bne.n	800acea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	699b      	ldr	r3, [r3, #24]
 800aca6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acae:	2301      	movs	r3, #1
 800acb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800acb2:	e014      	b.n	800acde <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acb8:	4613      	mov	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	2b01      	cmp	r3, #1
 800acca:	d105      	bne.n	800acd8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f962 	bl	800af9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	3301      	adds	r3, #1
 800acdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	791b      	ldrb	r3, [r3, #4]
 800ace2:	461a      	mov	r2, r3
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d3e4      	bcc.n	800acb4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4618      	mov	r0, r3
 800acf0:	f005 f917 	bl	800ff22 <USB_ReadInterrupts>
 800acf4:	4603      	mov	r3, r0
 800acf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acfe:	d13c      	bne.n	800ad7a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad00:	2301      	movs	r3, #1
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad04:	e02b      	b.n	800ad5e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad16:	6879      	ldr	r1, [r7, #4]
 800ad18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	3318      	adds	r3, #24
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d115      	bne.n	800ad58 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ad2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da12      	bge.n	800ad58 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ad32:	6879      	ldr	r1, [r7, #4]
 800ad34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad36:	4613      	mov	r3, r2
 800ad38:	00db      	lsls	r3, r3, #3
 800ad3a:	4413      	add	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	440b      	add	r3, r1
 800ad40:	3317      	adds	r3, #23
 800ad42:	2201      	movs	r2, #1
 800ad44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f922 	bl	800af9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	791b      	ldrb	r3, [r3, #4]
 800ad62:	461a      	mov	r2, r3
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d3cd      	bcc.n	800ad06 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	695a      	ldr	r2, [r3, #20]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ad78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f005 f8cf 	bl	800ff22 <USB_ReadInterrupts>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad8e:	d156      	bne.n	800ae3e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad90:	2301      	movs	r3, #1
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad94:	e045      	b.n	800ae22 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ad96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad98:	015a      	lsls	r2, r3, #5
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adaa:	4613      	mov	r3, r2
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	4413      	add	r3, r2
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	440b      	add	r3, r1
 800adb4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d12e      	bne.n	800ae1c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800adbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	da2b      	bge.n	800ae1c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800add0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800add4:	429a      	cmp	r2, r3
 800add6:	d121      	bne.n	800ae1c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800addc:	4613      	mov	r3, r2
 800adde:	00db      	lsls	r3, r3, #3
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800adea:	2201      	movs	r2, #1
 800adec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	69fa      	ldr	r2, [r7, #28]
 800ae10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ae18:	6053      	str	r3, [r2, #4]
            break;
 800ae1a:	e008      	b.n	800ae2e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	3301      	adds	r3, #1
 800ae20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	791b      	ldrb	r3, [r3, #4]
 800ae26:	461a      	mov	r2, r3
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d3b3      	bcc.n	800ad96 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	695a      	ldr	r2, [r3, #20]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800ae3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f005 f86d 	bl	800ff22 <USB_ReadInterrupts>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ae4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae52:	d10a      	bne.n	800ae6a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f88d 	bl	800af74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695a      	ldr	r2, [r3, #20]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800ae68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f005 f857 	bl	800ff22 <USB_ReadInterrupts>
 800ae74:	4603      	mov	r3, r0
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d115      	bne.n	800aeaa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d002      	beq.n	800ae96 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f879 	bl	800af88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6859      	ldr	r1, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	430a      	orrs	r2, r1
 800aea4:	605a      	str	r2, [r3, #4]
 800aea6:	e000      	b.n	800aeaa <HAL_PCD_IRQHandler+0x996>
      return;
 800aea8:	bf00      	nop
    }
  }
}
 800aeaa:	3734      	adds	r7, #52	@ 0x34
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd90      	pop	{r4, r7, pc}

0800aeb0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800aee8:	bf00      	nop
 800aeea:	370c      	adds	r7, #12
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	460b      	mov	r3, r1
 800af4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800afa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afac:	2b00      	cmp	r3, #0
 800afae:	da0c      	bge.n	800afca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	f003 020f 	and.w	r2, r3, #15
 800afb6:	4613      	mov	r3, r2
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4413      	add	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	3310      	adds	r3, #16
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	4413      	add	r3, r2
 800afc4:	3304      	adds	r3, #4
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e00c      	b.n	800afe4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	f003 020f 	and.w	r2, r3, #15
 800afd0:	4613      	mov	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	4413      	add	r3, r2
 800afe0:	3304      	adds	r3, #4
 800afe2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	68f9      	ldr	r1, [r7, #12]
 800afea:	4618      	mov	r0, r3
 800afec:	f004 fe38 	bl	800fc60 <USB_EPStopXfer>
 800aff0:	4603      	mov	r3, r0
 800aff2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800aff4:	7afb      	ldrb	r3, [r7, #11]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b08a      	sub	sp, #40	@ 0x28
 800b002:	af02      	add	r7, sp, #8
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	4613      	mov	r3, r2
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	4413      	add	r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	3310      	adds	r3, #16
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4413      	add	r3, r2
 800b022:	3304      	adds	r3, #4
 800b024:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	695a      	ldr	r2, [r3, #20]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d901      	bls.n	800b036 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e06b      	b.n	800b10e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	691a      	ldr	r2, [r3, #16]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d902      	bls.n	800b052 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	3303      	adds	r3, #3
 800b056:	089b      	lsrs	r3, r3, #2
 800b058:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b05a:	e02a      	b.n	800b0b2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	691a      	ldr	r2, [r3, #16]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	695b      	ldr	r3, [r3, #20]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	69fa      	ldr	r2, [r7, #28]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d902      	bls.n	800b078 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	3303      	adds	r3, #3
 800b07c:	089b      	lsrs	r3, r3, #2
 800b07e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68d9      	ldr	r1, [r3, #12]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	b2da      	uxtb	r2, r3
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	4603      	mov	r3, r0
 800b094:	6978      	ldr	r0, [r7, #20]
 800b096:	f004 fe8d 	bl	800fdb4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	68da      	ldr	r2, [r3, #12]
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	695a      	ldr	r2, [r3, #20]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	441a      	add	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	015a      	lsls	r2, r3, #5
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d809      	bhi.n	800b0dc <PCD_WriteEmptyTxFifo+0xde>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	695a      	ldr	r2, [r3, #20]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d203      	bcs.n	800b0dc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d1bf      	bne.n	800b05c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d811      	bhi.n	800b10c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	f003 030f 	and.w	r3, r3, #15
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	43db      	mvns	r3, r3
 800b102:	6939      	ldr	r1, [r7, #16]
 800b104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b108:	4013      	ands	r3, r2
 800b10a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3720      	adds	r7, #32
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
	...

0800b118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b088      	sub	sp, #32
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	333c      	adds	r3, #60	@ 0x3c
 800b130:	3304      	adds	r3, #4
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	015a      	lsls	r2, r3, #5
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	4413      	add	r3, r2
 800b13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	799b      	ldrb	r3, [r3, #6]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d17b      	bne.n	800b246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	f003 0308 	and.w	r3, r3, #8
 800b154:	2b00      	cmp	r3, #0
 800b156:	d015      	beq.n	800b184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	4a61      	ldr	r2, [pc, #388]	@ (800b2e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	f240 80b9 	bls.w	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 80b3 	beq.w	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17a:	461a      	mov	r2, r3
 800b17c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b180:	6093      	str	r3, [r2, #8]
 800b182:	e0a7      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	f003 0320 	and.w	r3, r3, #32
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d009      	beq.n	800b1a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	4413      	add	r3, r2
 800b196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b19a:	461a      	mov	r2, r3
 800b19c:	2320      	movs	r3, #32
 800b19e:	6093      	str	r3, [r2, #8]
 800b1a0:	e098      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f040 8093 	bne.w	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	4a4b      	ldr	r2, [pc, #300]	@ (800b2e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d90f      	bls.n	800b1d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00a      	beq.n	800b1d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b1d2:	6093      	str	r3, [r2, #8]
 800b1d4:	e07e      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b1d6:	683a      	ldr	r2, [r7, #0]
 800b1d8:	4613      	mov	r3, r2
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b1e4:	687a      	ldr	r2, [r7, #4]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	3304      	adds	r3, #4
 800b1ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6a1a      	ldr	r2, [r3, #32]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	0159      	lsls	r1, r3, #5
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	440b      	add	r3, r1
 800b1f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1fc:	691b      	ldr	r3, [r3, #16]
 800b1fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b202:	1ad2      	subs	r2, r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d114      	bne.n	800b238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d109      	bne.n	800b22a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b220:	461a      	mov	r2, r3
 800b222:	2101      	movs	r1, #1
 800b224:	f004 ff42 	bl	80100ac <USB_EP0_OutStart>
 800b228:	e006      	b.n	800b238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	695b      	ldr	r3, [r3, #20]
 800b232:	441a      	add	r2, r3
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7ff fe36 	bl	800aeb0 <HAL_PCD_DataOutStageCallback>
 800b244:	e046      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	4a26      	ldr	r2, [pc, #152]	@ (800b2e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d124      	bne.n	800b298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b264:	461a      	mov	r2, r3
 800b266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b26a:	6093      	str	r3, [r2, #8]
 800b26c:	e032      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f003 0320 	and.w	r3, r3, #32
 800b274:	2b00      	cmp	r3, #0
 800b276:	d008      	beq.n	800b28a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b284:	461a      	mov	r2, r3
 800b286:	2320      	movs	r3, #32
 800b288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fe0d 	bl	800aeb0 <HAL_PCD_DataOutStageCallback>
 800b296:	e01d      	b.n	800b2d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d114      	bne.n	800b2c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b29e:	6879      	ldr	r1, [r7, #4]
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	4613      	mov	r3, r2
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	4413      	add	r3, r2
 800b2a8:	009b      	lsls	r3, r3, #2
 800b2aa:	440b      	add	r3, r1
 800b2ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d108      	bne.n	800b2c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6818      	ldr	r0, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	f004 fef2 	bl	80100ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff fdee 	bl	800aeb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b2d4:	2300      	movs	r3, #0
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	4f54300a 	.word	0x4f54300a
 800b2e4:	4f54310a 	.word	0x4f54310a

0800b2e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b086      	sub	sp, #24
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	333c      	adds	r3, #60	@ 0x3c
 800b300:	3304      	adds	r3, #4
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	015a      	lsls	r2, r3, #5
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	4413      	add	r3, r2
 800b30e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4a15      	ldr	r2, [pc, #84]	@ (800b370 <PCD_EP_OutSetupPacket_int+0x88>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d90e      	bls.n	800b33c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b324:	2b00      	cmp	r3, #0
 800b326:	d009      	beq.n	800b33c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b334:	461a      	mov	r2, r3
 800b336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b33a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff fdcf 	bl	800aee0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4a0a      	ldr	r2, [pc, #40]	@ (800b370 <PCD_EP_OutSetupPacket_int+0x88>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d90c      	bls.n	800b364 <PCD_EP_OutSetupPacket_int+0x7c>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	799b      	ldrb	r3, [r3, #6]
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d108      	bne.n	800b364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6818      	ldr	r0, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b35c:	461a      	mov	r2, r3
 800b35e:	2101      	movs	r1, #1
 800b360:	f004 fea4 	bl	80100ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	3718      	adds	r7, #24
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	4f54300a 	.word	0x4f54300a

0800b374 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2201      	movs	r2, #1
 800b386:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b3a2:	4b05      	ldr	r3, [pc, #20]	@ (800b3b8 <HAL_PCDEx_ActivateLPM+0x44>)
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	10000003 	.word	0x10000003

0800b3bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800b3c8:	bf00      	nop
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3d8:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a04      	ldr	r2, [pc, #16]	@ (800b3f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b3de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3e2:	6013      	str	r3, [r2, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	40007000 	.word	0x40007000

0800b3f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b3fe:	4b23      	ldr	r3, [pc, #140]	@ (800b48c <HAL_PWREx_EnableOverDrive+0x98>)
 800b400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b402:	4a22      	ldr	r2, [pc, #136]	@ (800b48c <HAL_PWREx_EnableOverDrive+0x98>)
 800b404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b408:	6413      	str	r3, [r2, #64]	@ 0x40
 800b40a:	4b20      	ldr	r3, [pc, #128]	@ (800b48c <HAL_PWREx_EnableOverDrive+0x98>)
 800b40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b412:	603b      	str	r3, [r7, #0]
 800b414:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b416:	4b1e      	ldr	r3, [pc, #120]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a1d      	ldr	r2, [pc, #116]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b41c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b420:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b422:	f7fa f8a7 	bl	8005574 <HAL_GetTick>
 800b426:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b428:	e009      	b.n	800b43e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b42a:	f7fa f8a3 	bl	8005574 <HAL_GetTick>
 800b42e:	4602      	mov	r2, r0
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b438:	d901      	bls.n	800b43e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b43a:	2303      	movs	r3, #3
 800b43c:	e022      	b.n	800b484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b43e:	4b14      	ldr	r3, [pc, #80]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b44a:	d1ee      	bne.n	800b42a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b44c:	4b10      	ldr	r3, [pc, #64]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a0f      	ldr	r2, [pc, #60]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b458:	f7fa f88c 	bl	8005574 <HAL_GetTick>
 800b45c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b45e:	e009      	b.n	800b474 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b460:	f7fa f888 	bl	8005574 <HAL_GetTick>
 800b464:	4602      	mov	r2, r0
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b46e:	d901      	bls.n	800b474 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e007      	b.n	800b484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b474:	4b06      	ldr	r3, [pc, #24]	@ (800b490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b47c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b480:	d1ee      	bne.n	800b460 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	40023800 	.word	0x40023800
 800b490:	40007000 	.word	0x40007000

0800b494 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af02      	add	r7, sp, #8
 800b49a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800b49c:	f7fa f86a 	bl	8005574 <HAL_GetTick>
 800b4a0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d101      	bne.n	800b4ac <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e067      	b.n	800b57c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10b      	bne.n	800b4d0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f7f7 fa33 	bl	800292c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800b4c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f85e 	bl	800b58c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	021a      	lsls	r2, r3, #8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	430a      	orrs	r2, r1
 800b4e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2120      	movs	r1, #32
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 f856 	bl	800b5a8 <QSPI_WaitFlagStateUntilTimeout>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800b500:	7afb      	ldrb	r3, [r7, #11]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d135      	bne.n	800b572 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	4b1d      	ldr	r3, [pc, #116]	@ (800b584 <HAL_QSPI_Init+0xf0>)
 800b50e:	4013      	ands	r3, r2
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	6852      	ldr	r2, [r2, #4]
 800b514:	0611      	lsls	r1, r2, #24
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	68d2      	ldr	r2, [r2, #12]
 800b51a:	4311      	orrs	r1, r2
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	69d2      	ldr	r2, [r2, #28]
 800b520:	4311      	orrs	r1, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	6a12      	ldr	r2, [r2, #32]
 800b526:	4311      	orrs	r1, r2
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	4b14      	ldr	r3, [pc, #80]	@ (800b588 <HAL_QSPI_Init+0xf4>)
 800b538:	4013      	ands	r3, r2
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6912      	ldr	r2, [r2, #16]
 800b53e:	0411      	lsls	r1, r2, #16
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6952      	ldr	r2, [r2, #20]
 800b544:	4311      	orrs	r1, r2
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	6992      	ldr	r2, [r2, #24]
 800b54a:	4311      	orrs	r1, r2
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	430b      	orrs	r3, r1
 800b552:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0201 	orr.w	r2, r2, #1
 800b562:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800b57a:	7afb      	ldrb	r3, [r7, #11]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3710      	adds	r7, #16
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	00ffff2f 	.word	0x00ffff2f
 800b588:	ffe0f8fe 	.word	0xffe0f8fe

0800b58c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800b59c:	bf00      	nop
 800b59e:	370c      	adds	r7, #12
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	60f8      	str	r0, [r7, #12]
 800b5b0:	60b9      	str	r1, [r7, #8]
 800b5b2:	603b      	str	r3, [r7, #0]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b5b8:	e01a      	b.n	800b5f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d016      	beq.n	800b5f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5c2:	f7f9 ffd7 	bl	8005574 <HAL_GetTick>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	1ad3      	subs	r3, r2, r3
 800b5cc:	69ba      	ldr	r2, [r7, #24]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d302      	bcc.n	800b5d8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2204      	movs	r2, #4
 800b5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5e4:	f043 0201 	orr.w	r2, r3, #1
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e00e      	b.n	800b60e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	689a      	ldr	r2, [r3, #8]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bf14      	ite	ne
 800b5fe:	2301      	movne	r3, #1
 800b600:	2300      	moveq	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	461a      	mov	r2, r3
 800b606:	79fb      	ldrb	r3, [r7, #7]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d1d6      	bne.n	800b5ba <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
	...

0800b618 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b620:	2300      	movs	r3, #0
 800b622:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e29b      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	f000 8087 	beq.w	800b74a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b63c:	4b96      	ldr	r3, [pc, #600]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f003 030c 	and.w	r3, r3, #12
 800b644:	2b04      	cmp	r3, #4
 800b646:	d00c      	beq.n	800b662 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b648:	4b93      	ldr	r3, [pc, #588]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 030c 	and.w	r3, r3, #12
 800b650:	2b08      	cmp	r3, #8
 800b652:	d112      	bne.n	800b67a <HAL_RCC_OscConfig+0x62>
 800b654:	4b90      	ldr	r3, [pc, #576]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b65c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b660:	d10b      	bne.n	800b67a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b662:	4b8d      	ldr	r3, [pc, #564]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d06c      	beq.n	800b748 <HAL_RCC_OscConfig+0x130>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d168      	bne.n	800b748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b676:	2301      	movs	r3, #1
 800b678:	e275      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b682:	d106      	bne.n	800b692 <HAL_RCC_OscConfig+0x7a>
 800b684:	4b84      	ldr	r3, [pc, #528]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a83      	ldr	r2, [pc, #524]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b68a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b68e:	6013      	str	r3, [r2, #0]
 800b690:	e02e      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d10c      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x9c>
 800b69a:	4b7f      	ldr	r3, [pc, #508]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a7e      	ldr	r2, [pc, #504]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	4b7c      	ldr	r3, [pc, #496]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a7b      	ldr	r2, [pc, #492]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e01d      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b6bc:	d10c      	bne.n	800b6d8 <HAL_RCC_OscConfig+0xc0>
 800b6be:	4b76      	ldr	r3, [pc, #472]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a75      	ldr	r2, [pc, #468]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	4b73      	ldr	r3, [pc, #460]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a72      	ldr	r2, [pc, #456]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	e00b      	b.n	800b6f0 <HAL_RCC_OscConfig+0xd8>
 800b6d8:	4b6f      	ldr	r3, [pc, #444]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a6e      	ldr	r2, [pc, #440]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	4b6c      	ldr	r3, [pc, #432]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a6b      	ldr	r2, [pc, #428]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b6ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b6ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d013      	beq.n	800b720 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f8:	f7f9 ff3c 	bl	8005574 <HAL_GetTick>
 800b6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6fe:	e008      	b.n	800b712 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b700:	f7f9 ff38 	bl	8005574 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b64      	cmp	r3, #100	@ 0x64
 800b70c:	d901      	bls.n	800b712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e229      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b712:	4b61      	ldr	r3, [pc, #388]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d0f0      	beq.n	800b700 <HAL_RCC_OscConfig+0xe8>
 800b71e:	e014      	b.n	800b74a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b720:	f7f9 ff28 	bl	8005574 <HAL_GetTick>
 800b724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b726:	e008      	b.n	800b73a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b728:	f7f9 ff24 	bl	8005574 <HAL_GetTick>
 800b72c:	4602      	mov	r2, r0
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	2b64      	cmp	r3, #100	@ 0x64
 800b734:	d901      	bls.n	800b73a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e215      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b73a:	4b57      	ldr	r3, [pc, #348]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1f0      	bne.n	800b728 <HAL_RCC_OscConfig+0x110>
 800b746:	e000      	b.n	800b74a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d069      	beq.n	800b82a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b756:	4b50      	ldr	r3, [pc, #320]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	f003 030c 	and.w	r3, r3, #12
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b762:	4b4d      	ldr	r3, [pc, #308]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	f003 030c 	and.w	r3, r3, #12
 800b76a:	2b08      	cmp	r3, #8
 800b76c:	d11c      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x190>
 800b76e:	4b4a      	ldr	r3, [pc, #296]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d116      	bne.n	800b7a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b77a:	4b47      	ldr	r3, [pc, #284]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d005      	beq.n	800b792 <HAL_RCC_OscConfig+0x17a>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d001      	beq.n	800b792 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e1e9      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b792:	4b41      	ldr	r3, [pc, #260]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	493d      	ldr	r1, [pc, #244]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b7a6:	e040      	b.n	800b82a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d023      	beq.n	800b7f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b7b0:	4b39      	ldr	r3, [pc, #228]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a38      	ldr	r2, [pc, #224]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7b6:	f043 0301 	orr.w	r3, r3, #1
 800b7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7bc:	f7f9 feda 	bl	8005574 <HAL_GetTick>
 800b7c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7c2:	e008      	b.n	800b7d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7c4:	f7f9 fed6 	bl	8005574 <HAL_GetTick>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d901      	bls.n	800b7d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e1c7      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b7d6:	4b30      	ldr	r3, [pc, #192]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d0f0      	beq.n	800b7c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7e2:	4b2d      	ldr	r3, [pc, #180]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	4929      	ldr	r1, [pc, #164]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	600b      	str	r3, [r1, #0]
 800b7f6:	e018      	b.n	800b82a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7f8:	4b27      	ldr	r3, [pc, #156]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a26      	ldr	r2, [pc, #152]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b804:	f7f9 feb6 	bl	8005574 <HAL_GetTick>
 800b808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b80a:	e008      	b.n	800b81e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b80c:	f7f9 feb2 	bl	8005574 <HAL_GetTick>
 800b810:	4602      	mov	r2, r0
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	1ad3      	subs	r3, r2, r3
 800b816:	2b02      	cmp	r3, #2
 800b818:	d901      	bls.n	800b81e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b81a:	2303      	movs	r3, #3
 800b81c:	e1a3      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b81e:	4b1e      	ldr	r3, [pc, #120]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d1f0      	bne.n	800b80c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0308 	and.w	r3, r3, #8
 800b832:	2b00      	cmp	r3, #0
 800b834:	d038      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d019      	beq.n	800b872 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b83e:	4b16      	ldr	r3, [pc, #88]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b842:	4a15      	ldr	r2, [pc, #84]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b844:	f043 0301 	orr.w	r3, r3, #1
 800b848:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b84a:	f7f9 fe93 	bl	8005574 <HAL_GetTick>
 800b84e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b850:	e008      	b.n	800b864 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b852:	f7f9 fe8f 	bl	8005574 <HAL_GetTick>
 800b856:	4602      	mov	r2, r0
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	1ad3      	subs	r3, r2, r3
 800b85c:	2b02      	cmp	r3, #2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e180      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b864:	4b0c      	ldr	r3, [pc, #48]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0f0      	beq.n	800b852 <HAL_RCC_OscConfig+0x23a>
 800b870:	e01a      	b.n	800b8a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b872:	4b09      	ldr	r3, [pc, #36]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b876:	4a08      	ldr	r2, [pc, #32]	@ (800b898 <HAL_RCC_OscConfig+0x280>)
 800b878:	f023 0301 	bic.w	r3, r3, #1
 800b87c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87e:	f7f9 fe79 	bl	8005574 <HAL_GetTick>
 800b882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b884:	e00a      	b.n	800b89c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b886:	f7f9 fe75 	bl	8005574 <HAL_GetTick>
 800b88a:	4602      	mov	r2, r0
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	1ad3      	subs	r3, r2, r3
 800b890:	2b02      	cmp	r3, #2
 800b892:	d903      	bls.n	800b89c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b894:	2303      	movs	r3, #3
 800b896:	e166      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
 800b898:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b89c:	4b92      	ldr	r3, [pc, #584]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b89e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8a0:	f003 0302 	and.w	r3, r3, #2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d1ee      	bne.n	800b886 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 0304 	and.w	r3, r3, #4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f000 80a4 	beq.w	800b9fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8b6:	4b8c      	ldr	r3, [pc, #560]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d10d      	bne.n	800b8de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8c2:	4b89      	ldr	r3, [pc, #548]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c6:	4a88      	ldr	r2, [pc, #544]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8cc:	6413      	str	r3, [r2, #64]	@ 0x40
 800b8ce:	4b86      	ldr	r3, [pc, #536]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b8d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8d6:	60bb      	str	r3, [r7, #8]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8de:	4b83      	ldr	r3, [pc, #524]	@ (800baec <HAL_RCC_OscConfig+0x4d4>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d118      	bne.n	800b91c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b8ea:	4b80      	ldr	r3, [pc, #512]	@ (800baec <HAL_RCC_OscConfig+0x4d4>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a7f      	ldr	r2, [pc, #508]	@ (800baec <HAL_RCC_OscConfig+0x4d4>)
 800b8f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8f6:	f7f9 fe3d 	bl	8005574 <HAL_GetTick>
 800b8fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8fc:	e008      	b.n	800b910 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8fe:	f7f9 fe39 	bl	8005574 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b64      	cmp	r3, #100	@ 0x64
 800b90a:	d901      	bls.n	800b910 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e12a      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b910:	4b76      	ldr	r3, [pc, #472]	@ (800baec <HAL_RCC_OscConfig+0x4d4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d0f0      	beq.n	800b8fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d106      	bne.n	800b932 <HAL_RCC_OscConfig+0x31a>
 800b924:	4b70      	ldr	r3, [pc, #448]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b928:	4a6f      	ldr	r2, [pc, #444]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b92a:	f043 0301 	orr.w	r3, r3, #1
 800b92e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b930:	e02d      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10c      	bne.n	800b954 <HAL_RCC_OscConfig+0x33c>
 800b93a:	4b6b      	ldr	r3, [pc, #428]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b93c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b93e:	4a6a      	ldr	r2, [pc, #424]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	6713      	str	r3, [r2, #112]	@ 0x70
 800b946:	4b68      	ldr	r3, [pc, #416]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b94a:	4a67      	ldr	r2, [pc, #412]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b94c:	f023 0304 	bic.w	r3, r3, #4
 800b950:	6713      	str	r3, [r2, #112]	@ 0x70
 800b952:	e01c      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	2b05      	cmp	r3, #5
 800b95a:	d10c      	bne.n	800b976 <HAL_RCC_OscConfig+0x35e>
 800b95c:	4b62      	ldr	r3, [pc, #392]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b95e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b960:	4a61      	ldr	r2, [pc, #388]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b962:	f043 0304 	orr.w	r3, r3, #4
 800b966:	6713      	str	r3, [r2, #112]	@ 0x70
 800b968:	4b5f      	ldr	r3, [pc, #380]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b96a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b96c:	4a5e      	ldr	r2, [pc, #376]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b96e:	f043 0301 	orr.w	r3, r3, #1
 800b972:	6713      	str	r3, [r2, #112]	@ 0x70
 800b974:	e00b      	b.n	800b98e <HAL_RCC_OscConfig+0x376>
 800b976:	4b5c      	ldr	r3, [pc, #368]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b97a:	4a5b      	ldr	r2, [pc, #364]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b97c:	f023 0301 	bic.w	r3, r3, #1
 800b980:	6713      	str	r3, [r2, #112]	@ 0x70
 800b982:	4b59      	ldr	r3, [pc, #356]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b986:	4a58      	ldr	r2, [pc, #352]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b988:	f023 0304 	bic.w	r3, r3, #4
 800b98c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d015      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b996:	f7f9 fded 	bl	8005574 <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b99c:	e00a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99e:	f7f9 fde9 	bl	8005574 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d901      	bls.n	800b9b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e0d8      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9b4:	4b4c      	ldr	r3, [pc, #304]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9b8:	f003 0302 	and.w	r3, r3, #2
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d0ee      	beq.n	800b99e <HAL_RCC_OscConfig+0x386>
 800b9c0:	e014      	b.n	800b9ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9c2:	f7f9 fdd7 	bl	8005574 <HAL_GetTick>
 800b9c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9c8:	e00a      	b.n	800b9e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ca:	f7f9 fdd3 	bl	8005574 <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d901      	bls.n	800b9e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b9dc:	2303      	movs	r3, #3
 800b9de:	e0c2      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b9e0:	4b41      	ldr	r3, [pc, #260]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d1ee      	bne.n	800b9ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9ec:	7dfb      	ldrb	r3, [r7, #23]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d105      	bne.n	800b9fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9f2:	4b3d      	ldr	r3, [pc, #244]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9f6:	4a3c      	ldr	r2, [pc, #240]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800b9f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	f000 80ae 	beq.w	800bb64 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba08:	4b37      	ldr	r3, [pc, #220]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f003 030c 	and.w	r3, r3, #12
 800ba10:	2b08      	cmp	r3, #8
 800ba12:	d06d      	beq.n	800baf0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d14b      	bne.n	800bab4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba1c:	4b32      	ldr	r3, [pc, #200]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a31      	ldr	r2, [pc, #196]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba28:	f7f9 fda4 	bl	8005574 <HAL_GetTick>
 800ba2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba2e:	e008      	b.n	800ba42 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba30:	f7f9 fda0 	bl	8005574 <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d901      	bls.n	800ba42 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e091      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ba42:	4b29      	ldr	r3, [pc, #164]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f0      	bne.n	800ba30 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	69da      	ldr	r2, [r3, #28]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5c:	019b      	lsls	r3, r3, #6
 800ba5e:	431a      	orrs	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba64:	085b      	lsrs	r3, r3, #1
 800ba66:	3b01      	subs	r3, #1
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	431a      	orrs	r2, r3
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba70:	061b      	lsls	r3, r3, #24
 800ba72:	431a      	orrs	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba78:	071b      	lsls	r3, r3, #28
 800ba7a:	491b      	ldr	r1, [pc, #108]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba80:	4b19      	ldr	r3, [pc, #100]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a18      	ldr	r2, [pc, #96]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800ba86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba8c:	f7f9 fd72 	bl	8005574 <HAL_GetTick>
 800ba90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba92:	e008      	b.n	800baa6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba94:	f7f9 fd6e 	bl	8005574 <HAL_GetTick>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	2b02      	cmp	r3, #2
 800baa0:	d901      	bls.n	800baa6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e05f      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800baa6:	4b10      	ldr	r3, [pc, #64]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f0      	beq.n	800ba94 <HAL_RCC_OscConfig+0x47c>
 800bab2:	e057      	b.n	800bb64 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bab4:	4b0c      	ldr	r3, [pc, #48]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a0b      	ldr	r2, [pc, #44]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800baba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800babe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bac0:	f7f9 fd58 	bl	8005574 <HAL_GetTick>
 800bac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bac6:	e008      	b.n	800bada <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bac8:	f7f9 fd54 	bl	8005574 <HAL_GetTick>
 800bacc:	4602      	mov	r2, r0
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d901      	bls.n	800bada <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800bad6:	2303      	movs	r3, #3
 800bad8:	e045      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bada:	4b03      	ldr	r3, [pc, #12]	@ (800bae8 <HAL_RCC_OscConfig+0x4d0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f0      	bne.n	800bac8 <HAL_RCC_OscConfig+0x4b0>
 800bae6:	e03d      	b.n	800bb64 <HAL_RCC_OscConfig+0x54c>
 800bae8:	40023800 	.word	0x40023800
 800baec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800baf0:	4b1f      	ldr	r3, [pc, #124]	@ (800bb70 <HAL_RCC_OscConfig+0x558>)
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d030      	beq.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d129      	bne.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d122      	bne.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800bb20:	4013      	ands	r3, r2
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bb26:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d119      	bne.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb36:	085b      	lsrs	r3, r3, #1
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d10f      	bne.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d107      	bne.n	800bb60 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb5a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d001      	beq.n	800bb64 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e000      	b.n	800bb66 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	40023800 	.word	0x40023800

0800bb74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e0d0      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb8c:	4b6a      	ldr	r3, [pc, #424]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d910      	bls.n	800bbbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb9a:	4b67      	ldr	r3, [pc, #412]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f023 020f 	bic.w	r2, r3, #15
 800bba2:	4965      	ldr	r1, [pc, #404]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbaa:	4b63      	ldr	r3, [pc, #396]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 030f 	and.w	r3, r3, #15
 800bbb2:	683a      	ldr	r2, [r7, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d001      	beq.n	800bbbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e0b8      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f003 0302 	and.w	r3, r3, #2
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d020      	beq.n	800bc0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f003 0304 	and.w	r3, r3, #4
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d005      	beq.n	800bbe0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbd4:	4b59      	ldr	r3, [pc, #356]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4a58      	ldr	r2, [pc, #352]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bbda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800bbde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0308 	and.w	r3, r3, #8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d005      	beq.n	800bbf8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bbec:	4b53      	ldr	r3, [pc, #332]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bbee:	689b      	ldr	r3, [r3, #8]
 800bbf0:	4a52      	ldr	r2, [pc, #328]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bbf2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800bbf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbf8:	4b50      	ldr	r3, [pc, #320]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	494d      	ldr	r1, [pc, #308]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d040      	beq.n	800bc98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d107      	bne.n	800bc2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc1e:	4b47      	ldr	r3, [pc, #284]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d115      	bne.n	800bc56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e07f      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d107      	bne.n	800bc46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bc36:	4b41      	ldr	r3, [pc, #260]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d109      	bne.n	800bc56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	e073      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc46:	4b3d      	ldr	r3, [pc, #244]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0302 	and.w	r3, r3, #2
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d101      	bne.n	800bc56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	e06b      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bc56:	4b39      	ldr	r3, [pc, #228]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	f023 0203 	bic.w	r2, r3, #3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	4936      	ldr	r1, [pc, #216]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc64:	4313      	orrs	r3, r2
 800bc66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc68:	f7f9 fc84 	bl	8005574 <HAL_GetTick>
 800bc6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc6e:	e00a      	b.n	800bc86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc70:	f7f9 fc80 	bl	8005574 <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d901      	bls.n	800bc86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e053      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc86:	4b2d      	ldr	r3, [pc, #180]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f003 020c 	and.w	r2, r3, #12
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d1eb      	bne.n	800bc70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc98:	4b27      	ldr	r3, [pc, #156]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 030f 	and.w	r3, r3, #15
 800bca0:	683a      	ldr	r2, [r7, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d210      	bcs.n	800bcc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bca6:	4b24      	ldr	r3, [pc, #144]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f023 020f 	bic.w	r2, r3, #15
 800bcae:	4922      	ldr	r1, [pc, #136]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcb6:	4b20      	ldr	r3, [pc, #128]	@ (800bd38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d001      	beq.n	800bcc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e032      	b.n	800bd2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0304 	and.w	r3, r3, #4
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d008      	beq.n	800bce6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bcd4:	4b19      	ldr	r3, [pc, #100]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bcd6:	689b      	ldr	r3, [r3, #8]
 800bcd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	4916      	ldr	r1, [pc, #88]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0308 	and.w	r3, r3, #8
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d009      	beq.n	800bd06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bcf2:	4b12      	ldr	r3, [pc, #72]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	691b      	ldr	r3, [r3, #16]
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	490e      	ldr	r1, [pc, #56]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bd06:	f000 f885 	bl	800be14 <HAL_RCC_GetSysClockFreq>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd3c <HAL_RCC_ClockConfig+0x1c8>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	091b      	lsrs	r3, r3, #4
 800bd12:	f003 030f 	and.w	r3, r3, #15
 800bd16:	490a      	ldr	r1, [pc, #40]	@ (800bd40 <HAL_RCC_ClockConfig+0x1cc>)
 800bd18:	5ccb      	ldrb	r3, [r1, r3]
 800bd1a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1e:	4a09      	ldr	r2, [pc, #36]	@ (800bd44 <HAL_RCC_ClockConfig+0x1d0>)
 800bd20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bd22:	4b09      	ldr	r3, [pc, #36]	@ (800bd48 <HAL_RCC_ClockConfig+0x1d4>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7f7 fc3e 	bl	80035a8 <HAL_InitTick>

  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	40023c00 	.word	0x40023c00
 800bd3c:	40023800 	.word	0x40023800
 800bd40:	08013c74 	.word	0x08013c74
 800bd44:	20000018 	.word	0x20000018
 800bd48:	20000050 	.word	0x20000050

0800bd4c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b08c      	sub	sp, #48	@ 0x30
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d127      	bne.n	800bdae <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800bd5e:	4b2a      	ldr	r3, [pc, #168]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bd60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd62:	4a29      	ldr	r2, [pc, #164]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bd64:	f043 0301 	orr.w	r3, r3, #1
 800bd68:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd6a:	4b27      	ldr	r3, [pc, #156]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bd6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	61bb      	str	r3, [r7, #24]
 800bd74:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800bd76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bd7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bd80:	2303      	movs	r3, #3
 800bd82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd84:	2300      	movs	r3, #0
 800bd86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800bd8c:	f107 031c 	add.w	r3, r7, #28
 800bd90:	4619      	mov	r1, r3
 800bd92:	481e      	ldr	r0, [pc, #120]	@ (800be0c <HAL_RCC_MCOConfig+0xc0>)
 800bd94:	f7fc fda2 	bl	80088dc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800bd98:	4b1b      	ldr	r3, [pc, #108]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	430b      	orrs	r3, r1
 800bda6:	4918      	ldr	r1, [pc, #96]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 800bdac:	e027      	b.n	800bdfe <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800bdae:	4b16      	ldr	r3, [pc, #88]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bdb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb2:	4a15      	ldr	r2, [pc, #84]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bdb4:	f043 0304 	orr.w	r3, r3, #4
 800bdb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bdba:	4b13      	ldr	r3, [pc, #76]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bdbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	617b      	str	r3, [r7, #20]
 800bdc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800bdc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdcc:	2302      	movs	r3, #2
 800bdce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800bddc:	f107 031c 	add.w	r3, r7, #28
 800bde0:	4619      	mov	r1, r3
 800bde2:	480b      	ldr	r0, [pc, #44]	@ (800be10 <HAL_RCC_MCOConfig+0xc4>)
 800bde4:	f7fc fd7a 	bl	80088dc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 800bde8:	4b07      	ldr	r3, [pc, #28]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	00d9      	lsls	r1, r3, #3
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	4903      	ldr	r1, [pc, #12]	@ (800be08 <HAL_RCC_MCOConfig+0xbc>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	608b      	str	r3, [r1, #8]
}
 800bdfe:	bf00      	nop
 800be00:	3730      	adds	r7, #48	@ 0x30
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	40023800 	.word	0x40023800
 800be0c:	40020000 	.word	0x40020000
 800be10:	40020800 	.word	0x40020800

0800be14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be18:	b090      	sub	sp, #64	@ 0x40
 800be1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800be20:	2300      	movs	r3, #0
 800be22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be24:	2300      	movs	r3, #0
 800be26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be2c:	4b59      	ldr	r3, [pc, #356]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	f003 030c 	and.w	r3, r3, #12
 800be34:	2b08      	cmp	r3, #8
 800be36:	d00d      	beq.n	800be54 <HAL_RCC_GetSysClockFreq+0x40>
 800be38:	2b08      	cmp	r3, #8
 800be3a:	f200 80a1 	bhi.w	800bf80 <HAL_RCC_GetSysClockFreq+0x16c>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d002      	beq.n	800be48 <HAL_RCC_GetSysClockFreq+0x34>
 800be42:	2b04      	cmp	r3, #4
 800be44:	d003      	beq.n	800be4e <HAL_RCC_GetSysClockFreq+0x3a>
 800be46:	e09b      	b.n	800bf80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be48:	4b53      	ldr	r3, [pc, #332]	@ (800bf98 <HAL_RCC_GetSysClockFreq+0x184>)
 800be4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800be4c:	e09b      	b.n	800bf86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be4e:	4b53      	ldr	r3, [pc, #332]	@ (800bf9c <HAL_RCC_GetSysClockFreq+0x188>)
 800be50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800be52:	e098      	b.n	800bf86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be54:	4b4f      	ldr	r3, [pc, #316]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800be5e:	4b4d      	ldr	r3, [pc, #308]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be66:	2b00      	cmp	r3, #0
 800be68:	d028      	beq.n	800bebc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be6a:	4b4a      	ldr	r3, [pc, #296]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	099b      	lsrs	r3, r3, #6
 800be70:	2200      	movs	r2, #0
 800be72:	623b      	str	r3, [r7, #32]
 800be74:	627a      	str	r2, [r7, #36]	@ 0x24
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800be7c:	2100      	movs	r1, #0
 800be7e:	4b47      	ldr	r3, [pc, #284]	@ (800bf9c <HAL_RCC_GetSysClockFreq+0x188>)
 800be80:	fb03 f201 	mul.w	r2, r3, r1
 800be84:	2300      	movs	r3, #0
 800be86:	fb00 f303 	mul.w	r3, r0, r3
 800be8a:	4413      	add	r3, r2
 800be8c:	4a43      	ldr	r2, [pc, #268]	@ (800bf9c <HAL_RCC_GetSysClockFreq+0x188>)
 800be8e:	fba0 1202 	umull	r1, r2, r0, r2
 800be92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be94:	460a      	mov	r2, r1
 800be96:	62ba      	str	r2, [r7, #40]	@ 0x28
 800be98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be9a:	4413      	add	r3, r2
 800be9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bea0:	2200      	movs	r2, #0
 800bea2:	61bb      	str	r3, [r7, #24]
 800bea4:	61fa      	str	r2, [r7, #28]
 800bea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800beaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800beae:	f7f4 f9c7 	bl	8000240 <__aeabi_uldivmod>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4613      	mov	r3, r2
 800beb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800beba:	e053      	b.n	800bf64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bebc:	4b35      	ldr	r3, [pc, #212]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	099b      	lsrs	r3, r3, #6
 800bec2:	2200      	movs	r2, #0
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	617a      	str	r2, [r7, #20]
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bece:	f04f 0b00 	mov.w	fp, #0
 800bed2:	4652      	mov	r2, sl
 800bed4:	465b      	mov	r3, fp
 800bed6:	f04f 0000 	mov.w	r0, #0
 800beda:	f04f 0100 	mov.w	r1, #0
 800bede:	0159      	lsls	r1, r3, #5
 800bee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bee4:	0150      	lsls	r0, r2, #5
 800bee6:	4602      	mov	r2, r0
 800bee8:	460b      	mov	r3, r1
 800beea:	ebb2 080a 	subs.w	r8, r2, sl
 800beee:	eb63 090b 	sbc.w	r9, r3, fp
 800bef2:	f04f 0200 	mov.w	r2, #0
 800bef6:	f04f 0300 	mov.w	r3, #0
 800befa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800befe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bf02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bf06:	ebb2 0408 	subs.w	r4, r2, r8
 800bf0a:	eb63 0509 	sbc.w	r5, r3, r9
 800bf0e:	f04f 0200 	mov.w	r2, #0
 800bf12:	f04f 0300 	mov.w	r3, #0
 800bf16:	00eb      	lsls	r3, r5, #3
 800bf18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf1c:	00e2      	lsls	r2, r4, #3
 800bf1e:	4614      	mov	r4, r2
 800bf20:	461d      	mov	r5, r3
 800bf22:	eb14 030a 	adds.w	r3, r4, sl
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	eb45 030b 	adc.w	r3, r5, fp
 800bf2c:	607b      	str	r3, [r7, #4]
 800bf2e:	f04f 0200 	mov.w	r2, #0
 800bf32:	f04f 0300 	mov.w	r3, #0
 800bf36:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bf3a:	4629      	mov	r1, r5
 800bf3c:	028b      	lsls	r3, r1, #10
 800bf3e:	4621      	mov	r1, r4
 800bf40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf44:	4621      	mov	r1, r4
 800bf46:	028a      	lsls	r2, r1, #10
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf4e:	2200      	movs	r2, #0
 800bf50:	60bb      	str	r3, [r7, #8]
 800bf52:	60fa      	str	r2, [r7, #12]
 800bf54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bf58:	f7f4 f972 	bl	8000240 <__aeabi_uldivmod>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4613      	mov	r3, r2
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bf64:	4b0b      	ldr	r3, [pc, #44]	@ (800bf94 <HAL_RCC_GetSysClockFreq+0x180>)
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	0c1b      	lsrs	r3, r3, #16
 800bf6a:	f003 0303 	and.w	r3, r3, #3
 800bf6e:	3301      	adds	r3, #1
 800bf70:	005b      	lsls	r3, r3, #1
 800bf72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bf74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bf7e:	e002      	b.n	800bf86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bf80:	4b05      	ldr	r3, [pc, #20]	@ (800bf98 <HAL_RCC_GetSysClockFreq+0x184>)
 800bf82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bf84:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bf86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3740      	adds	r7, #64	@ 0x40
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf92:	bf00      	nop
 800bf94:	40023800 	.word	0x40023800
 800bf98:	00f42400 	.word	0x00f42400
 800bf9c:	017d7840 	.word	0x017d7840

0800bfa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bfa4:	4b03      	ldr	r3, [pc, #12]	@ (800bfb4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	20000018 	.word	0x20000018

0800bfb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bfbc:	f7ff fff0 	bl	800bfa0 <HAL_RCC_GetHCLKFreq>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4b05      	ldr	r3, [pc, #20]	@ (800bfd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	0a9b      	lsrs	r3, r3, #10
 800bfc8:	f003 0307 	and.w	r3, r3, #7
 800bfcc:	4903      	ldr	r1, [pc, #12]	@ (800bfdc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bfce:	5ccb      	ldrb	r3, [r1, r3]
 800bfd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	40023800 	.word	0x40023800
 800bfdc:	08013c84 	.word	0x08013c84

0800bfe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bfe4:	f7ff ffdc 	bl	800bfa0 <HAL_RCC_GetHCLKFreq>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	4b05      	ldr	r3, [pc, #20]	@ (800c000 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	0b5b      	lsrs	r3, r3, #13
 800bff0:	f003 0307 	and.w	r3, r3, #7
 800bff4:	4903      	ldr	r1, [pc, #12]	@ (800c004 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bff6:	5ccb      	ldrb	r3, [r1, r3]
 800bff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	40023800 	.word	0x40023800
 800c004:	08013c84 	.word	0x08013c84

0800c008 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	220f      	movs	r2, #15
 800c016:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c018:	4b12      	ldr	r3, [pc, #72]	@ (800c064 <HAL_RCC_GetClockConfig+0x5c>)
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	f003 0203 	and.w	r2, r3, #3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c024:	4b0f      	ldr	r3, [pc, #60]	@ (800c064 <HAL_RCC_GetClockConfig+0x5c>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c030:	4b0c      	ldr	r3, [pc, #48]	@ (800c064 <HAL_RCC_GetClockConfig+0x5c>)
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c03c:	4b09      	ldr	r3, [pc, #36]	@ (800c064 <HAL_RCC_GetClockConfig+0x5c>)
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	08db      	lsrs	r3, r3, #3
 800c042:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c04a:	4b07      	ldr	r3, [pc, #28]	@ (800c068 <HAL_RCC_GetClockConfig+0x60>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 020f 	and.w	r2, r3, #15
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	601a      	str	r2, [r3, #0]
}
 800c056:	bf00      	nop
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	40023800 	.word	0x40023800
 800c068:	40023c00 	.word	0x40023c00

0800c06c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800c084:	2300      	movs	r3, #0
 800c086:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d012      	beq.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c094:	4b69      	ldr	r3, [pc, #420]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	4a68      	ldr	r2, [pc, #416]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c09a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c09e:	6093      	str	r3, [r2, #8]
 800c0a0:	4b66      	ldr	r3, [pc, #408]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0a2:	689a      	ldr	r2, [r3, #8]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a8:	4964      	ldr	r1, [pc, #400]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d017      	beq.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c0c6:	4b5d      	ldr	r3, [pc, #372]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d4:	4959      	ldr	r1, [pc, #356]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0e4:	d101      	bne.n	800c0ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d017      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c102:	4b4e      	ldr	r3, [pc, #312]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c108:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c110:	494a      	ldr	r1, [pc, #296]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c112:	4313      	orrs	r3, r2
 800c114:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c11c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c120:	d101      	bne.n	800c126 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800c122:	2301      	movs	r3, #1
 800c124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800c12e:	2301      	movs	r3, #1
 800c130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800c13e:	2301      	movs	r3, #1
 800c140:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 0320 	and.w	r3, r3, #32
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	f000 808b 	beq.w	800c266 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c150:	4b3a      	ldr	r3, [pc, #232]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c154:	4a39      	ldr	r2, [pc, #228]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c15a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c15c:	4b37      	ldr	r3, [pc, #220]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c164:	60bb      	str	r3, [r7, #8]
 800c166:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c168:	4b35      	ldr	r3, [pc, #212]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a34      	ldr	r2, [pc, #208]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c16e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c174:	f7f9 f9fe 	bl	8005574 <HAL_GetTick>
 800c178:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c17a:	e008      	b.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c17c:	f7f9 f9fa 	bl	8005574 <HAL_GetTick>
 800c180:	4602      	mov	r2, r0
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	2b64      	cmp	r3, #100	@ 0x64
 800c188:	d901      	bls.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800c18a:	2303      	movs	r3, #3
 800c18c:	e38f      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c18e:	4b2c      	ldr	r3, [pc, #176]	@ (800c240 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c196:	2b00      	cmp	r3, #0
 800c198:	d0f0      	beq.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c19a:	4b28      	ldr	r3, [pc, #160]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c19c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c19e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d035      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d02e      	beq.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c1b8:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c1c2:	4b1e      	ldr	r3, [pc, #120]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1c6:	4a1d      	ldr	r2, [pc, #116]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c1cc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c1ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1d2:	4a1a      	ldr	r2, [pc, #104]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c1da:	4a18      	ldr	r2, [pc, #96]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c1e0:	4b16      	ldr	r3, [pc, #88]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d114      	bne.n	800c216 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1ec:	f7f9 f9c2 	bl	8005574 <HAL_GetTick>
 800c1f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1f2:	e00a      	b.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c1f4:	f7f9 f9be 	bl	8005574 <HAL_GetTick>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c202:	4293      	cmp	r3, r2
 800c204:	d901      	bls.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e351      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c20a:	4b0c      	ldr	r3, [pc, #48]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c20c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c20e:	f003 0302 	and.w	r3, r3, #2
 800c212:	2b00      	cmp	r3, #0
 800c214:	d0ee      	beq.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c21a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c222:	d111      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800c224:	4b05      	ldr	r3, [pc, #20]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c230:	4b04      	ldr	r3, [pc, #16]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800c232:	400b      	ands	r3, r1
 800c234:	4901      	ldr	r1, [pc, #4]	@ (800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800c236:	4313      	orrs	r3, r2
 800c238:	608b      	str	r3, [r1, #8]
 800c23a:	e00b      	b.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800c23c:	40023800 	.word	0x40023800
 800c240:	40007000 	.word	0x40007000
 800c244:	0ffffcff 	.word	0x0ffffcff
 800c248:	4bac      	ldr	r3, [pc, #688]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	4aab      	ldr	r2, [pc, #684]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c24e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c252:	6093      	str	r3, [r2, #8]
 800c254:	4ba9      	ldr	r3, [pc, #676]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c25c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c260:	49a6      	ldr	r1, [pc, #664]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c262:	4313      	orrs	r3, r2
 800c264:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0310 	and.w	r3, r3, #16
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d010      	beq.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c272:	4ba2      	ldr	r3, [pc, #648]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c274:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c278:	4aa0      	ldr	r2, [pc, #640]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c27a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c27e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800c282:	4b9e      	ldr	r3, [pc, #632]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c284:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28c:	499b      	ldr	r1, [pc, #620]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c2a0:	4b96      	ldr	r3, [pc, #600]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2ae:	4993      	ldr	r1, [pc, #588]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2b0:	4313      	orrs	r3, r2
 800c2b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c2c2:	4b8e      	ldr	r3, [pc, #568]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c2d0:	498a      	ldr	r1, [pc, #552]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00a      	beq.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c2e4:	4b85      	ldr	r3, [pc, #532]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2f2:	4982      	ldr	r1, [pc, #520]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00a      	beq.n	800c31c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c306:	4b7d      	ldr	r3, [pc, #500]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c30c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c314:	4979      	ldr	r1, [pc, #484]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c316:	4313      	orrs	r3, r2
 800c318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00a      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c328:	4b74      	ldr	r3, [pc, #464]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c32e:	f023 0203 	bic.w	r2, r3, #3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c336:	4971      	ldr	r1, [pc, #452]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c338:	4313      	orrs	r3, r2
 800c33a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00a      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c34a:	4b6c      	ldr	r3, [pc, #432]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c350:	f023 020c 	bic.w	r2, r3, #12
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c358:	4968      	ldr	r1, [pc, #416]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c35a:	4313      	orrs	r3, r2
 800c35c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c36c:	4b63      	ldr	r3, [pc, #396]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c372:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c37a:	4960      	ldr	r1, [pc, #384]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c37c:	4313      	orrs	r3, r2
 800c37e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00a      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c38e:	4b5b      	ldr	r3, [pc, #364]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c394:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c39c:	4957      	ldr	r1, [pc, #348]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00a      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c3b0:	4b52      	ldr	r3, [pc, #328]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3be:	494f      	ldr	r1, [pc, #316]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c3d2:	4b4a      	ldr	r3, [pc, #296]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3e0:	4946      	ldr	r1, [pc, #280]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00a      	beq.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c3f4:	4b41      	ldr	r3, [pc, #260]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3fa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c402:	493e      	ldr	r1, [pc, #248]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c404:	4313      	orrs	r3, r2
 800c406:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c416:	4b39      	ldr	r3, [pc, #228]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c41c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c424:	4935      	ldr	r1, [pc, #212]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c426:	4313      	orrs	r3, r2
 800c428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c438:	4b30      	ldr	r3, [pc, #192]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c43e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c446:	492d      	ldr	r1, [pc, #180]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c448:	4313      	orrs	r3, r2
 800c44a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d011      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c45a:	4b28      	ldr	r3, [pc, #160]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c460:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c468:	4924      	ldr	r1, [pc, #144]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c478:	d101      	bne.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0308 	and.w	r3, r3, #8
 800c486:	2b00      	cmp	r3, #0
 800c488:	d001      	beq.n	800c48e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c48a:	2301      	movs	r3, #1
 800c48c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00a      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c49a:	4b18      	ldr	r3, [pc, #96]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c49c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4a8:	4914      	ldr	r1, [pc, #80]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d00b      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c4bc:	4b0f      	ldr	r3, [pc, #60]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4cc:	490b      	ldr	r1, [pc, #44]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00f      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c4e0:	4b06      	ldr	r3, [pc, #24]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4e6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4f0:	4902      	ldr	r1, [pc, #8]	@ (800c4fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c4f8:	e002      	b.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800c4fa:	bf00      	nop
 800c4fc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c50c:	4b8a      	ldr	r3, [pc, #552]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c512:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c51c:	4986      	ldr	r1, [pc, #536]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c51e:	4313      	orrs	r3, r2
 800c520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d00b      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c530:	4b81      	ldr	r3, [pc, #516]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c536:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c540:	497d      	ldr	r1, [pc, #500]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c542:	4313      	orrs	r3, r2
 800c544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d006      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80d6 	beq.w	800c708 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c55c:	4b76      	ldr	r3, [pc, #472]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a75      	ldr	r2, [pc, #468]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c568:	f7f9 f804 	bl	8005574 <HAL_GetTick>
 800c56c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c56e:	e008      	b.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c570:	f7f9 f800 	bl	8005574 <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	2b64      	cmp	r3, #100	@ 0x64
 800c57c:	d901      	bls.n	800c582 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c57e:	2303      	movs	r3, #3
 800c580:	e195      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c582:	4b6d      	ldr	r3, [pc, #436]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1f0      	bne.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d021      	beq.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x572>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d11d      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c5a2:	4b65      	ldr	r3, [pc, #404]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5a8:	0c1b      	lsrs	r3, r3, #16
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c5b0:	4b61      	ldr	r3, [pc, #388]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5b6:	0e1b      	lsrs	r3, r3, #24
 800c5b8:	f003 030f 	and.w	r3, r3, #15
 800c5bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	019a      	lsls	r2, r3, #6
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	041b      	lsls	r3, r3, #16
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	061b      	lsls	r3, r3, #24
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	071b      	lsls	r3, r3, #28
 800c5d6:	4958      	ldr	r1, [pc, #352]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d004      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5f2:	d00a      	beq.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d02e      	beq.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c608:	d129      	bne.n	800c65e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c60a:	4b4b      	ldr	r3, [pc, #300]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c610:	0c1b      	lsrs	r3, r3, #16
 800c612:	f003 0303 	and.w	r3, r3, #3
 800c616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c618:	4b47      	ldr	r3, [pc, #284]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c61e:	0f1b      	lsrs	r3, r3, #28
 800c620:	f003 0307 	and.w	r3, r3, #7
 800c624:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	019a      	lsls	r2, r3, #6
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	041b      	lsls	r3, r3, #16
 800c630:	431a      	orrs	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	061b      	lsls	r3, r3, #24
 800c638:	431a      	orrs	r2, r3
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	071b      	lsls	r3, r3, #28
 800c63e:	493e      	ldr	r1, [pc, #248]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c640:	4313      	orrs	r3, r2
 800c642:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c646:	4b3c      	ldr	r3, [pc, #240]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c648:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c64c:	f023 021f 	bic.w	r2, r3, #31
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c654:	3b01      	subs	r3, #1
 800c656:	4938      	ldr	r1, [pc, #224]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c658:	4313      	orrs	r3, r2
 800c65a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c666:	2b00      	cmp	r3, #0
 800c668:	d01d      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c66a:	4b33      	ldr	r3, [pc, #204]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c670:	0e1b      	lsrs	r3, r3, #24
 800c672:	f003 030f 	and.w	r3, r3, #15
 800c676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c678:	4b2f      	ldr	r3, [pc, #188]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c67e:	0f1b      	lsrs	r3, r3, #28
 800c680:	f003 0307 	and.w	r3, r3, #7
 800c684:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	019a      	lsls	r2, r3, #6
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	041b      	lsls	r3, r3, #16
 800c692:	431a      	orrs	r2, r3
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	061b      	lsls	r3, r3, #24
 800c698:	431a      	orrs	r2, r3
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	071b      	lsls	r3, r3, #28
 800c69e:	4926      	ldr	r1, [pc, #152]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d011      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	685b      	ldr	r3, [r3, #4]
 800c6b6:	019a      	lsls	r2, r3, #6
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	041b      	lsls	r3, r3, #16
 800c6be:	431a      	orrs	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	061b      	lsls	r3, r3, #24
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	071b      	lsls	r3, r3, #28
 800c6ce:	491a      	ldr	r1, [pc, #104]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c6d6:	4b18      	ldr	r3, [pc, #96]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a17      	ldr	r2, [pc, #92]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c6dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6e2:	f7f8 ff47 	bl	8005574 <HAL_GetTick>
 800c6e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6e8:	e008      	b.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c6ea:	f7f8 ff43 	bl	8005574 <HAL_GetTick>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	2b64      	cmp	r3, #100	@ 0x64
 800c6f6:	d901      	bls.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6f8:	2303      	movs	r3, #3
 800c6fa:	e0d8      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c704:	2b00      	cmp	r3, #0
 800c706:	d0f0      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c708:	69bb      	ldr	r3, [r7, #24]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	f040 80ce 	bne.w	800c8ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c710:	4b09      	ldr	r3, [pc, #36]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a08      	ldr	r2, [pc, #32]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800c716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c71a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c71c:	f7f8 ff2a 	bl	8005574 <HAL_GetTick>
 800c720:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c722:	e00b      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c724:	f7f8 ff26 	bl	8005574 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b64      	cmp	r3, #100	@ 0x64
 800c730:	d904      	bls.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e0bb      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c736:	bf00      	nop
 800c738:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c73c:	4b5e      	ldr	r3, [pc, #376]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c748:	d0ec      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d009      	beq.n	800c772 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c766:	2b00      	cmp	r3, #0
 800c768:	d02e      	beq.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d12a      	bne.n	800c7c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c772:	4b51      	ldr	r3, [pc, #324]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c778:	0c1b      	lsrs	r3, r3, #16
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c780:	4b4d      	ldr	r3, [pc, #308]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c786:	0f1b      	lsrs	r3, r3, #28
 800c788:	f003 0307 	and.w	r3, r3, #7
 800c78c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	695b      	ldr	r3, [r3, #20]
 800c792:	019a      	lsls	r2, r3, #6
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	041b      	lsls	r3, r3, #16
 800c798:	431a      	orrs	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	061b      	lsls	r3, r3, #24
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	071b      	lsls	r3, r3, #28
 800c7a6:	4944      	ldr	r1, [pc, #272]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c7ae:	4b42      	ldr	r3, [pc, #264]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c7b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	021b      	lsls	r3, r3, #8
 800c7c0:	493d      	ldr	r1, [pc, #244]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d022      	beq.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c7dc:	d11d      	bne.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c7de:	4b36      	ldr	r3, [pc, #216]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7e4:	0e1b      	lsrs	r3, r3, #24
 800c7e6:	f003 030f 	and.w	r3, r3, #15
 800c7ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7ec:	4b32      	ldr	r3, [pc, #200]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7f2:	0f1b      	lsrs	r3, r3, #28
 800c7f4:	f003 0307 	and.w	r3, r3, #7
 800c7f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	019a      	lsls	r2, r3, #6
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	041b      	lsls	r3, r3, #16
 800c806:	431a      	orrs	r2, r3
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	061b      	lsls	r3, r3, #24
 800c80c:	431a      	orrs	r2, r3
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	071b      	lsls	r3, r3, #28
 800c812:	4929      	ldr	r1, [pc, #164]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c814:	4313      	orrs	r3, r2
 800c816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0308 	and.w	r3, r3, #8
 800c822:	2b00      	cmp	r3, #0
 800c824:	d028      	beq.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c826:	4b24      	ldr	r3, [pc, #144]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c82c:	0e1b      	lsrs	r3, r3, #24
 800c82e:	f003 030f 	and.w	r3, r3, #15
 800c832:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c834:	4b20      	ldr	r3, [pc, #128]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c83a:	0c1b      	lsrs	r3, r3, #16
 800c83c:	f003 0303 	and.w	r3, r3, #3
 800c840:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	695b      	ldr	r3, [r3, #20]
 800c846:	019a      	lsls	r2, r3, #6
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	041b      	lsls	r3, r3, #16
 800c84c:	431a      	orrs	r2, r3
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	061b      	lsls	r3, r3, #24
 800c852:	431a      	orrs	r2, r3
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	69db      	ldr	r3, [r3, #28]
 800c858:	071b      	lsls	r3, r3, #28
 800c85a:	4917      	ldr	r1, [pc, #92]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c85c:	4313      	orrs	r3, r2
 800c85e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c862:	4b15      	ldr	r3, [pc, #84]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c868:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c870:	4911      	ldr	r1, [pc, #68]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c872:	4313      	orrs	r3, r2
 800c874:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c878:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a0e      	ldr	r2, [pc, #56]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c87e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c884:	f7f8 fe76 	bl	8005574 <HAL_GetTick>
 800c888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c88a:	e008      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c88c:	f7f8 fe72 	bl	8005574 <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	2b64      	cmp	r3, #100	@ 0x64
 800c898:	d901      	bls.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c89a:	2303      	movs	r3, #3
 800c89c:	e007      	b.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c89e:	4b06      	ldr	r3, [pc, #24]	@ (800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c8a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8aa:	d1ef      	bne.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3720      	adds	r7, #32
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	40023800 	.word	0x40023800

0800c8bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c8da:	f040 80a4 	bne.w	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800c8de:	4ba6      	ldr	r3, [pc, #664]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c8e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c8e4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800c8ec:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c8f4:	f000 808a 	beq.w	800ca0c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c8fe:	f200 8091 	bhi.w	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c908:	d07d      	beq.n	800ca06 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c910:	f200 8088 	bhi.w	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d004      	beq.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c920:	d039      	beq.n	800c996 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800c922:	e07f      	b.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c924:	4b94      	ldr	r3, [pc, #592]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d108      	bne.n	800c942 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c930:	4b91      	ldr	r3, [pc, #580]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c938:	4a90      	ldr	r2, [pc, #576]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	e007      	b.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c942:	4b8d      	ldr	r3, [pc, #564]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c94a:	4a8d      	ldr	r2, [pc, #564]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c94c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c950:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800c952:	4b89      	ldr	r3, [pc, #548]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c958:	0e1b      	lsrs	r3, r3, #24
 800c95a:	f003 030f 	and.w	r3, r3, #15
 800c95e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800c960:	4b85      	ldr	r3, [pc, #532]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c966:	099b      	lsrs	r3, r3, #6
 800c968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	fb03 f202 	mul.w	r2, r3, r2
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	fbb2 f3f3 	udiv	r3, r2, r3
 800c978:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800c97a:	4b7f      	ldr	r3, [pc, #508]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c97c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c980:	0a1b      	lsrs	r3, r3, #8
 800c982:	f003 031f 	and.w	r3, r3, #31
 800c986:	3301      	adds	r3, #1
 800c988:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c98a:	697a      	ldr	r2, [r7, #20]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c992:	617b      	str	r3, [r7, #20]
        break;
 800c994:	e047      	b.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800c996:	4b78      	ldr	r3, [pc, #480]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d108      	bne.n	800c9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c9a2:	4b75      	ldr	r3, [pc, #468]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9aa:	4a74      	ldr	r2, [pc, #464]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800c9ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9b0:	613b      	str	r3, [r7, #16]
 800c9b2:	e007      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800c9b4:	4b70      	ldr	r3, [pc, #448]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9bc:	4a70      	ldr	r2, [pc, #448]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800c9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800c9c4:	4b6c      	ldr	r3, [pc, #432]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9ca:	0e1b      	lsrs	r3, r3, #24
 800c9cc:	f003 030f 	and.w	r3, r3, #15
 800c9d0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800c9d2:	4b69      	ldr	r3, [pc, #420]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9d8:	099b      	lsrs	r3, r3, #6
 800c9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	fb03 f202 	mul.w	r2, r3, r2
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ea:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800c9ec:	4b62      	ldr	r3, [pc, #392]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800c9ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c9f2:	f003 031f 	and.w	r3, r3, #31
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800c9fa:	697a      	ldr	r2, [r7, #20]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca02:	617b      	str	r3, [r7, #20]
        break;
 800ca04:	e00f      	b.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca06:	4b5f      	ldr	r3, [pc, #380]	@ (800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800ca08:	617b      	str	r3, [r7, #20]
        break;
 800ca0a:	e00c      	b.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ca0c:	4b5a      	ldr	r3, [pc, #360]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d102      	bne.n	800ca1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800ca18:	4b58      	ldr	r3, [pc, #352]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ca1a:	617b      	str	r3, [r7, #20]
        break;
 800ca1c:	e003      	b.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 800ca1e:	4b58      	ldr	r3, [pc, #352]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800ca20:	617b      	str	r3, [r7, #20]
        break;
 800ca22:	e000      	b.n	800ca26 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 800ca24:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca2c:	f040 80ad 	bne.w	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
  {
    saiclocksource = RCC->DCKCFGR1;
 800ca30:	4b51      	ldr	r3, [pc, #324]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ca36:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800ca3e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ca46:	f000 808a 	beq.w	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ca50:	f200 809a 	bhi.w	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca5a:	d07d      	beq.n	800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca62:	f200 8091 	bhi.w	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca72:	d039      	beq.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800ca74:	e088      	b.n	800cb88 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800ca76:	4b40      	ldr	r3, [pc, #256]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d108      	bne.n	800ca94 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800ca82:	4b3d      	ldr	r3, [pc, #244]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca8a:	4a3c      	ldr	r2, [pc, #240]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800ca8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	e007      	b.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800ca94:	4b38      	ldr	r3, [pc, #224]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca9c:	4a38      	ldr	r2, [pc, #224]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800ca9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800caa4:	4b34      	ldr	r3, [pc, #208]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800caa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caaa:	0e1b      	lsrs	r3, r3, #24
 800caac:	f003 030f 	and.w	r3, r3, #15
 800cab0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800cab2:	4b31      	ldr	r3, [pc, #196]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cab8:	099b      	lsrs	r3, r3, #6
 800caba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	fb03 f202 	mul.w	r2, r3, r2
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caca:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800cacc:	4b2a      	ldr	r3, [pc, #168]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cace:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cad2:	0a1b      	lsrs	r3, r3, #8
 800cad4:	f003 031f 	and.w	r3, r3, #31
 800cad8:	3301      	adds	r3, #1
 800cada:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cadc:	697a      	ldr	r2, [r7, #20]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cae4:	617b      	str	r3, [r7, #20]
        break;
 800cae6:	e050      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cae8:	4b23      	ldr	r3, [pc, #140]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d108      	bne.n	800cb06 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800caf4:	4b20      	ldr	r3, [pc, #128]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cafc:	4a1f      	ldr	r2, [pc, #124]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cafe:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb02:	613b      	str	r3, [r7, #16]
 800cb04:	e007      	b.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800cb06:	4b1c      	ldr	r3, [pc, #112]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb0e:	4a1c      	ldr	r2, [pc, #112]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cb10:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb14:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800cb16:	4b18      	ldr	r3, [pc, #96]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cb18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb1c:	0e1b      	lsrs	r3, r3, #24
 800cb1e:	f003 030f 	and.w	r3, r3, #15
 800cb22:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800cb24:	4b14      	ldr	r3, [pc, #80]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cb2a:	099b      	lsrs	r3, r3, #6
 800cb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	fb03 f202 	mul.w	r2, r3, r2
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb3c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800cb3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cb44:	f003 031f 	and.w	r3, r3, #31
 800cb48:	3301      	adds	r3, #1
 800cb4a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb54:	617b      	str	r3, [r7, #20]
        break;
 800cb56:	e018      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb58:	4b0a      	ldr	r3, [pc, #40]	@ (800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800cb5a:	617b      	str	r3, [r7, #20]
        break;
 800cb5c:	e015      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800cb5e:	4b06      	ldr	r3, [pc, #24]	@ (800cb78 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d102      	bne.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800cb6a:	4b04      	ldr	r3, [pc, #16]	@ (800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800cb6c:	617b      	str	r3, [r7, #20]
        break;
 800cb6e:	e00c      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
          frequency = HSE_VALUE;
 800cb70:	4b03      	ldr	r3, [pc, #12]	@ (800cb80 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800cb72:	617b      	str	r3, [r7, #20]
        break;
 800cb74:	e009      	b.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
 800cb76:	bf00      	nop
 800cb78:	40023800 	.word	0x40023800
 800cb7c:	00f42400 	.word	0x00f42400
 800cb80:	017d7840 	.word	0x017d7840
 800cb84:	00bb8000 	.word	0x00bb8000
        break;
 800cb88:	bf00      	nop
      }
    }
  }

  return frequency;
 800cb8a:	697b      	ldr	r3, [r7, #20]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	371c      	adds	r7, #28
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e071      	b.n	800cc92 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	7f5b      	ldrb	r3, [r3, #29]
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d105      	bne.n	800cbc4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7f5 ff64 	bl	8002a8c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f003 0310 	and.w	r3, r3, #16
 800cbd4:	2b10      	cmp	r3, #16
 800cbd6:	d053      	beq.n	800cc80 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	22ca      	movs	r2, #202	@ 0xca
 800cbde:	625a      	str	r2, [r3, #36]	@ 0x24
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2253      	movs	r2, #83	@ 0x53
 800cbe6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fac7 	bl	800d17c <RTC_EnterInitMode>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cbf2:	7bfb      	ldrb	r3, [r7, #15]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d12a      	bne.n	800cc4e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	6899      	ldr	r1, [r3, #8]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	4b26      	ldr	r3, [pc, #152]	@ (800cc9c <HAL_RTC_Init+0x104>)
 800cc04:	400b      	ands	r3, r1
 800cc06:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6899      	ldr	r1, [r3, #8]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	691b      	ldr	r3, [r3, #16]
 800cc16:	431a      	orrs	r2, r3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	431a      	orrs	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	430a      	orrs	r2, r1
 800cc24:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	68d2      	ldr	r2, [r2, #12]
 800cc2e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	6919      	ldr	r1, [r3, #16]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	041a      	lsls	r2, r3, #16
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	430a      	orrs	r2, r1
 800cc42:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fad0 	bl	800d1ea <RTC_ExitInitMode>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d110      	bne.n	800cc76 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f022 0208 	bic.w	r2, r2, #8
 800cc62:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	699a      	ldr	r2, [r3, #24]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	430a      	orrs	r2, r1
 800cc74:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	22ff      	movs	r2, #255	@ 0xff
 800cc7c:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc7e:	e001      	b.n	800cc84 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800cc80:	2300      	movs	r3, #0
 800cc82:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d102      	bne.n	800cc90 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800cc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	ff8fffbf 	.word	0xff8fffbf

0800cca0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ccac:	2300      	movs	r3, #0
 800ccae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	7f1b      	ldrb	r3, [r3, #28]
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d101      	bne.n	800ccbc <HAL_RTC_SetTime+0x1c>
 800ccb8:	2302      	movs	r3, #2
 800ccba:	e085      	b.n	800cdc8 <HAL_RTC_SetTime+0x128>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d126      	bne.n	800cd1c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d102      	bne.n	800cce2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2200      	movs	r2, #0
 800cce0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 faa4 	bl	800d234 <RTC_ByteToBcd2>
 800ccec:	4603      	mov	r3, r0
 800ccee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	785b      	ldrb	r3, [r3, #1]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 fa9d 	bl	800d234 <RTC_ByteToBcd2>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ccfe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	789b      	ldrb	r3, [r3, #2]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 fa95 	bl	800d234 <RTC_ByteToBcd2>
 800cd0a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cd0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	78db      	ldrb	r3, [r3, #3]
 800cd14:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cd16:	4313      	orrs	r3, r2
 800cd18:	617b      	str	r3, [r7, #20]
 800cd1a:	e018      	b.n	800cd4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d102      	bne.n	800cd30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	785b      	ldrb	r3, [r3, #1]
 800cd3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd3c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cd3e:	68ba      	ldr	r2, [r7, #8]
 800cd40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cd42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	78db      	ldrb	r3, [r3, #3]
 800cd48:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	22ca      	movs	r2, #202	@ 0xca
 800cd54:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2253      	movs	r2, #83	@ 0x53
 800cd5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cd5e:	68f8      	ldr	r0, [r7, #12]
 800cd60:	f000 fa0c 	bl	800d17c <RTC_EnterInitMode>
 800cd64:	4603      	mov	r3, r0
 800cd66:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cd68:	7cfb      	ldrb	r3, [r7, #19]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d11e      	bne.n	800cdac <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	6979      	ldr	r1, [r7, #20]
 800cd74:	4b16      	ldr	r3, [pc, #88]	@ (800cdd0 <HAL_RTC_SetTime+0x130>)
 800cd76:	400b      	ands	r3, r1
 800cd78:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	689a      	ldr	r2, [r3, #8]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800cd88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6899      	ldr	r1, [r3, #8]
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	68da      	ldr	r2, [r3, #12]
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	691b      	ldr	r3, [r3, #16]
 800cd98:	431a      	orrs	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f000 fa21 	bl	800d1ea <RTC_ExitInitMode>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cdac:	7cfb      	ldrb	r3, [r7, #19]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d102      	bne.n	800cdb8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	22ff      	movs	r2, #255	@ 0xff
 800cdbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	771a      	strb	r2, [r3, #28]

  return status;
 800cdc6:	7cfb      	ldrb	r3, [r7, #19]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	371c      	adds	r7, #28
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd90      	pop	{r4, r7, pc}
 800cdd0:	007f7f7f 	.word	0x007f7f7f

0800cdd4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cdd4:	b590      	push	{r4, r7, lr}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	7f1b      	ldrb	r3, [r3, #28]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d101      	bne.n	800cdf0 <HAL_RTC_SetDate+0x1c>
 800cdec:	2302      	movs	r3, #2
 800cdee:	e06f      	b.n	800ced0 <HAL_RTC_SetDate+0xfc>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d10e      	bne.n	800ce20 <HAL_RTC_SetDate+0x4c>
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	f003 0310 	and.w	r3, r3, #16
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d008      	beq.n	800ce20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	785b      	ldrb	r3, [r3, #1]
 800ce12:	f023 0310 	bic.w	r3, r3, #16
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	330a      	adds	r3, #10
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d11c      	bne.n	800ce60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	78db      	ldrb	r3, [r3, #3]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 fa02 	bl	800d234 <RTC_ByteToBcd2>
 800ce30:	4603      	mov	r3, r0
 800ce32:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	785b      	ldrb	r3, [r3, #1]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 f9fb 	bl	800d234 <RTC_ByteToBcd2>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ce42:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	789b      	ldrb	r3, [r3, #2]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 f9f3 	bl	800d234 <RTC_ByteToBcd2>
 800ce4e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ce50:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	617b      	str	r3, [r7, #20]
 800ce5e:	e00e      	b.n	800ce7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	78db      	ldrb	r3, [r3, #3]
 800ce64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	785b      	ldrb	r3, [r3, #1]
 800ce6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ce6c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ce6e:	68ba      	ldr	r2, [r7, #8]
 800ce70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ce72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	22ca      	movs	r2, #202	@ 0xca
 800ce84:	625a      	str	r2, [r3, #36]	@ 0x24
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2253      	movs	r2, #83	@ 0x53
 800ce8c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ce8e:	68f8      	ldr	r0, [r7, #12]
 800ce90:	f000 f974 	bl	800d17c <RTC_EnterInitMode>
 800ce94:	4603      	mov	r3, r0
 800ce96:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ce98:	7cfb      	ldrb	r3, [r7, #19]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10a      	bne.n	800ceb4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	6979      	ldr	r1, [r7, #20]
 800cea4:	4b0c      	ldr	r3, [pc, #48]	@ (800ced8 <HAL_RTC_SetDate+0x104>)
 800cea6:	400b      	ands	r3, r1
 800cea8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f000 f99d 	bl	800d1ea <RTC_ExitInitMode>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ceb4:	7cfb      	ldrb	r3, [r7, #19]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2201      	movs	r2, #1
 800cebe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	22ff      	movs	r2, #255	@ 0xff
 800cec6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2200      	movs	r2, #0
 800cecc:	771a      	strb	r2, [r3, #28]

  return status;
 800cece:	7cfb      	ldrb	r3, [r7, #19]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	371c      	adds	r7, #28
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd90      	pop	{r4, r7, pc}
 800ced8:	00ffff3f 	.word	0x00ffff3f

0800cedc <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800cedc:	b590      	push	{r4, r7, lr}
 800cede:	b089      	sub	sp, #36	@ 0x24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800cee8:	2300      	movs	r3, #0
 800ceea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800ceec:	2300      	movs	r3, #0
 800ceee:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800cef0:	2300      	movs	r3, #0
 800cef2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	7f1b      	ldrb	r3, [r3, #28]
 800cef8:	2b01      	cmp	r3, #1
 800cefa:	d101      	bne.n	800cf00 <HAL_RTC_SetAlarm+0x24>
 800cefc:	2302      	movs	r3, #2
 800cefe:	e113      	b.n	800d128 <HAL_RTC_SetAlarm+0x24c>
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2201      	movs	r2, #1
 800cf04:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2202      	movs	r2, #2
 800cf0a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d137      	bne.n	800cf82 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2200      	movs	r2, #0
 800cf24:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 f982 	bl	800d234 <RTC_ByteToBcd2>
 800cf30:	4603      	mov	r3, r0
 800cf32:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	785b      	ldrb	r3, [r3, #1]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f97b 	bl	800d234 <RTC_ByteToBcd2>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cf42:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	789b      	ldrb	r3, [r3, #2]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 f973 	bl	800d234 <RTC_ByteToBcd2>
 800cf4e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800cf50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	78db      	ldrb	r3, [r3, #3]
 800cf58:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800cf5a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f000 f965 	bl	800d234 <RTC_ByteToBcd2>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800cf6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800cf76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	61fb      	str	r3, [r7, #28]
 800cf80:	e023      	b.n	800cfca <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	2200      	movs	r2, #0
 800cf94:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	785b      	ldrb	r3, [r3, #1]
 800cfa0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cfa2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800cfa8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	78db      	ldrb	r3, [r3, #3]
 800cfae:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800cfb0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cfb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800cfba:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800cfc0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	22ca      	movs	r2, #202	@ 0xca
 800cfdc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2253      	movs	r2, #83	@ 0x53
 800cfe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfee:	d148      	bne.n	800d082 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	689a      	ldr	r2, [r3, #8]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cffe:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	689a      	ldr	r2, [r3, #8]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d00e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	b2da      	uxtb	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800d020:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d022:	f7f8 faa7 	bl	8005574 <HAL_GetTick>
 800d026:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800d028:	e013      	b.n	800d052 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d02a:	f7f8 faa3 	bl	8005574 <HAL_GetTick>
 800d02e:	4602      	mov	r2, r0
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d038:	d90b      	bls.n	800d052 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	22ff      	movs	r2, #255	@ 0xff
 800d040:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2203      	movs	r2, #3
 800d046:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2200      	movs	r2, #0
 800d04c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d04e:	2303      	movs	r3, #3
 800d050:	e06a      	b.n	800d128 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0e4      	beq.n	800d02a <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	697a      	ldr	r2, [r7, #20]
 800d06e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	689a      	ldr	r2, [r3, #8]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d07e:	609a      	str	r2, [r3, #8]
 800d080:	e047      	b.n	800d112 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	689a      	ldr	r2, [r3, #8]
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d090:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d0a0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800d0b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d0b4:	f7f8 fa5e 	bl	8005574 <HAL_GetTick>
 800d0b8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800d0ba:	e013      	b.n	800d0e4 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d0bc:	f7f8 fa5a 	bl	8005574 <HAL_GetTick>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	69bb      	ldr	r3, [r7, #24]
 800d0c4:	1ad3      	subs	r3, r2, r3
 800d0c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d0ca:	d90b      	bls.n	800d0e4 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	22ff      	movs	r2, #255	@ 0xff
 800d0d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2203      	movs	r2, #3
 800d0d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e021      	b.n	800d128 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d0e4      	beq.n	800d0bc <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	69fa      	ldr	r2, [r7, #28]
 800d0f8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	689a      	ldr	r2, [r3, #8]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d110:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	22ff      	movs	r2, #255	@ 0xff
 800d118:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2201      	movs	r2, #1
 800d11e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2200      	movs	r2, #0
 800d124:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d126:	2300      	movs	r3, #0
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3724      	adds	r7, #36	@ 0x24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd90      	pop	{r4, r7, pc}

0800d130 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b084      	sub	sp, #16
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4a0d      	ldr	r2, [pc, #52]	@ (800d178 <HAL_RTC_WaitForSynchro+0x48>)
 800d142:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d144:	f7f8 fa16 	bl	8005574 <HAL_GetTick>
 800d148:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d14a:	e009      	b.n	800d160 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d14c:	f7f8 fa12 	bl	8005574 <HAL_GetTick>
 800d150:	4602      	mov	r2, r0
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d15a:	d901      	bls.n	800d160 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d15c:	2303      	movs	r3, #3
 800d15e:	e007      	b.n	800d170 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	f003 0320 	and.w	r3, r3, #32
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d0ee      	beq.n	800d14c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}
 800d178:	0001ff5f 	.word	0x0001ff5f

0800d17c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d188:	2300      	movs	r3, #0
 800d18a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d196:	2b00      	cmp	r3, #0
 800d198:	d122      	bne.n	800d1e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	68da      	ldr	r2, [r3, #12]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d1a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d1aa:	f7f8 f9e3 	bl	8005574 <HAL_GetTick>
 800d1ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d1b0:	e00c      	b.n	800d1cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d1b2:	f7f8 f9df 	bl	8005574 <HAL_GetTick>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d1c0:	d904      	bls.n	800d1cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2204      	movs	r2, #4
 800d1c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <RTC_EnterInitMode+0x64>
 800d1da:	7bfb      	ldrb	r3, [r7, #15]
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d1e8      	bne.n	800d1b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68da      	ldr	r2, [r3, #12]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d204:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689b      	ldr	r3, [r3, #8]
 800d20c:	f003 0320 	and.w	r3, r3, #32
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7ff ff8b 	bl	800d130 <HAL_RTC_WaitForSynchro>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2204      	movs	r2, #4
 800d224:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800d226:	2301      	movs	r3, #1
 800d228:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800d234:	b480      	push	{r7}
 800d236:	b085      	sub	sp, #20
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4603      	mov	r3, r0
 800d23c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d23e:	2300      	movs	r3, #0
 800d240:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800d242:	e005      	b.n	800d250 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	3301      	adds	r3, #1
 800d248:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	3b0a      	subs	r3, #10
 800d24e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800d250:	79fb      	ldrb	r3, [r7, #7]
 800d252:	2b09      	cmp	r3, #9
 800d254:	d8f6      	bhi.n	800d244 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	011b      	lsls	r3, r3, #4
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	79fb      	ldrb	r3, [r7, #7]
 800d260:	4313      	orrs	r3, r2
 800d262:	b2db      	uxtb	r3, r3
}
 800d264:	4618      	mov	r0, r3
 800d266:	3714      	adds	r7, #20
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800d278:	2300      	movs	r3, #0
 800d27a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800d280:	2300      	movs	r3, #0
 800d282:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e156      	b.n	800d53c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d294:	b2db      	uxtb	r3, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7f6 f8d6 	bl	8003454 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2202      	movs	r2, #2
 800d2ac:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 f95b 	bl	800d56c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d00c      	beq.n	800d2d8 <HAL_SAI_Init+0x68>
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d80d      	bhi.n	800d2de <HAL_SAI_Init+0x6e>
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <HAL_SAI_Init+0x5c>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d003      	beq.n	800d2d2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800d2ca:	e008      	b.n	800d2de <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	61fb      	str	r3, [r7, #28]
      break;
 800d2d0:	e006      	b.n	800d2e0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800d2d2:	2310      	movs	r3, #16
 800d2d4:	61fb      	str	r3, [r7, #28]
      break;
 800d2d6:	e003      	b.n	800d2e0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800d2d8:	2320      	movs	r3, #32
 800d2da:	61fb      	str	r3, [r7, #28]
      break;
 800d2dc:	e000      	b.n	800d2e0 <HAL_SAI_Init+0x70>
      break;
 800d2de:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d81e      	bhi.n	800d326 <HAL_SAI_Init+0xb6>
 800d2e8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2f0 <HAL_SAI_Init+0x80>)
 800d2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ee:	bf00      	nop
 800d2f0:	0800d301 	.word	0x0800d301
 800d2f4:	0800d307 	.word	0x0800d307
 800d2f8:	0800d30f 	.word	0x0800d30f
 800d2fc:	0800d317 	.word	0x0800d317
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]
    }
    break;
 800d304:	e010      	b.n	800d328 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800d306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d30a:	617b      	str	r3, [r7, #20]
    }
    break;
 800d30c:	e00c      	b.n	800d328 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d30e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d312:	617b      	str	r3, [r7, #20]
    }
    break;
 800d314:	e008      	b.n	800d328 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800d316:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d31a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800d31c:	69fb      	ldr	r3, [r7, #28]
 800d31e:	f043 0301 	orr.w	r3, r3, #1
 800d322:	61fb      	str	r3, [r7, #28]
    }
    break;
 800d324:	e000      	b.n	800d328 <HAL_SAI_Init+0xb8>
    default:
      break;
 800d326:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4a85      	ldr	r2, [pc, #532]	@ (800d544 <HAL_SAI_Init+0x2d4>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d004      	beq.n	800d33c <HAL_SAI_Init+0xcc>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	4a84      	ldr	r2, [pc, #528]	@ (800d548 <HAL_SAI_Init+0x2d8>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d103      	bne.n	800d344 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800d33c:	4a83      	ldr	r2, [pc, #524]	@ (800d54c <HAL_SAI_Init+0x2dc>)
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	e002      	b.n	800d34a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800d344:	4a82      	ldr	r2, [pc, #520]	@ (800d550 <HAL_SAI_Init+0x2e0>)
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	69db      	ldr	r3, [r3, #28]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d04c      	beq.n	800d3ec <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a7a      	ldr	r2, [pc, #488]	@ (800d544 <HAL_SAI_Init+0x2d4>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d004      	beq.n	800d36a <HAL_SAI_Init+0xfa>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a78      	ldr	r2, [pc, #480]	@ (800d548 <HAL_SAI_Init+0x2d8>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d104      	bne.n	800d374 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800d36a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800d36e:	f7ff faa5 	bl	800c8bc <HAL_RCCEx_GetPeriphCLKFreq>
 800d372:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a76      	ldr	r2, [pc, #472]	@ (800d554 <HAL_SAI_Init+0x2e4>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d004      	beq.n	800d388 <HAL_SAI_Init+0x118>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	4a75      	ldr	r2, [pc, #468]	@ (800d558 <HAL_SAI_Init+0x2e8>)
 800d384:	4293      	cmp	r3, r2
 800d386:	d104      	bne.n	800d392 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800d388:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800d38c:	f7ff fa96 	bl	800c8bc <HAL_RCCEx_GetPeriphCLKFreq>
 800d390:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800d392:	693a      	ldr	r2, [r7, #16]
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	461a      	mov	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	025b      	lsls	r3, r3, #9
 800d3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4a6b      	ldr	r2, [pc, #428]	@ (800d55c <HAL_SAI_Init+0x2ec>)
 800d3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b2:	08da      	lsrs	r2, r3, #3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800d3b8:	68f9      	ldr	r1, [r7, #12]
 800d3ba:	4b68      	ldr	r3, [pc, #416]	@ (800d55c <HAL_SAI_Init+0x2ec>)
 800d3bc:	fba3 2301 	umull	r2, r3, r3, r1
 800d3c0:	08da      	lsrs	r2, r3, #3
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	005b      	lsls	r3, r3, #1
 800d3ca:	1aca      	subs	r2, r1, r3
 800d3cc:	2a08      	cmp	r2, #8
 800d3ce:	d904      	bls.n	800d3da <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6a1b      	ldr	r3, [r3, #32]
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3de:	2b04      	cmp	r3, #4
 800d3e0:	d104      	bne.n	800d3ec <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	085a      	lsrs	r2, r3, #1
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <HAL_SAI_Init+0x18c>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d109      	bne.n	800d410 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d400:	2b01      	cmp	r3, #1
 800d402:	d101      	bne.n	800d408 <HAL_SAI_Init+0x198>
 800d404:	2300      	movs	r3, #0
 800d406:	e001      	b.n	800d40c <HAL_SAI_Init+0x19c>
 800d408:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d40c:	61bb      	str	r3, [r7, #24]
 800d40e:	e008      	b.n	800d422 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d414:	2b01      	cmp	r3, #1
 800d416:	d102      	bne.n	800d41e <HAL_SAI_Init+0x1ae>
 800d418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d41c:	e000      	b.n	800d420 <HAL_SAI_Init+0x1b0>
 800d41e:	2300      	movs	r3, #0
 800d420:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6819      	ldr	r1, [r3, #0]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	4b4c      	ldr	r3, [pc, #304]	@ (800d560 <HAL_SAI_Init+0x2f0>)
 800d42e:	400b      	ands	r3, r1
 800d430:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	6819      	ldr	r1, [r3, #0]
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d440:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d446:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d44c:	431a      	orrs	r2, r3
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800d45a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800d466:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a1b      	ldr	r3, [r3, #32]
 800d46c:	051b      	lsls	r3, r3, #20
 800d46e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	430a      	orrs	r2, r1
 800d476:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6859      	ldr	r1, [r3, #4]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	4b38      	ldr	r3, [pc, #224]	@ (800d564 <HAL_SAI_Init+0x2f4>)
 800d484:	400b      	ands	r3, r1
 800d486:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	6859      	ldr	r1, [r3, #4]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	699a      	ldr	r2, [r3, #24]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d496:	431a      	orrs	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d49c:	431a      	orrs	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	430a      	orrs	r2, r1
 800d4a4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	6899      	ldr	r1, [r3, #8]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	4b2d      	ldr	r3, [pc, #180]	@ (800d568 <HAL_SAI_Init+0x2f8>)
 800d4b2:	400b      	ands	r3, r1
 800d4b4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6899      	ldr	r1, [r3, #8]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4c0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d4c6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800d4cc:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800d4d2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800d4dc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	430a      	orrs	r2, r1
 800d4e4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68d9      	ldr	r1, [r3, #12]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800d4f4:	400b      	ands	r3, r1
 800d4f6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	68d9      	ldr	r1, [r3, #12]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d506:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d50c:	041b      	lsls	r3, r3, #16
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d514:	3b01      	subs	r3, #1
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	430a      	orrs	r2, r1
 800d520:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2200      	movs	r2, #0
 800d526:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2200      	movs	r2, #0
 800d536:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	40015804 	.word	0x40015804
 800d548:	40015824 	.word	0x40015824
 800d54c:	40015800 	.word	0x40015800
 800d550:	40015c00 	.word	0x40015c00
 800d554:	40015c04 	.word	0x40015c04
 800d558:	40015c24 	.word	0x40015c24
 800d55c:	cccccccd 	.word	0xcccccccd
 800d560:	ff05c010 	.word	0xff05c010
 800d564:	ffff1ff0 	.word	0xffff1ff0
 800d568:	fff88000 	.word	0xfff88000

0800d56c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800d574:	4b17      	ldr	r3, [pc, #92]	@ (800d5d4 <SAI_Disable+0x68>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	4a17      	ldr	r2, [pc, #92]	@ (800d5d8 <SAI_Disable+0x6c>)
 800d57a:	fba2 2303 	umull	r2, r3, r2, r3
 800d57e:	0b1b      	lsrs	r3, r3, #12
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d596:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	1e5a      	subs	r2, r3, #1
 800d59c:	60fa      	str	r2, [r7, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d10a      	bne.n	800d5b8 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	72fb      	strb	r3, [r7, #11]
      break;
 800d5b6:	e006      	b.n	800d5c6 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1e8      	bne.n	800d598 <SAI_Disable+0x2c>

  return status;
 800d5c6:	7afb      	ldrb	r3, [r7, #11]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3714      	adds	r7, #20
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d2:	4770      	bx	lr
 800d5d4:	20000018 	.word	0x20000018
 800d5d8:	95cbec1b 	.word	0x95cbec1b

0800d5dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e025      	b.n	800d63c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d106      	bne.n	800d60a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7f5 ff1b 	bl	8003440 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2202      	movs	r2, #2
 800d60e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f001 fec7 	bl	800f3b0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6818      	ldr	r0, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	461a      	mov	r2, r3
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	f001 ff1b 	bl	800f468 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d656:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d658:	7dfb      	ldrb	r3, [r7, #23]
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d101      	bne.n	800d662 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d65e:	2302      	movs	r3, #2
 800d660:	e021      	b.n	800d6a6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b01      	cmp	r3, #1
 800d666:	d002      	beq.n	800d66e <HAL_SDRAM_SendCommand+0x2a>
 800d668:	7dfb      	ldrb	r3, [r7, #23]
 800d66a:	2b05      	cmp	r3, #5
 800d66c:	d118      	bne.n	800d6a0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2202      	movs	r2, #2
 800d672:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	687a      	ldr	r2, [r7, #4]
 800d67c:	68b9      	ldr	r1, [r7, #8]
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 ff5c 	bl	800f53c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d104      	bne.n	800d696 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2205      	movs	r2, #5
 800d690:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d694:	e006      	b.n	800d6a4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d69e:	e001      	b.n	800d6a4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b02      	cmp	r3, #2
 800d6c2:	d101      	bne.n	800d6c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	e016      	b.n	800d6f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d10f      	bne.n	800d6f4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2202      	movs	r2, #2
 800d6d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	6839      	ldr	r1, [r7, #0]
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f001 ff4e 	bl	800f584 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	e000      	b.n	800d6f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
	...

0800d700 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e04c      	b.n	800d7ac <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d106      	bne.n	800d72c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7f5 fa06 	bl	8002b38 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2202      	movs	r2, #2
 800d730:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0203 	bic.w	r2, r2, #3
 800d742:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4b19      	ldr	r3, [pc, #100]	@ (800d7b4 <HAL_SPDIFRX_Init+0xb4>)
 800d750:	4013      	ands	r3, r2
 800d752:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d75c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d762:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d768:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d76e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d774:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d77a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d780:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d786:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d78c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d78e:	68fa      	ldr	r2, [r7, #12]
 800d790:	4313      	orrs	r3, r2
 800d792:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}
 800d7b4:	fff88407 	.word	0xfff88407

0800d7b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e09d      	b.n	800d906 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d108      	bne.n	800d7e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d7da:	d009      	beq.n	800d7f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	61da      	str	r2, [r3, #28]
 800d7e2:	e005      	b.n	800d7f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2200      	movs	r2, #0
 800d806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7f5 f9fa 	bl	8002c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2202      	movs	r2, #2
 800d814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	681a      	ldr	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d830:	d902      	bls.n	800d838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d832:	2300      	movs	r3, #0
 800d834:	60fb      	str	r3, [r7, #12]
 800d836:	e002      	b.n	800d83e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d83c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d846:	d007      	beq.n	800d858 <HAL_SPI_Init+0xa0>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	68db      	ldr	r3, [r3, #12]
 800d84c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d850:	d002      	beq.n	800d858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2200      	movs	r2, #0
 800d856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	685b      	ldr	r3, [r3, #4]
 800d85c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	691b      	ldr	r3, [r3, #16]
 800d86e:	f003 0302 	and.w	r3, r3, #2
 800d872:	431a      	orrs	r2, r3
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	431a      	orrs	r2, r3
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d886:	431a      	orrs	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d890:	431a      	orrs	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d89a:	ea42 0103 	orr.w	r1, r2, r3
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	699b      	ldr	r3, [r3, #24]
 800d8b2:	0c1b      	lsrs	r3, r3, #16
 800d8b4:	f003 0204 	and.w	r2, r3, #4
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	431a      	orrs	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8c6:	f003 0308 	and.w	r3, r3, #8
 800d8ca:	431a      	orrs	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d8d4:	ea42 0103 	orr.w	r1, r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	69da      	ldr	r2, [r3, #28]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d8f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b082      	sub	sp, #8
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	e049      	b.n	800d9b4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d106      	bne.n	800d93a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7f5 f9d9 	bl	8002cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2202      	movs	r2, #2
 800d93e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3304      	adds	r3, #4
 800d94a:	4619      	mov	r1, r3
 800d94c:	4610      	mov	r0, r2
 800d94e:	f000 fc11 	bl	800e174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2201      	movs	r2, #1
 800d956:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2201      	movs	r2, #1
 800d95e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2201      	movs	r2, #1
 800d966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2201      	movs	r2, #1
 800d976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9ca:	b2db      	uxtb	r3, r3
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d001      	beq.n	800d9d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e054      	b.n	800da7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2202      	movs	r2, #2
 800d9d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	68da      	ldr	r2, [r3, #12]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f042 0201 	orr.w	r2, r2, #1
 800d9ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a26      	ldr	r2, [pc, #152]	@ (800da8c <HAL_TIM_Base_Start_IT+0xd0>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d022      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9fe:	d01d      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a22      	ldr	r2, [pc, #136]	@ (800da90 <HAL_TIM_Base_Start_IT+0xd4>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d018      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a21      	ldr	r2, [pc, #132]	@ (800da94 <HAL_TIM_Base_Start_IT+0xd8>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d013      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a1f      	ldr	r2, [pc, #124]	@ (800da98 <HAL_TIM_Base_Start_IT+0xdc>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d00e      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a1e      	ldr	r2, [pc, #120]	@ (800da9c <HAL_TIM_Base_Start_IT+0xe0>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d009      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a1c      	ldr	r2, [pc, #112]	@ (800daa0 <HAL_TIM_Base_Start_IT+0xe4>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d004      	beq.n	800da3c <HAL_TIM_Base_Start_IT+0x80>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a1b      	ldr	r2, [pc, #108]	@ (800daa4 <HAL_TIM_Base_Start_IT+0xe8>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d115      	bne.n	800da68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689a      	ldr	r2, [r3, #8]
 800da42:	4b19      	ldr	r3, [pc, #100]	@ (800daa8 <HAL_TIM_Base_Start_IT+0xec>)
 800da44:	4013      	ands	r3, r2
 800da46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b06      	cmp	r3, #6
 800da4c:	d015      	beq.n	800da7a <HAL_TIM_Base_Start_IT+0xbe>
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da54:	d011      	beq.n	800da7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f042 0201 	orr.w	r2, r2, #1
 800da64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da66:	e008      	b.n	800da7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f042 0201 	orr.w	r2, r2, #1
 800da76:	601a      	str	r2, [r3, #0]
 800da78:	e000      	b.n	800da7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3714      	adds	r7, #20
 800da82:	46bd      	mov	sp, r7
 800da84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	40010000 	.word	0x40010000
 800da90:	40000400 	.word	0x40000400
 800da94:	40000800 	.word	0x40000800
 800da98:	40000c00 	.word	0x40000c00
 800da9c:	40010400 	.word	0x40010400
 800daa0:	40014000 	.word	0x40014000
 800daa4:	40001800 	.word	0x40001800
 800daa8:	00010007 	.word	0x00010007

0800daac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d101      	bne.n	800dabe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800daba:	2301      	movs	r3, #1
 800dabc:	e049      	b.n	800db52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7f5 f952 	bl	8002d7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2202      	movs	r2, #2
 800dadc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	3304      	adds	r3, #4
 800dae8:	4619      	mov	r1, r3
 800daea:	4610      	mov	r0, r2
 800daec:	f000 fb42 	bl	800e174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2201      	movs	r2, #1
 800db04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2201      	movs	r2, #1
 800db14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2201      	movs	r2, #1
 800db1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2201      	movs	r2, #1
 800db24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2201      	movs	r2, #1
 800db3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db50:	2300      	movs	r3, #0
}
 800db52:	4618      	mov	r0, r3
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d020      	beq.n	800dbbe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f003 0302 	and.w	r3, r3, #2
 800db82:	2b00      	cmp	r3, #0
 800db84:	d01b      	beq.n	800dbbe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f06f 0202 	mvn.w	r2, #2
 800db8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2201      	movs	r2, #1
 800db94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	f003 0303 	and.w	r3, r3, #3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fac7 	bl	800e138 <HAL_TIM_IC_CaptureCallback>
 800dbaa:	e005      	b.n	800dbb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fab9 	bl	800e124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 faca 	bl	800e14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	f003 0304 	and.w	r3, r3, #4
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d020      	beq.n	800dc0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	f003 0304 	and.w	r3, r3, #4
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d01b      	beq.n	800dc0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f06f 0204 	mvn.w	r2, #4
 800dbda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2202      	movs	r2, #2
 800dbe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	699b      	ldr	r3, [r3, #24]
 800dbe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 faa1 	bl	800e138 <HAL_TIM_IC_CaptureCallback>
 800dbf6:	e005      	b.n	800dc04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 fa93 	bl	800e124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 faa4 	bl	800e14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	f003 0308 	and.w	r3, r3, #8
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d020      	beq.n	800dc56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f003 0308 	and.w	r3, r3, #8
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d01b      	beq.n	800dc56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f06f 0208 	mvn.w	r2, #8
 800dc26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2204      	movs	r2, #4
 800dc2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	69db      	ldr	r3, [r3, #28]
 800dc34:	f003 0303 	and.w	r3, r3, #3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d003      	beq.n	800dc44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 fa7b 	bl	800e138 <HAL_TIM_IC_CaptureCallback>
 800dc42:	e005      	b.n	800dc50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f000 fa6d 	bl	800e124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fa7e 	bl	800e14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	f003 0310 	and.w	r3, r3, #16
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d020      	beq.n	800dca2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f003 0310 	and.w	r3, r3, #16
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d01b      	beq.n	800dca2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f06f 0210 	mvn.w	r2, #16
 800dc72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2208      	movs	r2, #8
 800dc78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d003      	beq.n	800dc90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 fa55 	bl	800e138 <HAL_TIM_IC_CaptureCallback>
 800dc8e:	e005      	b.n	800dc9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fa47 	bl	800e124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fa58 	bl	800e14c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00c      	beq.n	800dcc6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d007      	beq.n	800dcc6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f06f 0201 	mvn.w	r2, #1
 800dcbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7f4 fa03 	bl	80020cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dcc6:	68bb      	ldr	r3, [r7, #8]
 800dcc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d104      	bne.n	800dcda <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00c      	beq.n	800dcf4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d007      	beq.n	800dcf4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dcec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fe7c 	bl	800e9ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00c      	beq.n	800dd18 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d007      	beq.n	800dd18 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dd10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fe74 	bl	800ea00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d00c      	beq.n	800dd3c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d007      	beq.n	800dd3c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f000 fa12 	bl	800e160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	f003 0320 	and.w	r3, r3, #32
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00c      	beq.n	800dd60 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f003 0320 	and.w	r3, r3, #32
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d007      	beq.n	800dd60 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	f06f 0220 	mvn.w	r2, #32
 800dd58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fe3c 	bl	800e9d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd60:	bf00      	nop
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d101      	bne.n	800dd86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd82:	2302      	movs	r3, #2
 800dd84:	e0ff      	b.n	800df86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2201      	movs	r2, #1
 800dd8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b14      	cmp	r3, #20
 800dd92:	f200 80f0 	bhi.w	800df76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd96:	a201      	add	r2, pc, #4	@ (adr r2, 800dd9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd9c:	0800ddf1 	.word	0x0800ddf1
 800dda0:	0800df77 	.word	0x0800df77
 800dda4:	0800df77 	.word	0x0800df77
 800dda8:	0800df77 	.word	0x0800df77
 800ddac:	0800de31 	.word	0x0800de31
 800ddb0:	0800df77 	.word	0x0800df77
 800ddb4:	0800df77 	.word	0x0800df77
 800ddb8:	0800df77 	.word	0x0800df77
 800ddbc:	0800de73 	.word	0x0800de73
 800ddc0:	0800df77 	.word	0x0800df77
 800ddc4:	0800df77 	.word	0x0800df77
 800ddc8:	0800df77 	.word	0x0800df77
 800ddcc:	0800deb3 	.word	0x0800deb3
 800ddd0:	0800df77 	.word	0x0800df77
 800ddd4:	0800df77 	.word	0x0800df77
 800ddd8:	0800df77 	.word	0x0800df77
 800dddc:	0800def5 	.word	0x0800def5
 800dde0:	0800df77 	.word	0x0800df77
 800dde4:	0800df77 	.word	0x0800df77
 800dde8:	0800df77 	.word	0x0800df77
 800ddec:	0800df35 	.word	0x0800df35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	68b9      	ldr	r1, [r7, #8]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 fa68 	bl	800e2cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	699a      	ldr	r2, [r3, #24]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f042 0208 	orr.w	r2, r2, #8
 800de0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	699a      	ldr	r2, [r3, #24]
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f022 0204 	bic.w	r2, r2, #4
 800de1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6999      	ldr	r1, [r3, #24]
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	691a      	ldr	r2, [r3, #16]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	430a      	orrs	r2, r1
 800de2c:	619a      	str	r2, [r3, #24]
      break;
 800de2e:	e0a5      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68b9      	ldr	r1, [r7, #8]
 800de36:	4618      	mov	r0, r3
 800de38:	f000 faba 	bl	800e3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	699a      	ldr	r2, [r3, #24]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800de4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	699a      	ldr	r2, [r3, #24]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800de5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	6999      	ldr	r1, [r3, #24]
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	691b      	ldr	r3, [r3, #16]
 800de66:	021a      	lsls	r2, r3, #8
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	430a      	orrs	r2, r1
 800de6e:	619a      	str	r2, [r3, #24]
      break;
 800de70:	e084      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	68b9      	ldr	r1, [r7, #8]
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 fb11 	bl	800e4a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69da      	ldr	r2, [r3, #28]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f042 0208 	orr.w	r2, r2, #8
 800de8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	69da      	ldr	r2, [r3, #28]
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f022 0204 	bic.w	r2, r2, #4
 800de9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	69d9      	ldr	r1, [r3, #28]
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	691a      	ldr	r2, [r3, #16]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	430a      	orrs	r2, r1
 800deae:	61da      	str	r2, [r3, #28]
      break;
 800deb0:	e064      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	68b9      	ldr	r1, [r7, #8]
 800deb8:	4618      	mov	r0, r3
 800deba:	f000 fb67 	bl	800e58c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	69da      	ldr	r2, [r3, #28]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800decc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	69da      	ldr	r2, [r3, #28]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dedc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	69d9      	ldr	r1, [r3, #28]
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	021a      	lsls	r2, r3, #8
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	430a      	orrs	r2, r1
 800def0:	61da      	str	r2, [r3, #28]
      break;
 800def2:	e043      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	68b9      	ldr	r1, [r7, #8]
 800defa:	4618      	mov	r0, r3
 800defc:	f000 fb9e 	bl	800e63c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f042 0208 	orr.w	r2, r2, #8
 800df0e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0204 	bic.w	r2, r2, #4
 800df1e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	691a      	ldr	r2, [r3, #16]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	430a      	orrs	r2, r1
 800df30:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df32:	e023      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	68b9      	ldr	r1, [r7, #8]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 fbd0 	bl	800e6e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df4e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df5e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	691b      	ldr	r3, [r3, #16]
 800df6a:	021a      	lsls	r2, r3, #8
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	430a      	orrs	r2, r1
 800df72:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800df74:	e002      	b.n	800df7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	75fb      	strb	r3, [r7, #23]
      break;
 800df7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2200      	movs	r2, #0
 800df80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800df84:	7dfb      	ldrb	r3, [r7, #23]
}
 800df86:	4618      	mov	r0, r3
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop

0800df90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b084      	sub	sp, #16
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df9a:	2300      	movs	r3, #0
 800df9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d101      	bne.n	800dfac <HAL_TIM_ConfigClockSource+0x1c>
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	e0b4      	b.n	800e116 <HAL_TIM_ConfigClockSource+0x186>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2202      	movs	r2, #2
 800dfb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	4b56      	ldr	r3, [pc, #344]	@ (800e120 <HAL_TIM_ConfigClockSource+0x190>)
 800dfc8:	4013      	ands	r3, r2
 800dfca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dfd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	68ba      	ldr	r2, [r7, #8]
 800dfda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfe4:	d03e      	beq.n	800e064 <HAL_TIM_ConfigClockSource+0xd4>
 800dfe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dfea:	f200 8087 	bhi.w	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800dfee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dff2:	f000 8086 	beq.w	800e102 <HAL_TIM_ConfigClockSource+0x172>
 800dff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dffa:	d87f      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800dffc:	2b70      	cmp	r3, #112	@ 0x70
 800dffe:	d01a      	beq.n	800e036 <HAL_TIM_ConfigClockSource+0xa6>
 800e000:	2b70      	cmp	r3, #112	@ 0x70
 800e002:	d87b      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e004:	2b60      	cmp	r3, #96	@ 0x60
 800e006:	d050      	beq.n	800e0aa <HAL_TIM_ConfigClockSource+0x11a>
 800e008:	2b60      	cmp	r3, #96	@ 0x60
 800e00a:	d877      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e00c:	2b50      	cmp	r3, #80	@ 0x50
 800e00e:	d03c      	beq.n	800e08a <HAL_TIM_ConfigClockSource+0xfa>
 800e010:	2b50      	cmp	r3, #80	@ 0x50
 800e012:	d873      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e014:	2b40      	cmp	r3, #64	@ 0x40
 800e016:	d058      	beq.n	800e0ca <HAL_TIM_ConfigClockSource+0x13a>
 800e018:	2b40      	cmp	r3, #64	@ 0x40
 800e01a:	d86f      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e01c:	2b30      	cmp	r3, #48	@ 0x30
 800e01e:	d064      	beq.n	800e0ea <HAL_TIM_ConfigClockSource+0x15a>
 800e020:	2b30      	cmp	r3, #48	@ 0x30
 800e022:	d86b      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e024:	2b20      	cmp	r3, #32
 800e026:	d060      	beq.n	800e0ea <HAL_TIM_ConfigClockSource+0x15a>
 800e028:	2b20      	cmp	r3, #32
 800e02a:	d867      	bhi.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d05c      	beq.n	800e0ea <HAL_TIM_ConfigClockSource+0x15a>
 800e030:	2b10      	cmp	r3, #16
 800e032:	d05a      	beq.n	800e0ea <HAL_TIM_ConfigClockSource+0x15a>
 800e034:	e062      	b.n	800e0fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e046:	f000 fc19 	bl	800e87c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	689b      	ldr	r3, [r3, #8]
 800e050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	609a      	str	r2, [r3, #8]
      break;
 800e062:	e04f      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e074:	f000 fc02 	bl	800e87c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	689a      	ldr	r2, [r3, #8]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e086:	609a      	str	r2, [r3, #8]
      break;
 800e088:	e03c      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e096:	461a      	mov	r2, r3
 800e098:	f000 fb76 	bl	800e788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2150      	movs	r1, #80	@ 0x50
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 fbcf 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e0a8:	e02c      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	f000 fb95 	bl	800e7e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	2160      	movs	r1, #96	@ 0x60
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f000 fbbf 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e0c8:	e01c      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f000 fb56 	bl	800e788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2140      	movs	r1, #64	@ 0x40
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fbaf 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e0e8:	e00c      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	f000 fba6 	bl	800e846 <TIM_ITRx_SetConfig>
      break;
 800e0fa:	e003      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e100:	e000      	b.n	800e104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2201      	movs	r2, #1
 800e108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e114:	7bfb      	ldrb	r3, [r7, #15]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	fffeff88 	.word	0xfffeff88

0800e124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e154:	bf00      	nop
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e160:	b480      	push	{r7}
 800e162:	b083      	sub	sp, #12
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e168:	bf00      	nop
 800e16a:	370c      	adds	r7, #12
 800e16c:	46bd      	mov	sp, r7
 800e16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e172:	4770      	bx	lr

0800e174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	4a46      	ldr	r2, [pc, #280]	@ (800e2a0 <TIM_Base_SetConfig+0x12c>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	d013      	beq.n	800e1b4 <TIM_Base_SetConfig+0x40>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e192:	d00f      	beq.n	800e1b4 <TIM_Base_SetConfig+0x40>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	4a43      	ldr	r2, [pc, #268]	@ (800e2a4 <TIM_Base_SetConfig+0x130>)
 800e198:	4293      	cmp	r3, r2
 800e19a:	d00b      	beq.n	800e1b4 <TIM_Base_SetConfig+0x40>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	4a42      	ldr	r2, [pc, #264]	@ (800e2a8 <TIM_Base_SetConfig+0x134>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d007      	beq.n	800e1b4 <TIM_Base_SetConfig+0x40>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	4a41      	ldr	r2, [pc, #260]	@ (800e2ac <TIM_Base_SetConfig+0x138>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d003      	beq.n	800e1b4 <TIM_Base_SetConfig+0x40>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	4a40      	ldr	r2, [pc, #256]	@ (800e2b0 <TIM_Base_SetConfig+0x13c>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d108      	bne.n	800e1c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a35      	ldr	r2, [pc, #212]	@ (800e2a0 <TIM_Base_SetConfig+0x12c>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d02b      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1d4:	d027      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a32      	ldr	r2, [pc, #200]	@ (800e2a4 <TIM_Base_SetConfig+0x130>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d023      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a31      	ldr	r2, [pc, #196]	@ (800e2a8 <TIM_Base_SetConfig+0x134>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d01f      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a30      	ldr	r2, [pc, #192]	@ (800e2ac <TIM_Base_SetConfig+0x138>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d01b      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a2f      	ldr	r2, [pc, #188]	@ (800e2b0 <TIM_Base_SetConfig+0x13c>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d017      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a2e      	ldr	r2, [pc, #184]	@ (800e2b4 <TIM_Base_SetConfig+0x140>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d013      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a2d      	ldr	r2, [pc, #180]	@ (800e2b8 <TIM_Base_SetConfig+0x144>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d00f      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4a2c      	ldr	r2, [pc, #176]	@ (800e2bc <TIM_Base_SetConfig+0x148>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d00b      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a2b      	ldr	r2, [pc, #172]	@ (800e2c0 <TIM_Base_SetConfig+0x14c>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d007      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	4a2a      	ldr	r2, [pc, #168]	@ (800e2c4 <TIM_Base_SetConfig+0x150>)
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d003      	beq.n	800e226 <TIM_Base_SetConfig+0xb2>
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a29      	ldr	r2, [pc, #164]	@ (800e2c8 <TIM_Base_SetConfig+0x154>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d108      	bne.n	800e238 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e22c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	68db      	ldr	r3, [r3, #12]
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	4313      	orrs	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	4313      	orrs	r3, r2
 800e244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	689a      	ldr	r2, [r3, #8]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	4a10      	ldr	r2, [pc, #64]	@ (800e2a0 <TIM_Base_SetConfig+0x12c>)
 800e260:	4293      	cmp	r3, r2
 800e262:	d003      	beq.n	800e26c <TIM_Base_SetConfig+0xf8>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	4a12      	ldr	r2, [pc, #72]	@ (800e2b0 <TIM_Base_SetConfig+0x13c>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d103      	bne.n	800e274 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	691a      	ldr	r2, [r3, #16]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f003 0301 	and.w	r3, r3, #1
 800e282:	2b01      	cmp	r3, #1
 800e284:	d105      	bne.n	800e292 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	691b      	ldr	r3, [r3, #16]
 800e28a:	f023 0201 	bic.w	r2, r3, #1
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	611a      	str	r2, [r3, #16]
  }
}
 800e292:	bf00      	nop
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr
 800e29e:	bf00      	nop
 800e2a0:	40010000 	.word	0x40010000
 800e2a4:	40000400 	.word	0x40000400
 800e2a8:	40000800 	.word	0x40000800
 800e2ac:	40000c00 	.word	0x40000c00
 800e2b0:	40010400 	.word	0x40010400
 800e2b4:	40014000 	.word	0x40014000
 800e2b8:	40014400 	.word	0x40014400
 800e2bc:	40014800 	.word	0x40014800
 800e2c0:	40001800 	.word	0x40001800
 800e2c4:	40001c00 	.word	0x40001c00
 800e2c8:	40002000 	.word	0x40002000

0800e2cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6a1b      	ldr	r3, [r3, #32]
 800e2e0:	f023 0201 	bic.w	r2, r3, #1
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	4b2b      	ldr	r3, [pc, #172]	@ (800e3a4 <TIM_OC1_SetConfig+0xd8>)
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f023 0303 	bic.w	r3, r3, #3
 800e302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68fa      	ldr	r2, [r7, #12]
 800e30a:	4313      	orrs	r3, r2
 800e30c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	f023 0302 	bic.w	r3, r3, #2
 800e314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	4a21      	ldr	r2, [pc, #132]	@ (800e3a8 <TIM_OC1_SetConfig+0xdc>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d003      	beq.n	800e330 <TIM_OC1_SetConfig+0x64>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	4a20      	ldr	r2, [pc, #128]	@ (800e3ac <TIM_OC1_SetConfig+0xe0>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d10c      	bne.n	800e34a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	f023 0308 	bic.w	r3, r3, #8
 800e336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	4313      	orrs	r3, r2
 800e340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	f023 0304 	bic.w	r3, r3, #4
 800e348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	4a16      	ldr	r2, [pc, #88]	@ (800e3a8 <TIM_OC1_SetConfig+0xdc>)
 800e34e:	4293      	cmp	r3, r2
 800e350:	d003      	beq.n	800e35a <TIM_OC1_SetConfig+0x8e>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a15      	ldr	r2, [pc, #84]	@ (800e3ac <TIM_OC1_SetConfig+0xe0>)
 800e356:	4293      	cmp	r3, r2
 800e358:	d111      	bne.n	800e37e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	695b      	ldr	r3, [r3, #20]
 800e36e:	693a      	ldr	r2, [r7, #16]
 800e370:	4313      	orrs	r3, r2
 800e372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	693a      	ldr	r2, [r7, #16]
 800e382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	685a      	ldr	r2, [r3, #4]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	697a      	ldr	r2, [r7, #20]
 800e396:	621a      	str	r2, [r3, #32]
}
 800e398:	bf00      	nop
 800e39a:	371c      	adds	r7, #28
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr
 800e3a4:	fffeff8f 	.word	0xfffeff8f
 800e3a8:	40010000 	.word	0x40010000
 800e3ac:	40010400 	.word	0x40010400

0800e3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a1b      	ldr	r3, [r3, #32]
 800e3be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a1b      	ldr	r3, [r3, #32]
 800e3c4:	f023 0210 	bic.w	r2, r3, #16
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4b2e      	ldr	r3, [pc, #184]	@ (800e494 <TIM_OC2_SetConfig+0xe4>)
 800e3dc:	4013      	ands	r3, r2
 800e3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	021b      	lsls	r3, r3, #8
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	4313      	orrs	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f023 0320 	bic.w	r3, r3, #32
 800e3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	4313      	orrs	r3, r2
 800e406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4a23      	ldr	r2, [pc, #140]	@ (800e498 <TIM_OC2_SetConfig+0xe8>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d003      	beq.n	800e418 <TIM_OC2_SetConfig+0x68>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	4a22      	ldr	r2, [pc, #136]	@ (800e49c <TIM_OC2_SetConfig+0xec>)
 800e414:	4293      	cmp	r3, r2
 800e416:	d10d      	bne.n	800e434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	011b      	lsls	r3, r3, #4
 800e426:	697a      	ldr	r2, [r7, #20]
 800e428:	4313      	orrs	r3, r2
 800e42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	4a18      	ldr	r2, [pc, #96]	@ (800e498 <TIM_OC2_SetConfig+0xe8>)
 800e438:	4293      	cmp	r3, r2
 800e43a:	d003      	beq.n	800e444 <TIM_OC2_SetConfig+0x94>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	4a17      	ldr	r2, [pc, #92]	@ (800e49c <TIM_OC2_SetConfig+0xec>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d113      	bne.n	800e46c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e44a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e452:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	695b      	ldr	r3, [r3, #20]
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	693a      	ldr	r2, [r7, #16]
 800e45c:	4313      	orrs	r3, r2
 800e45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	009b      	lsls	r3, r3, #2
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	4313      	orrs	r3, r2
 800e46a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	693a      	ldr	r2, [r7, #16]
 800e470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	685a      	ldr	r2, [r3, #4]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	621a      	str	r2, [r3, #32]
}
 800e486:	bf00      	nop
 800e488:	371c      	adds	r7, #28
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop
 800e494:	feff8fff 	.word	0xfeff8fff
 800e498:	40010000 	.word	0x40010000
 800e49c:	40010400 	.word	0x40010400

0800e4a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b087      	sub	sp, #28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6a1b      	ldr	r3, [r3, #32]
 800e4ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6a1b      	ldr	r3, [r3, #32]
 800e4b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	69db      	ldr	r3, [r3, #28]
 800e4c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	4b2d      	ldr	r3, [pc, #180]	@ (800e580 <TIM_OC3_SetConfig+0xe0>)
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f023 0303 	bic.w	r3, r3, #3
 800e4d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e4e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	689b      	ldr	r3, [r3, #8]
 800e4ee:	021b      	lsls	r3, r3, #8
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4a22      	ldr	r2, [pc, #136]	@ (800e584 <TIM_OC3_SetConfig+0xe4>)
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d003      	beq.n	800e506 <TIM_OC3_SetConfig+0x66>
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	4a21      	ldr	r2, [pc, #132]	@ (800e588 <TIM_OC3_SetConfig+0xe8>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d10d      	bne.n	800e522 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e50c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	021b      	lsls	r3, r3, #8
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	4313      	orrs	r3, r2
 800e518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a17      	ldr	r2, [pc, #92]	@ (800e584 <TIM_OC3_SetConfig+0xe4>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d003      	beq.n	800e532 <TIM_OC3_SetConfig+0x92>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a16      	ldr	r2, [pc, #88]	@ (800e588 <TIM_OC3_SetConfig+0xe8>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d113      	bne.n	800e55a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	695b      	ldr	r3, [r3, #20]
 800e546:	011b      	lsls	r3, r3, #4
 800e548:	693a      	ldr	r2, [r7, #16]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	011b      	lsls	r3, r3, #4
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	4313      	orrs	r3, r2
 800e558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	693a      	ldr	r2, [r7, #16]
 800e55e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	621a      	str	r2, [r3, #32]
}
 800e574:	bf00      	nop
 800e576:	371c      	adds	r7, #28
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	fffeff8f 	.word	0xfffeff8f
 800e584:	40010000 	.word	0x40010000
 800e588:	40010400 	.word	0x40010400

0800e58c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e58c:	b480      	push	{r7}
 800e58e:	b087      	sub	sp, #28
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6a1b      	ldr	r3, [r3, #32]
 800e59a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a1b      	ldr	r3, [r3, #32]
 800e5a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e5b4:	68fa      	ldr	r2, [r7, #12]
 800e5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800e630 <TIM_OC4_SetConfig+0xa4>)
 800e5b8:	4013      	ands	r3, r2
 800e5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	021b      	lsls	r3, r3, #8
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e5d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	689b      	ldr	r3, [r3, #8]
 800e5dc:	031b      	lsls	r3, r3, #12
 800e5de:	693a      	ldr	r2, [r7, #16]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a13      	ldr	r2, [pc, #76]	@ (800e634 <TIM_OC4_SetConfig+0xa8>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d003      	beq.n	800e5f4 <TIM_OC4_SetConfig+0x68>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	4a12      	ldr	r2, [pc, #72]	@ (800e638 <TIM_OC4_SetConfig+0xac>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d109      	bne.n	800e608 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e5fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	695b      	ldr	r3, [r3, #20]
 800e600:	019b      	lsls	r3, r3, #6
 800e602:	697a      	ldr	r2, [r7, #20]
 800e604:	4313      	orrs	r3, r2
 800e606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	697a      	ldr	r2, [r7, #20]
 800e60c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	68fa      	ldr	r2, [r7, #12]
 800e612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	693a      	ldr	r2, [r7, #16]
 800e620:	621a      	str	r2, [r3, #32]
}
 800e622:	bf00      	nop
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	feff8fff 	.word	0xfeff8fff
 800e634:	40010000 	.word	0x40010000
 800e638:	40010400 	.word	0x40010400

0800e63c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b087      	sub	sp, #28
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6a1b      	ldr	r3, [r3, #32]
 800e650:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	4b1b      	ldr	r3, [pc, #108]	@ (800e6d4 <TIM_OC5_SetConfig+0x98>)
 800e668:	4013      	ands	r3, r2
 800e66a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	4313      	orrs	r3, r2
 800e674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e67c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	041b      	lsls	r3, r3, #16
 800e684:	693a      	ldr	r2, [r7, #16]
 800e686:	4313      	orrs	r3, r2
 800e688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a12      	ldr	r2, [pc, #72]	@ (800e6d8 <TIM_OC5_SetConfig+0x9c>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d003      	beq.n	800e69a <TIM_OC5_SetConfig+0x5e>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a11      	ldr	r2, [pc, #68]	@ (800e6dc <TIM_OC5_SetConfig+0xa0>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d109      	bne.n	800e6ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e6a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	695b      	ldr	r3, [r3, #20]
 800e6a6:	021b      	lsls	r3, r3, #8
 800e6a8:	697a      	ldr	r2, [r7, #20]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	693a      	ldr	r2, [r7, #16]
 800e6c6:	621a      	str	r2, [r3, #32]
}
 800e6c8:	bf00      	nop
 800e6ca:	371c      	adds	r7, #28
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	fffeff8f 	.word	0xfffeff8f
 800e6d8:	40010000 	.word	0x40010000
 800e6dc:	40010400 	.word	0x40010400

0800e6e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b087      	sub	sp, #28
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6a1b      	ldr	r3, [r3, #32]
 800e6ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6a1b      	ldr	r3, [r3, #32]
 800e6f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e708:	68fa      	ldr	r2, [r7, #12]
 800e70a:	4b1c      	ldr	r3, [pc, #112]	@ (800e77c <TIM_OC6_SetConfig+0x9c>)
 800e70c:	4013      	ands	r3, r2
 800e70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	051b      	lsls	r3, r3, #20
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a13      	ldr	r2, [pc, #76]	@ (800e780 <TIM_OC6_SetConfig+0xa0>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_OC6_SetConfig+0x60>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a12      	ldr	r2, [pc, #72]	@ (800e784 <TIM_OC6_SetConfig+0xa4>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d109      	bne.n	800e754 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	695b      	ldr	r3, [r3, #20]
 800e74c:	029b      	lsls	r3, r3, #10
 800e74e:	697a      	ldr	r2, [r7, #20]
 800e750:	4313      	orrs	r3, r2
 800e752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	697a      	ldr	r2, [r7, #20]
 800e758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	693a      	ldr	r2, [r7, #16]
 800e76c:	621a      	str	r2, [r3, #32]
}
 800e76e:	bf00      	nop
 800e770:	371c      	adds	r7, #28
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr
 800e77a:	bf00      	nop
 800e77c:	feff8fff 	.word	0xfeff8fff
 800e780:	40010000 	.word	0x40010000
 800e784:	40010400 	.word	0x40010400

0800e788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6a1b      	ldr	r3, [r3, #32]
 800e79e:	f023 0201 	bic.w	r2, r3, #1
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e7b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	693a      	ldr	r2, [r7, #16]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	f023 030a 	bic.w	r3, r3, #10
 800e7c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e7c6:	697a      	ldr	r2, [r7, #20]
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	693a      	ldr	r2, [r7, #16]
 800e7d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	697a      	ldr	r2, [r7, #20]
 800e7d8:	621a      	str	r2, [r3, #32]
}
 800e7da:	bf00      	nop
 800e7dc:	371c      	adds	r7, #28
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b087      	sub	sp, #28
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	60f8      	str	r0, [r7, #12]
 800e7ee:	60b9      	str	r1, [r7, #8]
 800e7f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	6a1b      	ldr	r3, [r3, #32]
 800e7f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	6a1b      	ldr	r3, [r3, #32]
 800e7fc:	f023 0210 	bic.w	r2, r3, #16
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	699b      	ldr	r3, [r3, #24]
 800e808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	031b      	lsls	r3, r3, #12
 800e816:	693a      	ldr	r2, [r7, #16]
 800e818:	4313      	orrs	r3, r2
 800e81a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	011b      	lsls	r3, r3, #4
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	621a      	str	r2, [r3, #32]
}
 800e83a:	bf00      	nop
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e846:	b480      	push	{r7}
 800e848:	b085      	sub	sp, #20
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e85c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4313      	orrs	r3, r2
 800e864:	f043 0307 	orr.w	r3, r3, #7
 800e868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	609a      	str	r2, [r3, #8]
}
 800e870:	bf00      	nop
 800e872:	3714      	adds	r7, #20
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b087      	sub	sp, #28
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	021a      	lsls	r2, r3, #8
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	4313      	orrs	r3, r2
 800e8a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	697a      	ldr	r2, [r7, #20]
 800e8ae:	609a      	str	r2, [r3, #8]
}
 800e8b0:	bf00      	nop
 800e8b2:	371c      	adds	r7, #28
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8cc:	2b01      	cmp	r3, #1
 800e8ce:	d101      	bne.n	800e8d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e8d0:	2302      	movs	r3, #2
 800e8d2:	e06d      	b.n	800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2202      	movs	r2, #2
 800e8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	685b      	ldr	r3, [r3, #4]
 800e8ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a30      	ldr	r2, [pc, #192]	@ (800e9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d004      	beq.n	800e908 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4a2f      	ldr	r2, [pc, #188]	@ (800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d108      	bne.n	800e91a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e90e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	68fa      	ldr	r2, [r7, #12]
 800e916:	4313      	orrs	r3, r2
 800e918:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e920:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68fa      	ldr	r2, [r7, #12]
 800e928:	4313      	orrs	r3, r2
 800e92a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a20      	ldr	r2, [pc, #128]	@ (800e9bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d022      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e946:	d01d      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a1d      	ldr	r2, [pc, #116]	@ (800e9c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d018      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	4a1c      	ldr	r2, [pc, #112]	@ (800e9c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d013      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a1a      	ldr	r2, [pc, #104]	@ (800e9cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d00e      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a15      	ldr	r2, [pc, #84]	@ (800e9c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d009      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4a16      	ldr	r2, [pc, #88]	@ (800e9d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d004      	beq.n	800e984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	4a15      	ldr	r2, [pc, #84]	@ (800e9d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d10c      	bne.n	800e99e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e98a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	4313      	orrs	r3, r2
 800e994:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2201      	movs	r2, #1
 800e9a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3714      	adds	r7, #20
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr
 800e9bc:	40010000 	.word	0x40010000
 800e9c0:	40010400 	.word	0x40010400
 800e9c4:	40000400 	.word	0x40000400
 800e9c8:	40000800 	.word	0x40000800
 800e9cc:	40000c00 	.word	0x40000c00
 800e9d0:	40014000 	.word	0x40014000
 800e9d4:	40001800 	.word	0x40001800

0800e9d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ea22:	2301      	movs	r3, #1
 800ea24:	e040      	b.n	800eaa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d106      	bne.n	800ea3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2200      	movs	r2, #0
 800ea32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7f4 fa7c 	bl	8002f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2224      	movs	r2, #36	@ 0x24
 800ea40:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f022 0201 	bic.w	r2, r2, #1
 800ea50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d002      	beq.n	800ea60 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f000 fa8c 	bl	800ef78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 f825 	bl	800eab0 <UART_SetConfig>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d101      	bne.n	800ea70 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e01b      	b.n	800eaa8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ea7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689a      	ldr	r2, [r3, #8]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ea8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f042 0201 	orr.w	r2, r2, #1
 800ea9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fb0b 	bl	800f0bc <UART_CheckIdleState>
 800eaa6:	4603      	mov	r3, r0
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b088      	sub	sp, #32
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	689a      	ldr	r2, [r3, #8]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	691b      	ldr	r3, [r3, #16]
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	69db      	ldr	r3, [r3, #28]
 800ead0:	4313      	orrs	r3, r2
 800ead2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	4ba6      	ldr	r3, [pc, #664]	@ (800ed74 <UART_SetConfig+0x2c4>)
 800eadc:	4013      	ands	r3, r2
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	6812      	ldr	r2, [r2, #0]
 800eae2:	6979      	ldr	r1, [r7, #20]
 800eae4:	430b      	orrs	r3, r1
 800eae6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68da      	ldr	r2, [r3, #12]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	430a      	orrs	r2, r1
 800eafc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	699b      	ldr	r3, [r3, #24]
 800eb02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a1b      	ldr	r3, [r3, #32]
 800eb08:	697a      	ldr	r2, [r7, #20]
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	697a      	ldr	r2, [r7, #20]
 800eb1e:	430a      	orrs	r2, r1
 800eb20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4a94      	ldr	r2, [pc, #592]	@ (800ed78 <UART_SetConfig+0x2c8>)
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d120      	bne.n	800eb6e <UART_SetConfig+0xbe>
 800eb2c:	4b93      	ldr	r3, [pc, #588]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800eb2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb32:	f003 0303 	and.w	r3, r3, #3
 800eb36:	2b03      	cmp	r3, #3
 800eb38:	d816      	bhi.n	800eb68 <UART_SetConfig+0xb8>
 800eb3a:	a201      	add	r2, pc, #4	@ (adr r2, 800eb40 <UART_SetConfig+0x90>)
 800eb3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb40:	0800eb51 	.word	0x0800eb51
 800eb44:	0800eb5d 	.word	0x0800eb5d
 800eb48:	0800eb57 	.word	0x0800eb57
 800eb4c:	0800eb63 	.word	0x0800eb63
 800eb50:	2301      	movs	r3, #1
 800eb52:	77fb      	strb	r3, [r7, #31]
 800eb54:	e150      	b.n	800edf8 <UART_SetConfig+0x348>
 800eb56:	2302      	movs	r3, #2
 800eb58:	77fb      	strb	r3, [r7, #31]
 800eb5a:	e14d      	b.n	800edf8 <UART_SetConfig+0x348>
 800eb5c:	2304      	movs	r3, #4
 800eb5e:	77fb      	strb	r3, [r7, #31]
 800eb60:	e14a      	b.n	800edf8 <UART_SetConfig+0x348>
 800eb62:	2308      	movs	r3, #8
 800eb64:	77fb      	strb	r3, [r7, #31]
 800eb66:	e147      	b.n	800edf8 <UART_SetConfig+0x348>
 800eb68:	2310      	movs	r3, #16
 800eb6a:	77fb      	strb	r3, [r7, #31]
 800eb6c:	e144      	b.n	800edf8 <UART_SetConfig+0x348>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	4a83      	ldr	r2, [pc, #524]	@ (800ed80 <UART_SetConfig+0x2d0>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d132      	bne.n	800ebde <UART_SetConfig+0x12e>
 800eb78:	4b80      	ldr	r3, [pc, #512]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800eb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb7e:	f003 030c 	and.w	r3, r3, #12
 800eb82:	2b0c      	cmp	r3, #12
 800eb84:	d828      	bhi.n	800ebd8 <UART_SetConfig+0x128>
 800eb86:	a201      	add	r2, pc, #4	@ (adr r2, 800eb8c <UART_SetConfig+0xdc>)
 800eb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb8c:	0800ebc1 	.word	0x0800ebc1
 800eb90:	0800ebd9 	.word	0x0800ebd9
 800eb94:	0800ebd9 	.word	0x0800ebd9
 800eb98:	0800ebd9 	.word	0x0800ebd9
 800eb9c:	0800ebcd 	.word	0x0800ebcd
 800eba0:	0800ebd9 	.word	0x0800ebd9
 800eba4:	0800ebd9 	.word	0x0800ebd9
 800eba8:	0800ebd9 	.word	0x0800ebd9
 800ebac:	0800ebc7 	.word	0x0800ebc7
 800ebb0:	0800ebd9 	.word	0x0800ebd9
 800ebb4:	0800ebd9 	.word	0x0800ebd9
 800ebb8:	0800ebd9 	.word	0x0800ebd9
 800ebbc:	0800ebd3 	.word	0x0800ebd3
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	77fb      	strb	r3, [r7, #31]
 800ebc4:	e118      	b.n	800edf8 <UART_SetConfig+0x348>
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	77fb      	strb	r3, [r7, #31]
 800ebca:	e115      	b.n	800edf8 <UART_SetConfig+0x348>
 800ebcc:	2304      	movs	r3, #4
 800ebce:	77fb      	strb	r3, [r7, #31]
 800ebd0:	e112      	b.n	800edf8 <UART_SetConfig+0x348>
 800ebd2:	2308      	movs	r3, #8
 800ebd4:	77fb      	strb	r3, [r7, #31]
 800ebd6:	e10f      	b.n	800edf8 <UART_SetConfig+0x348>
 800ebd8:	2310      	movs	r3, #16
 800ebda:	77fb      	strb	r3, [r7, #31]
 800ebdc:	e10c      	b.n	800edf8 <UART_SetConfig+0x348>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4a68      	ldr	r2, [pc, #416]	@ (800ed84 <UART_SetConfig+0x2d4>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d120      	bne.n	800ec2a <UART_SetConfig+0x17a>
 800ebe8:	4b64      	ldr	r3, [pc, #400]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800ebea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ebee:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ebf2:	2b30      	cmp	r3, #48	@ 0x30
 800ebf4:	d013      	beq.n	800ec1e <UART_SetConfig+0x16e>
 800ebf6:	2b30      	cmp	r3, #48	@ 0x30
 800ebf8:	d814      	bhi.n	800ec24 <UART_SetConfig+0x174>
 800ebfa:	2b20      	cmp	r3, #32
 800ebfc:	d009      	beq.n	800ec12 <UART_SetConfig+0x162>
 800ebfe:	2b20      	cmp	r3, #32
 800ec00:	d810      	bhi.n	800ec24 <UART_SetConfig+0x174>
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d002      	beq.n	800ec0c <UART_SetConfig+0x15c>
 800ec06:	2b10      	cmp	r3, #16
 800ec08:	d006      	beq.n	800ec18 <UART_SetConfig+0x168>
 800ec0a:	e00b      	b.n	800ec24 <UART_SetConfig+0x174>
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	77fb      	strb	r3, [r7, #31]
 800ec10:	e0f2      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec12:	2302      	movs	r3, #2
 800ec14:	77fb      	strb	r3, [r7, #31]
 800ec16:	e0ef      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec18:	2304      	movs	r3, #4
 800ec1a:	77fb      	strb	r3, [r7, #31]
 800ec1c:	e0ec      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec1e:	2308      	movs	r3, #8
 800ec20:	77fb      	strb	r3, [r7, #31]
 800ec22:	e0e9      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec24:	2310      	movs	r3, #16
 800ec26:	77fb      	strb	r3, [r7, #31]
 800ec28:	e0e6      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a56      	ldr	r2, [pc, #344]	@ (800ed88 <UART_SetConfig+0x2d8>)
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d120      	bne.n	800ec76 <UART_SetConfig+0x1c6>
 800ec34:	4b51      	ldr	r3, [pc, #324]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800ec36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ec3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ec40:	d013      	beq.n	800ec6a <UART_SetConfig+0x1ba>
 800ec42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ec44:	d814      	bhi.n	800ec70 <UART_SetConfig+0x1c0>
 800ec46:	2b80      	cmp	r3, #128	@ 0x80
 800ec48:	d009      	beq.n	800ec5e <UART_SetConfig+0x1ae>
 800ec4a:	2b80      	cmp	r3, #128	@ 0x80
 800ec4c:	d810      	bhi.n	800ec70 <UART_SetConfig+0x1c0>
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d002      	beq.n	800ec58 <UART_SetConfig+0x1a8>
 800ec52:	2b40      	cmp	r3, #64	@ 0x40
 800ec54:	d006      	beq.n	800ec64 <UART_SetConfig+0x1b4>
 800ec56:	e00b      	b.n	800ec70 <UART_SetConfig+0x1c0>
 800ec58:	2300      	movs	r3, #0
 800ec5a:	77fb      	strb	r3, [r7, #31]
 800ec5c:	e0cc      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec5e:	2302      	movs	r3, #2
 800ec60:	77fb      	strb	r3, [r7, #31]
 800ec62:	e0c9      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec64:	2304      	movs	r3, #4
 800ec66:	77fb      	strb	r3, [r7, #31]
 800ec68:	e0c6      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec6a:	2308      	movs	r3, #8
 800ec6c:	77fb      	strb	r3, [r7, #31]
 800ec6e:	e0c3      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec70:	2310      	movs	r3, #16
 800ec72:	77fb      	strb	r3, [r7, #31]
 800ec74:	e0c0      	b.n	800edf8 <UART_SetConfig+0x348>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4a44      	ldr	r2, [pc, #272]	@ (800ed8c <UART_SetConfig+0x2dc>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d125      	bne.n	800eccc <UART_SetConfig+0x21c>
 800ec80:	4b3e      	ldr	r3, [pc, #248]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800ec82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec8e:	d017      	beq.n	800ecc0 <UART_SetConfig+0x210>
 800ec90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ec94:	d817      	bhi.n	800ecc6 <UART_SetConfig+0x216>
 800ec96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec9a:	d00b      	beq.n	800ecb4 <UART_SetConfig+0x204>
 800ec9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eca0:	d811      	bhi.n	800ecc6 <UART_SetConfig+0x216>
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <UART_SetConfig+0x1fe>
 800eca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecaa:	d006      	beq.n	800ecba <UART_SetConfig+0x20a>
 800ecac:	e00b      	b.n	800ecc6 <UART_SetConfig+0x216>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	77fb      	strb	r3, [r7, #31]
 800ecb2:	e0a1      	b.n	800edf8 <UART_SetConfig+0x348>
 800ecb4:	2302      	movs	r3, #2
 800ecb6:	77fb      	strb	r3, [r7, #31]
 800ecb8:	e09e      	b.n	800edf8 <UART_SetConfig+0x348>
 800ecba:	2304      	movs	r3, #4
 800ecbc:	77fb      	strb	r3, [r7, #31]
 800ecbe:	e09b      	b.n	800edf8 <UART_SetConfig+0x348>
 800ecc0:	2308      	movs	r3, #8
 800ecc2:	77fb      	strb	r3, [r7, #31]
 800ecc4:	e098      	b.n	800edf8 <UART_SetConfig+0x348>
 800ecc6:	2310      	movs	r3, #16
 800ecc8:	77fb      	strb	r3, [r7, #31]
 800ecca:	e095      	b.n	800edf8 <UART_SetConfig+0x348>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4a2f      	ldr	r2, [pc, #188]	@ (800ed90 <UART_SetConfig+0x2e0>)
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d125      	bne.n	800ed22 <UART_SetConfig+0x272>
 800ecd6:	4b29      	ldr	r3, [pc, #164]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800ecd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ecdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ece0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ece4:	d017      	beq.n	800ed16 <UART_SetConfig+0x266>
 800ece6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ecea:	d817      	bhi.n	800ed1c <UART_SetConfig+0x26c>
 800ecec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ecf0:	d00b      	beq.n	800ed0a <UART_SetConfig+0x25a>
 800ecf2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ecf6:	d811      	bhi.n	800ed1c <UART_SetConfig+0x26c>
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <UART_SetConfig+0x254>
 800ecfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed00:	d006      	beq.n	800ed10 <UART_SetConfig+0x260>
 800ed02:	e00b      	b.n	800ed1c <UART_SetConfig+0x26c>
 800ed04:	2301      	movs	r3, #1
 800ed06:	77fb      	strb	r3, [r7, #31]
 800ed08:	e076      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed0a:	2302      	movs	r3, #2
 800ed0c:	77fb      	strb	r3, [r7, #31]
 800ed0e:	e073      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed10:	2304      	movs	r3, #4
 800ed12:	77fb      	strb	r3, [r7, #31]
 800ed14:	e070      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed16:	2308      	movs	r3, #8
 800ed18:	77fb      	strb	r3, [r7, #31]
 800ed1a:	e06d      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed1c:	2310      	movs	r3, #16
 800ed1e:	77fb      	strb	r3, [r7, #31]
 800ed20:	e06a      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a1b      	ldr	r2, [pc, #108]	@ (800ed94 <UART_SetConfig+0x2e4>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d138      	bne.n	800ed9e <UART_SetConfig+0x2ee>
 800ed2c:	4b13      	ldr	r3, [pc, #76]	@ (800ed7c <UART_SetConfig+0x2cc>)
 800ed2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ed32:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ed36:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed3a:	d017      	beq.n	800ed6c <UART_SetConfig+0x2bc>
 800ed3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed40:	d82a      	bhi.n	800ed98 <UART_SetConfig+0x2e8>
 800ed42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed46:	d00b      	beq.n	800ed60 <UART_SetConfig+0x2b0>
 800ed48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed4c:	d824      	bhi.n	800ed98 <UART_SetConfig+0x2e8>
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d003      	beq.n	800ed5a <UART_SetConfig+0x2aa>
 800ed52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed56:	d006      	beq.n	800ed66 <UART_SetConfig+0x2b6>
 800ed58:	e01e      	b.n	800ed98 <UART_SetConfig+0x2e8>
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	77fb      	strb	r3, [r7, #31]
 800ed5e:	e04b      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed60:	2302      	movs	r3, #2
 800ed62:	77fb      	strb	r3, [r7, #31]
 800ed64:	e048      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed66:	2304      	movs	r3, #4
 800ed68:	77fb      	strb	r3, [r7, #31]
 800ed6a:	e045      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed6c:	2308      	movs	r3, #8
 800ed6e:	77fb      	strb	r3, [r7, #31]
 800ed70:	e042      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed72:	bf00      	nop
 800ed74:	efff69f3 	.word	0xefff69f3
 800ed78:	40011000 	.word	0x40011000
 800ed7c:	40023800 	.word	0x40023800
 800ed80:	40004400 	.word	0x40004400
 800ed84:	40004800 	.word	0x40004800
 800ed88:	40004c00 	.word	0x40004c00
 800ed8c:	40005000 	.word	0x40005000
 800ed90:	40011400 	.word	0x40011400
 800ed94:	40007800 	.word	0x40007800
 800ed98:	2310      	movs	r3, #16
 800ed9a:	77fb      	strb	r3, [r7, #31]
 800ed9c:	e02c      	b.n	800edf8 <UART_SetConfig+0x348>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	4a72      	ldr	r2, [pc, #456]	@ (800ef6c <UART_SetConfig+0x4bc>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d125      	bne.n	800edf4 <UART_SetConfig+0x344>
 800eda8:	4b71      	ldr	r3, [pc, #452]	@ (800ef70 <UART_SetConfig+0x4c0>)
 800edaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800edb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800edb6:	d017      	beq.n	800ede8 <UART_SetConfig+0x338>
 800edb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800edbc:	d817      	bhi.n	800edee <UART_SetConfig+0x33e>
 800edbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edc2:	d00b      	beq.n	800eddc <UART_SetConfig+0x32c>
 800edc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800edc8:	d811      	bhi.n	800edee <UART_SetConfig+0x33e>
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <UART_SetConfig+0x326>
 800edce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800edd2:	d006      	beq.n	800ede2 <UART_SetConfig+0x332>
 800edd4:	e00b      	b.n	800edee <UART_SetConfig+0x33e>
 800edd6:	2300      	movs	r3, #0
 800edd8:	77fb      	strb	r3, [r7, #31]
 800edda:	e00d      	b.n	800edf8 <UART_SetConfig+0x348>
 800eddc:	2302      	movs	r3, #2
 800edde:	77fb      	strb	r3, [r7, #31]
 800ede0:	e00a      	b.n	800edf8 <UART_SetConfig+0x348>
 800ede2:	2304      	movs	r3, #4
 800ede4:	77fb      	strb	r3, [r7, #31]
 800ede6:	e007      	b.n	800edf8 <UART_SetConfig+0x348>
 800ede8:	2308      	movs	r3, #8
 800edea:	77fb      	strb	r3, [r7, #31]
 800edec:	e004      	b.n	800edf8 <UART_SetConfig+0x348>
 800edee:	2310      	movs	r3, #16
 800edf0:	77fb      	strb	r3, [r7, #31]
 800edf2:	e001      	b.n	800edf8 <UART_SetConfig+0x348>
 800edf4:	2310      	movs	r3, #16
 800edf6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	69db      	ldr	r3, [r3, #28]
 800edfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ee00:	d15b      	bne.n	800eeba <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ee02:	7ffb      	ldrb	r3, [r7, #31]
 800ee04:	2b08      	cmp	r3, #8
 800ee06:	d828      	bhi.n	800ee5a <UART_SetConfig+0x3aa>
 800ee08:	a201      	add	r2, pc, #4	@ (adr r2, 800ee10 <UART_SetConfig+0x360>)
 800ee0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee0e:	bf00      	nop
 800ee10:	0800ee35 	.word	0x0800ee35
 800ee14:	0800ee3d 	.word	0x0800ee3d
 800ee18:	0800ee45 	.word	0x0800ee45
 800ee1c:	0800ee5b 	.word	0x0800ee5b
 800ee20:	0800ee4b 	.word	0x0800ee4b
 800ee24:	0800ee5b 	.word	0x0800ee5b
 800ee28:	0800ee5b 	.word	0x0800ee5b
 800ee2c:	0800ee5b 	.word	0x0800ee5b
 800ee30:	0800ee53 	.word	0x0800ee53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee34:	f7fd f8c0 	bl	800bfb8 <HAL_RCC_GetPCLK1Freq>
 800ee38:	61b8      	str	r0, [r7, #24]
        break;
 800ee3a:	e013      	b.n	800ee64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee3c:	f7fd f8d0 	bl	800bfe0 <HAL_RCC_GetPCLK2Freq>
 800ee40:	61b8      	str	r0, [r7, #24]
        break;
 800ee42:	e00f      	b.n	800ee64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee44:	4b4b      	ldr	r3, [pc, #300]	@ (800ef74 <UART_SetConfig+0x4c4>)
 800ee46:	61bb      	str	r3, [r7, #24]
        break;
 800ee48:	e00c      	b.n	800ee64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee4a:	f7fc ffe3 	bl	800be14 <HAL_RCC_GetSysClockFreq>
 800ee4e:	61b8      	str	r0, [r7, #24]
        break;
 800ee50:	e008      	b.n	800ee64 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ee56:	61bb      	str	r3, [r7, #24]
        break;
 800ee58:	e004      	b.n	800ee64 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	77bb      	strb	r3, [r7, #30]
        break;
 800ee62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d074      	beq.n	800ef54 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	005a      	lsls	r2, r3, #1
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	085b      	lsrs	r3, r3, #1
 800ee74:	441a      	add	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee80:	693b      	ldr	r3, [r7, #16]
 800ee82:	2b0f      	cmp	r3, #15
 800ee84:	d916      	bls.n	800eeb4 <UART_SetConfig+0x404>
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee8c:	d212      	bcs.n	800eeb4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	f023 030f 	bic.w	r3, r3, #15
 800ee96:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	085b      	lsrs	r3, r3, #1
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	f003 0307 	and.w	r3, r3, #7
 800eea2:	b29a      	uxth	r2, r3
 800eea4:	89fb      	ldrh	r3, [r7, #14]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	89fa      	ldrh	r2, [r7, #14]
 800eeb0:	60da      	str	r2, [r3, #12]
 800eeb2:	e04f      	b.n	800ef54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	77bb      	strb	r3, [r7, #30]
 800eeb8:	e04c      	b.n	800ef54 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eeba:	7ffb      	ldrb	r3, [r7, #31]
 800eebc:	2b08      	cmp	r3, #8
 800eebe:	d828      	bhi.n	800ef12 <UART_SetConfig+0x462>
 800eec0:	a201      	add	r2, pc, #4	@ (adr r2, 800eec8 <UART_SetConfig+0x418>)
 800eec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec6:	bf00      	nop
 800eec8:	0800eeed 	.word	0x0800eeed
 800eecc:	0800eef5 	.word	0x0800eef5
 800eed0:	0800eefd 	.word	0x0800eefd
 800eed4:	0800ef13 	.word	0x0800ef13
 800eed8:	0800ef03 	.word	0x0800ef03
 800eedc:	0800ef13 	.word	0x0800ef13
 800eee0:	0800ef13 	.word	0x0800ef13
 800eee4:	0800ef13 	.word	0x0800ef13
 800eee8:	0800ef0b 	.word	0x0800ef0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eeec:	f7fd f864 	bl	800bfb8 <HAL_RCC_GetPCLK1Freq>
 800eef0:	61b8      	str	r0, [r7, #24]
        break;
 800eef2:	e013      	b.n	800ef1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eef4:	f7fd f874 	bl	800bfe0 <HAL_RCC_GetPCLK2Freq>
 800eef8:	61b8      	str	r0, [r7, #24]
        break;
 800eefa:	e00f      	b.n	800ef1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800eefc:	4b1d      	ldr	r3, [pc, #116]	@ (800ef74 <UART_SetConfig+0x4c4>)
 800eefe:	61bb      	str	r3, [r7, #24]
        break;
 800ef00:	e00c      	b.n	800ef1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef02:	f7fc ff87 	bl	800be14 <HAL_RCC_GetSysClockFreq>
 800ef06:	61b8      	str	r0, [r7, #24]
        break;
 800ef08:	e008      	b.n	800ef1c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ef0e:	61bb      	str	r3, [r7, #24]
        break;
 800ef10:	e004      	b.n	800ef1c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ef12:	2300      	movs	r3, #0
 800ef14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	77bb      	strb	r3, [r7, #30]
        break;
 800ef1a:	bf00      	nop
    }

    if (pclk != 0U)
 800ef1c:	69bb      	ldr	r3, [r7, #24]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d018      	beq.n	800ef54 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	085a      	lsrs	r2, r3, #1
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	441a      	add	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef36:	693b      	ldr	r3, [r7, #16]
 800ef38:	2b0f      	cmp	r3, #15
 800ef3a:	d909      	bls.n	800ef50 <UART_SetConfig+0x4a0>
 800ef3c:	693b      	ldr	r3, [r7, #16]
 800ef3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef42:	d205      	bcs.n	800ef50 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	60da      	str	r2, [r3, #12]
 800ef4e:	e001      	b.n	800ef54 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ef50:	2301      	movs	r3, #1
 800ef52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ef60:	7fbb      	ldrb	r3, [r7, #30]
}
 800ef62:	4618      	mov	r0, r3
 800ef64:	3720      	adds	r7, #32
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	40007c00 	.word	0x40007c00
 800ef70:	40023800 	.word	0x40023800
 800ef74:	00f42400 	.word	0x00f42400

0800ef78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef84:	f003 0308 	and.w	r3, r3, #8
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00a      	beq.n	800efa2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00a      	beq.n	800efc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	430a      	orrs	r2, r1
 800efc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc8:	f003 0302 	and.w	r3, r3, #2
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d00a      	beq.n	800efe6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	685b      	ldr	r3, [r3, #4]
 800efd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	430a      	orrs	r2, r1
 800efe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efea:	f003 0304 	and.w	r3, r3, #4
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d00a      	beq.n	800f008 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	430a      	orrs	r2, r1
 800f006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f00c:	f003 0310 	and.w	r3, r3, #16
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00a      	beq.n	800f02a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	430a      	orrs	r2, r1
 800f028:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f02e:	f003 0320 	and.w	r3, r3, #32
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00a      	beq.n	800f04c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	689b      	ldr	r3, [r3, #8]
 800f03c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	430a      	orrs	r2, r1
 800f04a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f054:	2b00      	cmp	r3, #0
 800f056:	d01a      	beq.n	800f08e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	685b      	ldr	r3, [r3, #4]
 800f05e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	430a      	orrs	r2, r1
 800f06c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f076:	d10a      	bne.n	800f08e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	685b      	ldr	r3, [r3, #4]
 800f07e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	430a      	orrs	r2, r1
 800f08c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00a      	beq.n	800f0b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	430a      	orrs	r2, r1
 800f0ae:	605a      	str	r2, [r3, #4]
  }
}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b098      	sub	sp, #96	@ 0x60
 800f0c0:	af02      	add	r7, sp, #8
 800f0c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f0cc:	f7f6 fa52 	bl	8005574 <HAL_GetTick>
 800f0d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	f003 0308 	and.w	r3, r3, #8
 800f0dc:	2b08      	cmp	r3, #8
 800f0de:	d12e      	bne.n	800f13e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f000 f88c 	bl	800f20c <UART_WaitOnFlagUntilTimeout>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d021      	beq.n	800f13e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f102:	e853 3f00 	ldrex	r3, [r3]
 800f106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f10a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f10e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	461a      	mov	r2, r3
 800f116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f118:	647b      	str	r3, [r7, #68]	@ 0x44
 800f11a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f11c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f11e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f120:	e841 2300 	strex	r3, r2, [r1]
 800f124:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1e6      	bne.n	800f0fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2220      	movs	r2, #32
 800f130:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f13a:	2303      	movs	r3, #3
 800f13c:	e062      	b.n	800f204 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d149      	bne.n	800f1e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f14c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f154:	2200      	movs	r2, #0
 800f156:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f856 	bl	800f20c <UART_WaitOnFlagUntilTimeout>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d03c      	beq.n	800f1e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f16e:	e853 3f00 	ldrex	r3, [r3]
 800f172:	623b      	str	r3, [r7, #32]
   return(result);
 800f174:	6a3b      	ldr	r3, [r7, #32]
 800f176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	461a      	mov	r2, r3
 800f182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f184:	633b      	str	r3, [r7, #48]	@ 0x30
 800f186:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f188:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f18a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f18c:	e841 2300 	strex	r3, r2, [r1]
 800f190:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1e6      	bne.n	800f166 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	3308      	adds	r3, #8
 800f19e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	e853 3f00 	ldrex	r3, [r3]
 800f1a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f023 0301 	bic.w	r3, r3, #1
 800f1ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f1b8:	61fa      	str	r2, [r7, #28]
 800f1ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1bc:	69b9      	ldr	r1, [r7, #24]
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	e841 2300 	strex	r3, r2, [r1]
 800f1c4:	617b      	str	r3, [r7, #20]
   return(result);
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1e5      	bne.n	800f198 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e011      	b.n	800f204 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2220      	movs	r2, #32
 800f1e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2220      	movs	r2, #32
 800f1ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3758      	adds	r7, #88	@ 0x58
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	603b      	str	r3, [r7, #0]
 800f218:	4613      	mov	r3, r2
 800f21a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f21c:	e04f      	b.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f224:	d04b      	beq.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f226:	f7f6 f9a5 	bl	8005574 <HAL_GetTick>
 800f22a:	4602      	mov	r2, r0
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	1ad3      	subs	r3, r2, r3
 800f230:	69ba      	ldr	r2, [r7, #24]
 800f232:	429a      	cmp	r2, r3
 800f234:	d302      	bcc.n	800f23c <UART_WaitOnFlagUntilTimeout+0x30>
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f23c:	2303      	movs	r3, #3
 800f23e:	e04e      	b.n	800f2de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f003 0304 	and.w	r3, r3, #4
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d037      	beq.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	2b80      	cmp	r3, #128	@ 0x80
 800f252:	d034      	beq.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b40      	cmp	r3, #64	@ 0x40
 800f258:	d031      	beq.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69db      	ldr	r3, [r3, #28]
 800f260:	f003 0308 	and.w	r3, r3, #8
 800f264:	2b08      	cmp	r3, #8
 800f266:	d110      	bne.n	800f28a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	2208      	movs	r2, #8
 800f26e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 f838 	bl	800f2e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2208      	movs	r2, #8
 800f27a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2200      	movs	r2, #0
 800f282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	e029      	b.n	800f2de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	69db      	ldr	r3, [r3, #28]
 800f290:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f294:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f298:	d111      	bne.n	800f2be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f2a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 f81e 	bl	800f2e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2220      	movs	r2, #32
 800f2ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	e00f      	b.n	800f2de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	69da      	ldr	r2, [r3, #28]
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	4013      	ands	r3, r2
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	bf0c      	ite	eq
 800f2ce:	2301      	moveq	r3, #1
 800f2d0:	2300      	movne	r3, #0
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	d0a0      	beq.n	800f21e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f2e6:	b480      	push	{r7}
 800f2e8:	b095      	sub	sp, #84	@ 0x54
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2f6:	e853 3f00 	ldrex	r3, [r3]
 800f2fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	461a      	mov	r2, r3
 800f30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f30c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f30e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f310:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f312:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f314:	e841 2300 	strex	r3, r2, [r1]
 800f318:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d1e6      	bne.n	800f2ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3308      	adds	r3, #8
 800f326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	e853 3f00 	ldrex	r3, [r3]
 800f32e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	f023 0301 	bic.w	r3, r3, #1
 800f336:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3308      	adds	r3, #8
 800f33e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f340:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f342:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f344:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f348:	e841 2300 	strex	r3, r2, [r1]
 800f34c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f350:	2b00      	cmp	r3, #0
 800f352:	d1e5      	bne.n	800f320 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d118      	bne.n	800f38e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	60bb      	str	r3, [r7, #8]
   return(result);
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f023 0310 	bic.w	r3, r3, #16
 800f370:	647b      	str	r3, [r7, #68]	@ 0x44
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f37a:	61bb      	str	r3, [r7, #24]
 800f37c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f37e:	6979      	ldr	r1, [r7, #20]
 800f380:	69ba      	ldr	r2, [r7, #24]
 800f382:	e841 2300 	strex	r3, r2, [r1]
 800f386:	613b      	str	r3, [r7, #16]
   return(result);
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1e6      	bne.n	800f35c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2220      	movs	r2, #32
 800f392:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2200      	movs	r2, #0
 800f39a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f3a2:	bf00      	nop
 800f3a4:	3754      	adds	r7, #84	@ 0x54
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
	...

0800f3b0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d121      	bne.n	800f406 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	4b27      	ldr	r3, [pc, #156]	@ (800f464 <FMC_SDRAM_Init+0xb4>)
 800f3c8:	4013      	ands	r3, r2
 800f3ca:	683a      	ldr	r2, [r7, #0]
 800f3cc:	6851      	ldr	r1, [r2, #4]
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	6892      	ldr	r2, [r2, #8]
 800f3d2:	4311      	orrs	r1, r2
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	68d2      	ldr	r2, [r2, #12]
 800f3d8:	4311      	orrs	r1, r2
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	6912      	ldr	r2, [r2, #16]
 800f3de:	4311      	orrs	r1, r2
 800f3e0:	683a      	ldr	r2, [r7, #0]
 800f3e2:	6952      	ldr	r2, [r2, #20]
 800f3e4:	4311      	orrs	r1, r2
 800f3e6:	683a      	ldr	r2, [r7, #0]
 800f3e8:	6992      	ldr	r2, [r2, #24]
 800f3ea:	4311      	orrs	r1, r2
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	69d2      	ldr	r2, [r2, #28]
 800f3f0:	4311      	orrs	r1, r2
 800f3f2:	683a      	ldr	r2, [r7, #0]
 800f3f4:	6a12      	ldr	r2, [r2, #32]
 800f3f6:	4311      	orrs	r1, r2
 800f3f8:	683a      	ldr	r2, [r7, #0]
 800f3fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f3fc:	430a      	orrs	r2, r1
 800f3fe:	431a      	orrs	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	e026      	b.n	800f454 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	69d9      	ldr	r1, [r3, #28]
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	4319      	orrs	r1, r3
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f41c:	430b      	orrs	r3, r1
 800f41e:	431a      	orrs	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	685a      	ldr	r2, [r3, #4]
 800f428:	4b0e      	ldr	r3, [pc, #56]	@ (800f464 <FMC_SDRAM_Init+0xb4>)
 800f42a:	4013      	ands	r3, r2
 800f42c:	683a      	ldr	r2, [r7, #0]
 800f42e:	6851      	ldr	r1, [r2, #4]
 800f430:	683a      	ldr	r2, [r7, #0]
 800f432:	6892      	ldr	r2, [r2, #8]
 800f434:	4311      	orrs	r1, r2
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	68d2      	ldr	r2, [r2, #12]
 800f43a:	4311      	orrs	r1, r2
 800f43c:	683a      	ldr	r2, [r7, #0]
 800f43e:	6912      	ldr	r2, [r2, #16]
 800f440:	4311      	orrs	r1, r2
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	6952      	ldr	r2, [r2, #20]
 800f446:	4311      	orrs	r1, r2
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	6992      	ldr	r2, [r2, #24]
 800f44c:	430a      	orrs	r2, r1
 800f44e:	431a      	orrs	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f454:	2300      	movs	r3, #0
}
 800f456:	4618      	mov	r0, r3
 800f458:	370c      	adds	r7, #12
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	ffff8000 	.word	0xffff8000

0800f468 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f468:	b480      	push	{r7}
 800f46a:	b085      	sub	sp, #20
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d128      	bne.n	800f4cc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	689b      	ldr	r3, [r3, #8]
 800f47e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	1e59      	subs	r1, r3, #1
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	011b      	lsls	r3, r3, #4
 800f490:	4319      	orrs	r1, r3
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	689b      	ldr	r3, [r3, #8]
 800f496:	3b01      	subs	r3, #1
 800f498:	021b      	lsls	r3, r3, #8
 800f49a:	4319      	orrs	r1, r3
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	031b      	lsls	r3, r3, #12
 800f4a4:	4319      	orrs	r1, r3
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	041b      	lsls	r3, r3, #16
 800f4ae:	4319      	orrs	r1, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	695b      	ldr	r3, [r3, #20]
 800f4b4:	3b01      	subs	r3, #1
 800f4b6:	051b      	lsls	r3, r3, #20
 800f4b8:	4319      	orrs	r1, r3
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	061b      	lsls	r3, r3, #24
 800f4c2:	430b      	orrs	r3, r1
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	609a      	str	r2, [r3, #8]
 800f4ca:	e02d      	b.n	800f528 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	689a      	ldr	r2, [r3, #8]
 800f4d0:	4b19      	ldr	r3, [pc, #100]	@ (800f538 <FMC_SDRAM_Timing_Init+0xd0>)
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	68d2      	ldr	r2, [r2, #12]
 800f4d8:	3a01      	subs	r2, #1
 800f4da:	0311      	lsls	r1, r2, #12
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	6952      	ldr	r2, [r2, #20]
 800f4e0:	3a01      	subs	r2, #1
 800f4e2:	0512      	lsls	r2, r2, #20
 800f4e4:	430a      	orrs	r2, r1
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	68db      	ldr	r3, [r3, #12]
 800f4f0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	1e59      	subs	r1, r3, #1
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	011b      	lsls	r3, r3, #4
 800f502:	4319      	orrs	r1, r3
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	689b      	ldr	r3, [r3, #8]
 800f508:	3b01      	subs	r3, #1
 800f50a:	021b      	lsls	r3, r3, #8
 800f50c:	4319      	orrs	r1, r3
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	691b      	ldr	r3, [r3, #16]
 800f512:	3b01      	subs	r3, #1
 800f514:	041b      	lsls	r3, r3, #16
 800f516:	4319      	orrs	r1, r3
 800f518:	68bb      	ldr	r3, [r7, #8]
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	3b01      	subs	r3, #1
 800f51e:	061b      	lsls	r3, r3, #24
 800f520:	430b      	orrs	r3, r1
 800f522:	431a      	orrs	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f528:	2300      	movs	r3, #0
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	ff0f0fff 	.word	0xff0f0fff

0800f53c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b085      	sub	sp, #20
 800f540:	af00      	add	r7, sp, #0
 800f542:	60f8      	str	r0, [r7, #12]
 800f544:	60b9      	str	r1, [r7, #8]
 800f546:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	691a      	ldr	r2, [r3, #16]
 800f54c:	4b0c      	ldr	r3, [pc, #48]	@ (800f580 <FMC_SDRAM_SendCommand+0x44>)
 800f54e:	4013      	ands	r3, r2
 800f550:	68ba      	ldr	r2, [r7, #8]
 800f552:	6811      	ldr	r1, [r2, #0]
 800f554:	68ba      	ldr	r2, [r7, #8]
 800f556:	6852      	ldr	r2, [r2, #4]
 800f558:	4311      	orrs	r1, r2
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	6892      	ldr	r2, [r2, #8]
 800f55e:	3a01      	subs	r2, #1
 800f560:	0152      	lsls	r2, r2, #5
 800f562:	4311      	orrs	r1, r2
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	68d2      	ldr	r2, [r2, #12]
 800f568:	0252      	lsls	r2, r2, #9
 800f56a:	430a      	orrs	r2, r1
 800f56c:	431a      	orrs	r2, r3
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	ffc00000 	.word	0xffc00000

0800f584 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	695a      	ldr	r2, [r3, #20]
 800f592:	4b07      	ldr	r3, [pc, #28]	@ (800f5b0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f594:	4013      	ands	r3, r2
 800f596:	683a      	ldr	r2, [r7, #0]
 800f598:	0052      	lsls	r2, r2, #1
 800f59a:	431a      	orrs	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	370c      	adds	r7, #12
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ac:	4770      	bx	lr
 800f5ae:	bf00      	nop
 800f5b0:	ffffc001 	.word	0xffffc001

0800f5b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b084      	sub	sp, #16
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	f107 001c 	add.w	r0, r7, #28
 800f5c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f5c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d121      	bne.n	800f612 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	68da      	ldr	r2, [r3, #12]
 800f5de:	4b21      	ldr	r3, [pc, #132]	@ (800f664 <USB_CoreInit+0xb0>)
 800f5e0:	4013      	ands	r3, r2
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f5f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d105      	bne.n	800f606 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f000 fdae 	bl	8010168 <USB_CoreReset>
 800f60c:	4603      	mov	r3, r0
 800f60e:	73fb      	strb	r3, [r7, #15]
 800f610:	e010      	b.n	800f634 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	68db      	ldr	r3, [r3, #12]
 800f616:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fda2 	bl	8010168 <USB_CoreReset>
 800f624:	4603      	mov	r3, r0
 800f626:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f62c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800f634:	7fbb      	ldrb	r3, [r7, #30]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d10b      	bne.n	800f652 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f043 0206 	orr.w	r2, r3, #6
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f043 0220 	orr.w	r2, r3, #32
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f652:	7bfb      	ldrb	r3, [r7, #15]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f65e:	b004      	add	sp, #16
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop
 800f664:	ffbdffbf 	.word	0xffbdffbf

0800f668 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f668:	b480      	push	{r7}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	4613      	mov	r3, r2
 800f674:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f676:	79fb      	ldrb	r3, [r7, #7]
 800f678:	2b02      	cmp	r3, #2
 800f67a:	d165      	bne.n	800f748 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	4a41      	ldr	r2, [pc, #260]	@ (800f784 <USB_SetTurnaroundTime+0x11c>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d906      	bls.n	800f692 <USB_SetTurnaroundTime+0x2a>
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	4a40      	ldr	r2, [pc, #256]	@ (800f788 <USB_SetTurnaroundTime+0x120>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d202      	bcs.n	800f692 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f68c:	230f      	movs	r3, #15
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	e062      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	4a3c      	ldr	r2, [pc, #240]	@ (800f788 <USB_SetTurnaroundTime+0x120>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d306      	bcc.n	800f6a8 <USB_SetTurnaroundTime+0x40>
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	4a3b      	ldr	r2, [pc, #236]	@ (800f78c <USB_SetTurnaroundTime+0x124>)
 800f69e:	4293      	cmp	r3, r2
 800f6a0:	d202      	bcs.n	800f6a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f6a2:	230e      	movs	r3, #14
 800f6a4:	617b      	str	r3, [r7, #20]
 800f6a6:	e057      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	4a38      	ldr	r2, [pc, #224]	@ (800f78c <USB_SetTurnaroundTime+0x124>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d306      	bcc.n	800f6be <USB_SetTurnaroundTime+0x56>
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	4a37      	ldr	r2, [pc, #220]	@ (800f790 <USB_SetTurnaroundTime+0x128>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d202      	bcs.n	800f6be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f6b8:	230d      	movs	r3, #13
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	e04c      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	4a33      	ldr	r2, [pc, #204]	@ (800f790 <USB_SetTurnaroundTime+0x128>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d306      	bcc.n	800f6d4 <USB_SetTurnaroundTime+0x6c>
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	4a32      	ldr	r2, [pc, #200]	@ (800f794 <USB_SetTurnaroundTime+0x12c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d802      	bhi.n	800f6d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f6ce:	230c      	movs	r3, #12
 800f6d0:	617b      	str	r3, [r7, #20]
 800f6d2:	e041      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	4a2f      	ldr	r2, [pc, #188]	@ (800f794 <USB_SetTurnaroundTime+0x12c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d906      	bls.n	800f6ea <USB_SetTurnaroundTime+0x82>
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	4a2e      	ldr	r2, [pc, #184]	@ (800f798 <USB_SetTurnaroundTime+0x130>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d802      	bhi.n	800f6ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f6e4:	230b      	movs	r3, #11
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	e036      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f6ea:	68bb      	ldr	r3, [r7, #8]
 800f6ec:	4a2a      	ldr	r2, [pc, #168]	@ (800f798 <USB_SetTurnaroundTime+0x130>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d906      	bls.n	800f700 <USB_SetTurnaroundTime+0x98>
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	4a29      	ldr	r2, [pc, #164]	@ (800f79c <USB_SetTurnaroundTime+0x134>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d802      	bhi.n	800f700 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f6fa:	230a      	movs	r3, #10
 800f6fc:	617b      	str	r3, [r7, #20]
 800f6fe:	e02b      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	4a26      	ldr	r2, [pc, #152]	@ (800f79c <USB_SetTurnaroundTime+0x134>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d906      	bls.n	800f716 <USB_SetTurnaroundTime+0xae>
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	4a25      	ldr	r2, [pc, #148]	@ (800f7a0 <USB_SetTurnaroundTime+0x138>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d202      	bcs.n	800f716 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f710:	2309      	movs	r3, #9
 800f712:	617b      	str	r3, [r7, #20]
 800f714:	e020      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	4a21      	ldr	r2, [pc, #132]	@ (800f7a0 <USB_SetTurnaroundTime+0x138>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d306      	bcc.n	800f72c <USB_SetTurnaroundTime+0xc4>
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	4a20      	ldr	r2, [pc, #128]	@ (800f7a4 <USB_SetTurnaroundTime+0x13c>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d802      	bhi.n	800f72c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f726:	2308      	movs	r3, #8
 800f728:	617b      	str	r3, [r7, #20]
 800f72a:	e015      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	4a1d      	ldr	r2, [pc, #116]	@ (800f7a4 <USB_SetTurnaroundTime+0x13c>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d906      	bls.n	800f742 <USB_SetTurnaroundTime+0xda>
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	4a1c      	ldr	r2, [pc, #112]	@ (800f7a8 <USB_SetTurnaroundTime+0x140>)
 800f738:	4293      	cmp	r3, r2
 800f73a:	d202      	bcs.n	800f742 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f73c:	2307      	movs	r3, #7
 800f73e:	617b      	str	r3, [r7, #20]
 800f740:	e00a      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f742:	2306      	movs	r3, #6
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e007      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f748:	79fb      	ldrb	r3, [r7, #7]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d102      	bne.n	800f754 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f74e:	2309      	movs	r3, #9
 800f750:	617b      	str	r3, [r7, #20]
 800f752:	e001      	b.n	800f758 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f754:	2309      	movs	r3, #9
 800f756:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	68db      	ldr	r3, [r3, #12]
 800f75c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	68da      	ldr	r2, [r3, #12]
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	029b      	lsls	r3, r3, #10
 800f76c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f770:	431a      	orrs	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	371c      	adds	r7, #28
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	00d8acbf 	.word	0x00d8acbf
 800f788:	00e4e1c0 	.word	0x00e4e1c0
 800f78c:	00f42400 	.word	0x00f42400
 800f790:	01067380 	.word	0x01067380
 800f794:	011a499f 	.word	0x011a499f
 800f798:	01312cff 	.word	0x01312cff
 800f79c:	014ca43f 	.word	0x014ca43f
 800f7a0:	016e3600 	.word	0x016e3600
 800f7a4:	01a6ab1f 	.word	0x01a6ab1f
 800f7a8:	01e84800 	.word	0x01e84800

0800f7ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	f023 0201 	bic.w	r2, r3, #1
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f7ce:	b580      	push	{r7, lr}
 800f7d0:	b084      	sub	sp, #16
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f7ea:	78fb      	ldrb	r3, [r7, #3]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d115      	bne.n	800f81c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f7fc:	200a      	movs	r0, #10
 800f7fe:	f7f5 fec5 	bl	800558c <HAL_Delay>
      ms += 10U;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	330a      	adds	r3, #10
 800f806:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fc1d 	bl	8010048 <USB_GetMode>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b01      	cmp	r3, #1
 800f812:	d01e      	beq.n	800f852 <USB_SetCurrentMode+0x84>
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	2bc7      	cmp	r3, #199	@ 0xc7
 800f818:	d9f0      	bls.n	800f7fc <USB_SetCurrentMode+0x2e>
 800f81a:	e01a      	b.n	800f852 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f81c:	78fb      	ldrb	r3, [r7, #3]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d115      	bne.n	800f84e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68db      	ldr	r3, [r3, #12]
 800f826:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f82e:	200a      	movs	r0, #10
 800f830:	f7f5 feac 	bl	800558c <HAL_Delay>
      ms += 10U;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	330a      	adds	r3, #10
 800f838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 fc04 	bl	8010048 <USB_GetMode>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d005      	beq.n	800f852 <USB_SetCurrentMode+0x84>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2bc7      	cmp	r3, #199	@ 0xc7
 800f84a:	d9f0      	bls.n	800f82e <USB_SetCurrentMode+0x60>
 800f84c:	e001      	b.n	800f852 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f84e:	2301      	movs	r3, #1
 800f850:	e005      	b.n	800f85e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2bc8      	cmp	r3, #200	@ 0xc8
 800f856:	d101      	bne.n	800f85c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f858:	2301      	movs	r3, #1
 800f85a:	e000      	b.n	800f85e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f868:	b084      	sub	sp, #16
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b086      	sub	sp, #24
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f87a:	2300      	movs	r3, #0
 800f87c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f882:	2300      	movs	r3, #0
 800f884:	613b      	str	r3, [r7, #16]
 800f886:	e009      	b.n	800f89c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	3340      	adds	r3, #64	@ 0x40
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	2200      	movs	r2, #0
 800f894:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	3301      	adds	r3, #1
 800f89a:	613b      	str	r3, [r7, #16]
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	2b0e      	cmp	r3, #14
 800f8a0:	d9f2      	bls.n	800f888 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f8a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d11c      	bne.n	800f8e4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f8b8:	f043 0302 	orr.w	r3, r3, #2
 800f8bc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	601a      	str	r2, [r3, #0]
 800f8e2:	e005      	b.n	800f8f0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f900:	2b01      	cmp	r3, #1
 800f902:	d10d      	bne.n	800f920 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f904:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d104      	bne.n	800f916 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f90c:	2100      	movs	r1, #0
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f968 	bl	800fbe4 <USB_SetDevSpeed>
 800f914:	e008      	b.n	800f928 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f916:	2101      	movs	r1, #1
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f963 	bl	800fbe4 <USB_SetDevSpeed>
 800f91e:	e003      	b.n	800f928 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f920:	2103      	movs	r1, #3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f95e 	bl	800fbe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f928:	2110      	movs	r1, #16
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f8fa 	bl	800fb24 <USB_FlushTxFifo>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f000 f924 	bl	800fb88 <USB_FlushRxFifo>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d001      	beq.n	800f94a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f946:	2301      	movs	r3, #1
 800f948:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f950:	461a      	mov	r2, r3
 800f952:	2300      	movs	r3, #0
 800f954:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f95c:	461a      	mov	r2, r3
 800f95e:	2300      	movs	r3, #0
 800f960:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f968:	461a      	mov	r2, r3
 800f96a:	2300      	movs	r3, #0
 800f96c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f96e:	2300      	movs	r3, #0
 800f970:	613b      	str	r3, [r7, #16]
 800f972:	e043      	b.n	800f9fc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	015a      	lsls	r2, r3, #5
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f98a:	d118      	bne.n	800f9be <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10a      	bne.n	800f9a8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	015a      	lsls	r2, r3, #5
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	4413      	add	r3, r2
 800f99a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f99e:	461a      	mov	r2, r3
 800f9a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f9a4:	6013      	str	r3, [r2, #0]
 800f9a6:	e013      	b.n	800f9d0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f9ba:	6013      	str	r3, [r2, #0]
 800f9bc:	e008      	b.n	800f9d0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f9be:	693b      	ldr	r3, [r7, #16]
 800f9c0:	015a      	lsls	r2, r3, #5
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	4413      	add	r3, r2
 800f9c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	015a      	lsls	r2, r3, #5
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	4413      	add	r3, r2
 800f9d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9dc:	461a      	mov	r2, r3
 800f9de:	2300      	movs	r3, #0
 800f9e0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	015a      	lsls	r2, r3, #5
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f9f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	613b      	str	r3, [r7, #16]
 800f9fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fa00:	461a      	mov	r2, r3
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d3b5      	bcc.n	800f974 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	613b      	str	r3, [r7, #16]
 800fa0c:	e043      	b.n	800fa96 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	015a      	lsls	r2, r3, #5
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	4413      	add	r3, r2
 800fa16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa24:	d118      	bne.n	800fa58 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10a      	bne.n	800fa42 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	015a      	lsls	r2, r3, #5
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	4413      	add	r3, r2
 800fa34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa38:	461a      	mov	r2, r3
 800fa3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	e013      	b.n	800fa6a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa4e:	461a      	mov	r2, r3
 800fa50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800fa54:	6013      	str	r3, [r2, #0]
 800fa56:	e008      	b.n	800fa6a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fa58:	693b      	ldr	r3, [r7, #16]
 800fa5a:	015a      	lsls	r2, r3, #5
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	4413      	add	r3, r2
 800fa60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa64:	461a      	mov	r2, r3
 800fa66:	2300      	movs	r3, #0
 800fa68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	015a      	lsls	r2, r3, #5
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4413      	add	r3, r2
 800fa72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa76:	461a      	mov	r2, r3
 800fa78:	2300      	movs	r3, #0
 800fa7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	015a      	lsls	r2, r3, #5
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	4413      	add	r3, r2
 800fa84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa88:	461a      	mov	r2, r3
 800fa8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800fa8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	3301      	adds	r3, #1
 800fa94:	613b      	str	r3, [r7, #16]
 800fa96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	693b      	ldr	r3, [r7, #16]
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d3b5      	bcc.n	800fa0e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800fab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fab4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800fac2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fac4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d105      	bne.n	800fad8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	699b      	ldr	r3, [r3, #24]
 800fad0:	f043 0210 	orr.w	r2, r3, #16
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	699a      	ldr	r2, [r3, #24]
 800fadc:	4b0f      	ldr	r3, [pc, #60]	@ (800fb1c <USB_DevInit+0x2b4>)
 800fade:	4313      	orrs	r3, r2
 800fae0:	687a      	ldr	r2, [r7, #4]
 800fae2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fae4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d005      	beq.n	800faf8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	699b      	ldr	r3, [r3, #24]
 800faf0:	f043 0208 	orr.w	r2, r3, #8
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800faf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d105      	bne.n	800fb0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	699a      	ldr	r2, [r3, #24]
 800fb04:	4b06      	ldr	r3, [pc, #24]	@ (800fb20 <USB_DevInit+0x2b8>)
 800fb06:	4313      	orrs	r3, r2
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	3718      	adds	r7, #24
 800fb12:	46bd      	mov	sp, r7
 800fb14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb18:	b004      	add	sp, #16
 800fb1a:	4770      	bx	lr
 800fb1c:	803c3800 	.word	0x803c3800
 800fb20:	40000004 	.word	0x40000004

0800fb24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
 800fb2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	3301      	adds	r3, #1
 800fb36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb3e:	d901      	bls.n	800fb44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fb40:	2303      	movs	r3, #3
 800fb42:	e01b      	b.n	800fb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	691b      	ldr	r3, [r3, #16]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	daf2      	bge.n	800fb32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	019b      	lsls	r3, r3, #6
 800fb54:	f043 0220 	orr.w	r2, r3, #32
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fb68:	d901      	bls.n	800fb6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fb6a:	2303      	movs	r3, #3
 800fb6c:	e006      	b.n	800fb7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	f003 0320 	and.w	r3, r3, #32
 800fb76:	2b20      	cmp	r3, #32
 800fb78:	d0f0      	beq.n	800fb5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fb90:	2300      	movs	r3, #0
 800fb92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	3301      	adds	r3, #1
 800fb98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fba0:	d901      	bls.n	800fba6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e018      	b.n	800fbd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	daf2      	bge.n	800fb94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2210      	movs	r2, #16
 800fbb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800fbc4:	d901      	bls.n	800fbca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fbc6:	2303      	movs	r3, #3
 800fbc8:	e006      	b.n	800fbd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	691b      	ldr	r3, [r3, #16]
 800fbce:	f003 0310 	and.w	r3, r3, #16
 800fbd2:	2b10      	cmp	r3, #16
 800fbd4:	d0f0      	beq.n	800fbb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3714      	adds	r7, #20
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe2:	4770      	bx	lr

0800fbe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	460b      	mov	r3, r1
 800fbee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	78fb      	ldrb	r3, [r7, #3]
 800fbfe:	68f9      	ldr	r1, [r7, #12]
 800fc00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc04:	4313      	orrs	r3, r2
 800fc06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr

0800fc16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fc16:	b480      	push	{r7}
 800fc18:	b087      	sub	sp, #28
 800fc1a:	af00      	add	r7, sp, #0
 800fc1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc28:	689b      	ldr	r3, [r3, #8]
 800fc2a:	f003 0306 	and.w	r3, r3, #6
 800fc2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fc36:	2300      	movs	r3, #0
 800fc38:	75fb      	strb	r3, [r7, #23]
 800fc3a:	e00a      	b.n	800fc52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2b02      	cmp	r3, #2
 800fc40:	d002      	beq.n	800fc48 <USB_GetDevSpeed+0x32>
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b06      	cmp	r3, #6
 800fc46:	d102      	bne.n	800fc4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fc48:	2302      	movs	r3, #2
 800fc4a:	75fb      	strb	r3, [r7, #23]
 800fc4c:	e001      	b.n	800fc52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fc4e:	230f      	movs	r3, #15
 800fc50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b087      	sub	sp, #28
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	785b      	ldrb	r3, [r3, #1]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d14a      	bne.n	800fd14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	015a      	lsls	r2, r3, #5
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	4413      	add	r3, r2
 800fc88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc96:	f040 8086 	bne.w	800fda6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	015a      	lsls	r2, r3, #5
 800fca0:	693b      	ldr	r3, [r7, #16]
 800fca2:	4413      	add	r3, r2
 800fca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	7812      	ldrb	r2, [r2, #0]
 800fcae:	0151      	lsls	r1, r2, #5
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	440a      	add	r2, r1
 800fcb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fcbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	015a      	lsls	r2, r3, #5
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	683a      	ldr	r2, [r7, #0]
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	0151      	lsls	r1, r2, #5
 800fcd4:	693a      	ldr	r2, [r7, #16]
 800fcd6:	440a      	add	r2, r1
 800fcd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fcdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d902      	bls.n	800fcf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	75fb      	strb	r3, [r7, #23]
          break;
 800fcf6:	e056      	b.n	800fda6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd10:	d0e7      	beq.n	800fce2 <USB_EPStopXfer+0x82>
 800fd12:	e048      	b.n	800fda6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	015a      	lsls	r2, r3, #5
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fd28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fd2c:	d13b      	bne.n	800fda6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	015a      	lsls	r2, r3, #5
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	4413      	add	r3, r2
 800fd38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	683a      	ldr	r2, [r7, #0]
 800fd40:	7812      	ldrb	r2, [r2, #0]
 800fd42:	0151      	lsls	r1, r2, #5
 800fd44:	693a      	ldr	r2, [r7, #16]
 800fd46:	440a      	add	r2, r1
 800fd48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fd50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	015a      	lsls	r2, r3, #5
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	7812      	ldrb	r2, [r2, #0]
 800fd66:	0151      	lsls	r1, r2, #5
 800fd68:	693a      	ldr	r2, [r7, #16]
 800fd6a:	440a      	add	r2, r1
 800fd6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fd70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fd74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800fd82:	4293      	cmp	r3, r2
 800fd84:	d902      	bls.n	800fd8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	75fb      	strb	r3, [r7, #23]
          break;
 800fd8a:	e00c      	b.n	800fda6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	015a      	lsls	r2, r3, #5
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	4413      	add	r3, r2
 800fd96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fda0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fda4:	d0e7      	beq.n	800fd76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fda6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	371c      	adds	r7, #28
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b089      	sub	sp, #36	@ 0x24
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	71fb      	strb	r3, [r7, #7]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fdd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d123      	bne.n	800fe22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fdda:	88bb      	ldrh	r3, [r7, #4]
 800fddc:	3303      	adds	r3, #3
 800fdde:	089b      	lsrs	r3, r3, #2
 800fde0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fde2:	2300      	movs	r3, #0
 800fde4:	61bb      	str	r3, [r7, #24]
 800fde6:	e018      	b.n	800fe1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fde8:	79fb      	ldrb	r3, [r7, #7]
 800fdea:	031a      	lsls	r2, r3, #12
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	3301      	adds	r3, #1
 800fe06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	3301      	adds	r3, #1
 800fe12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	3301      	adds	r3, #1
 800fe18:	61bb      	str	r3, [r7, #24]
 800fe1a:	69ba      	ldr	r2, [r7, #24]
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d3e2      	bcc.n	800fde8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3724      	adds	r7, #36	@ 0x24
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b08b      	sub	sp, #44	@ 0x2c
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fe46:	88fb      	ldrh	r3, [r7, #6]
 800fe48:	089b      	lsrs	r3, r3, #2
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fe4e:	88fb      	ldrh	r3, [r7, #6]
 800fe50:	f003 0303 	and.w	r3, r3, #3
 800fe54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fe56:	2300      	movs	r3, #0
 800fe58:	623b      	str	r3, [r7, #32]
 800fe5a:	e014      	b.n	800fe86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe66:	601a      	str	r2, [r3, #0]
    pDest++;
 800fe68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe70:	3301      	adds	r3, #1
 800fe72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe76:	3301      	adds	r3, #1
 800fe78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe7c:	3301      	adds	r3, #1
 800fe7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800fe80:	6a3b      	ldr	r3, [r7, #32]
 800fe82:	3301      	adds	r3, #1
 800fe84:	623b      	str	r3, [r7, #32]
 800fe86:	6a3a      	ldr	r2, [r7, #32]
 800fe88:	697b      	ldr	r3, [r7, #20]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d3e6      	bcc.n	800fe5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fe8e:	8bfb      	ldrh	r3, [r7, #30]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d01e      	beq.n	800fed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fe94:	2300      	movs	r3, #0
 800fe96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fe98:	69bb      	ldr	r3, [r7, #24]
 800fe9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fe9e:	461a      	mov	r2, r3
 800fea0:	f107 0310 	add.w	r3, r7, #16
 800fea4:	6812      	ldr	r2, [r2, #0]
 800fea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fea8:	693a      	ldr	r2, [r7, #16]
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	b2db      	uxtb	r3, r3
 800feae:	00db      	lsls	r3, r3, #3
 800feb0:	fa22 f303 	lsr.w	r3, r2, r3
 800feb4:	b2da      	uxtb	r2, r3
 800feb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb8:	701a      	strb	r2, [r3, #0]
      i++;
 800feba:	6a3b      	ldr	r3, [r7, #32]
 800febc:	3301      	adds	r3, #1
 800febe:	623b      	str	r3, [r7, #32]
      pDest++;
 800fec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec2:	3301      	adds	r3, #1
 800fec4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800fec6:	8bfb      	ldrh	r3, [r7, #30]
 800fec8:	3b01      	subs	r3, #1
 800feca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fecc:	8bfb      	ldrh	r3, [r7, #30]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1ea      	bne.n	800fea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	372c      	adds	r7, #44	@ 0x2c
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800fefa:	f023 0303 	bic.w	r3, r3, #3
 800fefe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff06:	685b      	ldr	r3, [r3, #4]
 800ff08:	68fa      	ldr	r2, [r7, #12]
 800ff0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ff0e:	f043 0302 	orr.w	r3, r3, #2
 800ff12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ff14:	2300      	movs	r3, #0
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3714      	adds	r7, #20
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ff22:	b480      	push	{r7}
 800ff24:	b085      	sub	sp, #20
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	68fa      	ldr	r2, [r7, #12]
 800ff36:	4013      	ands	r3, r2
 800ff38:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3714      	adds	r7, #20
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff5a:	699b      	ldr	r3, [r3, #24]
 800ff5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff64:	69db      	ldr	r3, [r3, #28]
 800ff66:	68ba      	ldr	r2, [r7, #8]
 800ff68:	4013      	ands	r3, r2
 800ff6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	0c1b      	lsrs	r3, r3, #16
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr

0800ff7c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b085      	sub	sp, #20
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff8e:	699b      	ldr	r3, [r3, #24]
 800ff90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff98:	69db      	ldr	r3, [r3, #28]
 800ff9a:	68ba      	ldr	r2, [r7, #8]
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	b29b      	uxth	r3, r3
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3714      	adds	r7, #20
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr

0800ffb0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	460b      	mov	r3, r1
 800ffba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	015a      	lsls	r2, r3, #5
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	4413      	add	r3, r2
 800ffc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffd6:	695b      	ldr	r3, [r3, #20]
 800ffd8:	68ba      	ldr	r2, [r7, #8]
 800ffda:	4013      	ands	r3, r2
 800ffdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ffde:	68bb      	ldr	r3, [r7, #8]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3714      	adds	r7, #20
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b087      	sub	sp, #28
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010002:	691b      	ldr	r3, [r3, #16]
 8010004:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801000c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801000e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010010:	78fb      	ldrb	r3, [r7, #3]
 8010012:	f003 030f 	and.w	r3, r3, #15
 8010016:	68fa      	ldr	r2, [r7, #12]
 8010018:	fa22 f303 	lsr.w	r3, r2, r3
 801001c:	01db      	lsls	r3, r3, #7
 801001e:	b2db      	uxtb	r3, r3
 8010020:	693a      	ldr	r2, [r7, #16]
 8010022:	4313      	orrs	r3, r2
 8010024:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010026:	78fb      	ldrb	r3, [r7, #3]
 8010028:	015a      	lsls	r2, r3, #5
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	4413      	add	r3, r2
 801002e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	693a      	ldr	r2, [r7, #16]
 8010036:	4013      	ands	r3, r2
 8010038:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801003a:	68bb      	ldr	r3, [r7, #8]
}
 801003c:	4618      	mov	r0, r3
 801003e:	371c      	adds	r7, #28
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	f003 0301 	and.w	r3, r3, #1
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801007e:	4619      	mov	r1, r3
 8010080:	4b09      	ldr	r3, [pc, #36]	@ (80100a8 <USB_ActivateSetup+0x44>)
 8010082:	4013      	ands	r3, r2
 8010084:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	68fa      	ldr	r2, [r7, #12]
 8010090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801009a:	2300      	movs	r3, #0
}
 801009c:	4618      	mov	r0, r3
 801009e:	3714      	adds	r7, #20
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr
 80100a8:	fffff800 	.word	0xfffff800

080100ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80100ac:	b480      	push	{r7}
 80100ae:	b087      	sub	sp, #28
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	60f8      	str	r0, [r7, #12]
 80100b4:	460b      	mov	r3, r1
 80100b6:	607a      	str	r2, [r7, #4]
 80100b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	333c      	adds	r3, #60	@ 0x3c
 80100c2:	3304      	adds	r3, #4
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	4a26      	ldr	r2, [pc, #152]	@ (8010164 <USB_EP0_OutStart+0xb8>)
 80100cc:	4293      	cmp	r3, r2
 80100ce:	d90a      	bls.n	80100e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80100dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80100e0:	d101      	bne.n	80100e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80100e2:	2300      	movs	r3, #0
 80100e4:	e037      	b.n	8010156 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100ec:	461a      	mov	r2, r3
 80100ee:	2300      	movs	r3, #0
 80100f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100f8:	691b      	ldr	r3, [r3, #16]
 80100fa:	697a      	ldr	r2, [r7, #20]
 80100fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010100:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801010c:	691b      	ldr	r3, [r3, #16]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010114:	f043 0318 	orr.w	r3, r3, #24
 8010118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010120:	691b      	ldr	r3, [r3, #16]
 8010122:	697a      	ldr	r2, [r7, #20]
 8010124:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010128:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801012c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801012e:	7afb      	ldrb	r3, [r7, #11]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d10f      	bne.n	8010154 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010134:	697b      	ldr	r3, [r7, #20]
 8010136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801013a:	461a      	mov	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801014e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8010152:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010154:	2300      	movs	r3, #0
}
 8010156:	4618      	mov	r0, r3
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	4f54300a 	.word	0x4f54300a

08010168 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010168:	b480      	push	{r7}
 801016a:	b085      	sub	sp, #20
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010170:	2300      	movs	r3, #0
 8010172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	3301      	adds	r3, #1
 8010178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010180:	d901      	bls.n	8010186 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010182:	2303      	movs	r3, #3
 8010184:	e01b      	b.n	80101be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	691b      	ldr	r3, [r3, #16]
 801018a:	2b00      	cmp	r3, #0
 801018c:	daf2      	bge.n	8010174 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801018e:	2300      	movs	r3, #0
 8010190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	691b      	ldr	r3, [r3, #16]
 8010196:	f043 0201 	orr.w	r2, r3, #1
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3301      	adds	r3, #1
 80101a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80101aa:	d901      	bls.n	80101b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80101ac:	2303      	movs	r3, #3
 80101ae:	e006      	b.n	80101be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d0f0      	beq.n	801019e <USB_CoreReset+0x36>

  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80101ca:	b480      	push	{r7}
 80101cc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80101ce:	bf00      	nop
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80101d8:	b480      	push	{r7}
 80101da:	b085      	sub	sp, #20
 80101dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80101de:	f3ef 8305 	mrs	r3, IPSR
 80101e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80101e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d10f      	bne.n	801020a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101ea:	f3ef 8310 	mrs	r3, PRIMASK
 80101ee:	607b      	str	r3, [r7, #4]
  return(result);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d105      	bne.n	8010202 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80101f6:	f3ef 8311 	mrs	r3, BASEPRI
 80101fa:	603b      	str	r3, [r7, #0]
  return(result);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d007      	beq.n	8010212 <osKernelInitialize+0x3a>
 8010202:	4b0e      	ldr	r3, [pc, #56]	@ (801023c <osKernelInitialize+0x64>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b02      	cmp	r3, #2
 8010208:	d103      	bne.n	8010212 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801020a:	f06f 0305 	mvn.w	r3, #5
 801020e:	60fb      	str	r3, [r7, #12]
 8010210:	e00c      	b.n	801022c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010212:	4b0a      	ldr	r3, [pc, #40]	@ (801023c <osKernelInitialize+0x64>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d105      	bne.n	8010226 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801021a:	4b08      	ldr	r3, [pc, #32]	@ (801023c <osKernelInitialize+0x64>)
 801021c:	2201      	movs	r2, #1
 801021e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010220:	2300      	movs	r3, #0
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	e002      	b.n	801022c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010226:	f04f 33ff 	mov.w	r3, #4294967295
 801022a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801022c:	68fb      	ldr	r3, [r7, #12]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3714      	adds	r7, #20
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	200014dc 	.word	0x200014dc

08010240 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010246:	f3ef 8305 	mrs	r3, IPSR
 801024a:	60bb      	str	r3, [r7, #8]
  return(result);
 801024c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10f      	bne.n	8010272 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010252:	f3ef 8310 	mrs	r3, PRIMASK
 8010256:	607b      	str	r3, [r7, #4]
  return(result);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d105      	bne.n	801026a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801025e:	f3ef 8311 	mrs	r3, BASEPRI
 8010262:	603b      	str	r3, [r7, #0]
  return(result);
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d007      	beq.n	801027a <osKernelStart+0x3a>
 801026a:	4b0f      	ldr	r3, [pc, #60]	@ (80102a8 <osKernelStart+0x68>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b02      	cmp	r3, #2
 8010270:	d103      	bne.n	801027a <osKernelStart+0x3a>
    stat = osErrorISR;
 8010272:	f06f 0305 	mvn.w	r3, #5
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	e010      	b.n	801029c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801027a:	4b0b      	ldr	r3, [pc, #44]	@ (80102a8 <osKernelStart+0x68>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2b01      	cmp	r3, #1
 8010280:	d109      	bne.n	8010296 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010282:	f7ff ffa2 	bl	80101ca <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010286:	4b08      	ldr	r3, [pc, #32]	@ (80102a8 <osKernelStart+0x68>)
 8010288:	2202      	movs	r2, #2
 801028a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801028c:	f001 fd96 	bl	8011dbc <vTaskStartScheduler>
      stat = osOK;
 8010290:	2300      	movs	r3, #0
 8010292:	60fb      	str	r3, [r7, #12]
 8010294:	e002      	b.n	801029c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010296:	f04f 33ff 	mov.w	r3, #4294967295
 801029a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801029c:	68fb      	ldr	r3, [r7, #12]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	200014dc 	.word	0x200014dc

080102ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b090      	sub	sp, #64	@ 0x40
 80102b0:	af04      	add	r7, sp, #16
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80102b8:	2300      	movs	r3, #0
 80102ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102bc:	f3ef 8305 	mrs	r3, IPSR
 80102c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80102c2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f040 808f 	bne.w	80103e8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102ca:	f3ef 8310 	mrs	r3, PRIMASK
 80102ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d105      	bne.n	80102e2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102d6:	f3ef 8311 	mrs	r3, BASEPRI
 80102da:	617b      	str	r3, [r7, #20]
  return(result);
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d003      	beq.n	80102ea <osThreadNew+0x3e>
 80102e2:	4b44      	ldr	r3, [pc, #272]	@ (80103f4 <osThreadNew+0x148>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d07e      	beq.n	80103e8 <osThreadNew+0x13c>
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d07b      	beq.n	80103e8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80102f0:	2380      	movs	r3, #128	@ 0x80
 80102f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80102f4:	2318      	movs	r3, #24
 80102f6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 80102f8:	2300      	movs	r3, #0
 80102fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 80102fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010300:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d045      	beq.n	8010394 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d002      	beq.n	8010316 <osThreadNew+0x6a>
        name = attr->name;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d002      	beq.n	8010324 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010326:	2b00      	cmp	r3, #0
 8010328:	d008      	beq.n	801033c <osThreadNew+0x90>
 801032a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032c:	2b38      	cmp	r3, #56	@ 0x38
 801032e:	d805      	bhi.n	801033c <osThreadNew+0x90>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	f003 0301 	and.w	r3, r3, #1
 8010338:	2b00      	cmp	r3, #0
 801033a:	d001      	beq.n	8010340 <osThreadNew+0x94>
        return (NULL);
 801033c:	2300      	movs	r3, #0
 801033e:	e054      	b.n	80103ea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d003      	beq.n	8010350 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	695b      	ldr	r3, [r3, #20]
 801034c:	089b      	lsrs	r3, r3, #2
 801034e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	689b      	ldr	r3, [r3, #8]
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00e      	beq.n	8010376 <osThreadNew+0xca>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	2ba7      	cmp	r3, #167	@ 0xa7
 801035e:	d90a      	bls.n	8010376 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010364:	2b00      	cmp	r3, #0
 8010366:	d006      	beq.n	8010376 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	695b      	ldr	r3, [r3, #20]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <osThreadNew+0xca>
        mem = 1;
 8010370:	2301      	movs	r3, #1
 8010372:	623b      	str	r3, [r7, #32]
 8010374:	e010      	b.n	8010398 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d10c      	bne.n	8010398 <osThreadNew+0xec>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d108      	bne.n	8010398 <osThreadNew+0xec>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	691b      	ldr	r3, [r3, #16]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d104      	bne.n	8010398 <osThreadNew+0xec>
          mem = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	623b      	str	r3, [r7, #32]
 8010392:	e001      	b.n	8010398 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010398:	6a3b      	ldr	r3, [r7, #32]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d110      	bne.n	80103c0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80103a6:	9202      	str	r2, [sp, #8]
 80103a8:	9301      	str	r3, [sp, #4]
 80103aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f001 fb03 	bl	80119c0 <xTaskCreateStatic>
 80103ba:	4603      	mov	r3, r0
 80103bc:	613b      	str	r3, [r7, #16]
 80103be:	e013      	b.n	80103e8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80103c0:	6a3b      	ldr	r3, [r7, #32]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d110      	bne.n	80103e8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80103c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	f107 0310 	add.w	r3, r7, #16
 80103ce:	9301      	str	r3, [sp, #4]
 80103d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d2:	9300      	str	r3, [sp, #0]
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103d8:	68f8      	ldr	r0, [r7, #12]
 80103da:	f001 fb57 	bl	8011a8c <xTaskCreate>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d001      	beq.n	80103e8 <osThreadNew+0x13c>
          hTask = NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80103e8:	693b      	ldr	r3, [r7, #16]
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3730      	adds	r7, #48	@ 0x30
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	200014dc 	.word	0x200014dc

080103f8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010400:	f3ef 8305 	mrs	r3, IPSR
 8010404:	613b      	str	r3, [r7, #16]
  return(result);
 8010406:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10f      	bne.n	801042c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801040c:	f3ef 8310 	mrs	r3, PRIMASK
 8010410:	60fb      	str	r3, [r7, #12]
  return(result);
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d105      	bne.n	8010424 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010418:	f3ef 8311 	mrs	r3, BASEPRI
 801041c:	60bb      	str	r3, [r7, #8]
  return(result);
 801041e:	68bb      	ldr	r3, [r7, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d007      	beq.n	8010434 <osDelay+0x3c>
 8010424:	4b0a      	ldr	r3, [pc, #40]	@ (8010450 <osDelay+0x58>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	2b02      	cmp	r3, #2
 801042a:	d103      	bne.n	8010434 <osDelay+0x3c>
    stat = osErrorISR;
 801042c:	f06f 0305 	mvn.w	r3, #5
 8010430:	617b      	str	r3, [r7, #20]
 8010432:	e007      	b.n	8010444 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010434:	2300      	movs	r3, #0
 8010436:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d002      	beq.n	8010444 <osDelay+0x4c>
      vTaskDelay(ticks);
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f001 fc84 	bl	8011d4c <vTaskDelay>
    }
  }

  return (stat);
 8010444:	697b      	ldr	r3, [r7, #20]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3718      	adds	r7, #24
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	200014dc 	.word	0x200014dc

08010454 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010454:	b580      	push	{r7, lr}
 8010456:	b08c      	sub	sp, #48	@ 0x30
 8010458:	af02      	add	r7, sp, #8
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010460:	2300      	movs	r3, #0
 8010462:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010464:	f3ef 8305 	mrs	r3, IPSR
 8010468:	61bb      	str	r3, [r7, #24]
  return(result);
 801046a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801046c:	2b00      	cmp	r3, #0
 801046e:	f040 8086 	bne.w	801057e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010472:	f3ef 8310 	mrs	r3, PRIMASK
 8010476:	617b      	str	r3, [r7, #20]
  return(result);
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d105      	bne.n	801048a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801047e:	f3ef 8311 	mrs	r3, BASEPRI
 8010482:	613b      	str	r3, [r7, #16]
  return(result);
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d003      	beq.n	8010492 <osSemaphoreNew+0x3e>
 801048a:	4b3f      	ldr	r3, [pc, #252]	@ (8010588 <osSemaphoreNew+0x134>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2b02      	cmp	r3, #2
 8010490:	d075      	beq.n	801057e <osSemaphoreNew+0x12a>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d072      	beq.n	801057e <osSemaphoreNew+0x12a>
 8010498:	68ba      	ldr	r2, [r7, #8]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	429a      	cmp	r2, r3
 801049e:	d86e      	bhi.n	801057e <osSemaphoreNew+0x12a>
    mem = -1;
 80104a0:	f04f 33ff 	mov.w	r3, #4294967295
 80104a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d015      	beq.n	80104d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	689b      	ldr	r3, [r3, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d006      	beq.n	80104c2 <osSemaphoreNew+0x6e>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80104ba:	d902      	bls.n	80104c2 <osSemaphoreNew+0x6e>
        mem = 1;
 80104bc:	2301      	movs	r3, #1
 80104be:	623b      	str	r3, [r7, #32]
 80104c0:	e00c      	b.n	80104dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	689b      	ldr	r3, [r3, #8]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d108      	bne.n	80104dc <osSemaphoreNew+0x88>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d104      	bne.n	80104dc <osSemaphoreNew+0x88>
          mem = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	623b      	str	r3, [r7, #32]
 80104d6:	e001      	b.n	80104dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80104d8:	2300      	movs	r3, #0
 80104da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104e2:	d04c      	beq.n	801057e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d128      	bne.n	801053c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80104ea:	6a3b      	ldr	r3, [r7, #32]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d10a      	bne.n	8010506 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	2203      	movs	r2, #3
 80104f6:	9200      	str	r2, [sp, #0]
 80104f8:	2200      	movs	r2, #0
 80104fa:	2100      	movs	r1, #0
 80104fc:	2001      	movs	r0, #1
 80104fe:	f000 fa57 	bl	80109b0 <xQueueGenericCreateStatic>
 8010502:	6278      	str	r0, [r7, #36]	@ 0x24
 8010504:	e005      	b.n	8010512 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8010506:	2203      	movs	r2, #3
 8010508:	2100      	movs	r1, #0
 801050a:	2001      	movs	r0, #1
 801050c:	f000 fad7 	bl	8010abe <xQueueGenericCreate>
 8010510:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010514:	2b00      	cmp	r3, #0
 8010516:	d022      	beq.n	801055e <osSemaphoreNew+0x10a>
 8010518:	68bb      	ldr	r3, [r7, #8]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d01f      	beq.n	801055e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801051e:	2300      	movs	r3, #0
 8010520:	2200      	movs	r2, #0
 8010522:	2100      	movs	r1, #0
 8010524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010526:	f000 fba7 	bl	8010c78 <xQueueGenericSend>
 801052a:	4603      	mov	r3, r0
 801052c:	2b01      	cmp	r3, #1
 801052e:	d016      	beq.n	801055e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8010530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010532:	f001 f86f 	bl	8011614 <vQueueDelete>
            hSemaphore = NULL;
 8010536:	2300      	movs	r3, #0
 8010538:	627b      	str	r3, [r7, #36]	@ 0x24
 801053a:	e010      	b.n	801055e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d108      	bne.n	8010554 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	689b      	ldr	r3, [r3, #8]
 8010546:	461a      	mov	r2, r3
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	f000 fb1d 	bl	8010b8a <xQueueCreateCountingSemaphoreStatic>
 8010550:	6278      	str	r0, [r7, #36]	@ 0x24
 8010552:	e004      	b.n	801055e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010554:	68b9      	ldr	r1, [r7, #8]
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f000 fb54 	bl	8010c04 <xQueueCreateCountingSemaphore>
 801055c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801055e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00c      	beq.n	801057e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <osSemaphoreNew+0x11e>
          name = attr->name;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	61fb      	str	r3, [r7, #28]
 8010570:	e001      	b.n	8010576 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8010572:	2300      	movs	r3, #0
 8010574:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010576:	69f9      	ldr	r1, [r7, #28]
 8010578:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801057a:	f001 f999 	bl	80118b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801057e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010580:	4618      	mov	r0, r3
 8010582:	3728      	adds	r7, #40	@ 0x28
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	200014dc 	.word	0x200014dc

0801058c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801058c:	b580      	push	{r7, lr}
 801058e:	b088      	sub	sp, #32
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801059a:	2300      	movs	r3, #0
 801059c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d103      	bne.n	80105ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80105a4:	f06f 0303 	mvn.w	r3, #3
 80105a8:	61fb      	str	r3, [r7, #28]
 80105aa:	e04b      	b.n	8010644 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105ac:	f3ef 8305 	mrs	r3, IPSR
 80105b0:	617b      	str	r3, [r7, #20]
  return(result);
 80105b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d10f      	bne.n	80105d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105b8:	f3ef 8310 	mrs	r3, PRIMASK
 80105bc:	613b      	str	r3, [r7, #16]
  return(result);
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d105      	bne.n	80105d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80105c4:	f3ef 8311 	mrs	r3, BASEPRI
 80105c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d026      	beq.n	801061e <osSemaphoreAcquire+0x92>
 80105d0:	4b1f      	ldr	r3, [pc, #124]	@ (8010650 <osSemaphoreAcquire+0xc4>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d122      	bne.n	801061e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d003      	beq.n	80105e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80105de:	f06f 0303 	mvn.w	r3, #3
 80105e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80105e4:	e02d      	b.n	8010642 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80105e6:	2300      	movs	r3, #0
 80105e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	461a      	mov	r2, r3
 80105f0:	2100      	movs	r1, #0
 80105f2:	69b8      	ldr	r0, [r7, #24]
 80105f4:	f000 ff86 	bl	8011504 <xQueueReceiveFromISR>
 80105f8:	4603      	mov	r3, r0
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d003      	beq.n	8010606 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80105fe:	f06f 0302 	mvn.w	r3, #2
 8010602:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010604:	e01d      	b.n	8010642 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d01a      	beq.n	8010642 <osSemaphoreAcquire+0xb6>
 801060c:	4b11      	ldr	r3, [pc, #68]	@ (8010654 <osSemaphoreAcquire+0xc8>)
 801060e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 801061c:	e011      	b.n	8010642 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801061e:	6839      	ldr	r1, [r7, #0]
 8010620:	69b8      	ldr	r0, [r7, #24]
 8010622:	f000 fe57 	bl	80112d4 <xQueueSemaphoreTake>
 8010626:	4603      	mov	r3, r0
 8010628:	2b01      	cmp	r3, #1
 801062a:	d00b      	beq.n	8010644 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d003      	beq.n	801063a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8010632:	f06f 0301 	mvn.w	r3, #1
 8010636:	61fb      	str	r3, [r7, #28]
 8010638:	e004      	b.n	8010644 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801063a:	f06f 0302 	mvn.w	r3, #2
 801063e:	61fb      	str	r3, [r7, #28]
 8010640:	e000      	b.n	8010644 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8010642:	bf00      	nop
      }
    }
  }

  return (stat);
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3720      	adds	r7, #32
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	200014dc 	.word	0x200014dc
 8010654:	e000ed04 	.word	0xe000ed04

08010658 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010658:	b580      	push	{r7, lr}
 801065a:	b088      	sub	sp, #32
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010664:	2300      	movs	r3, #0
 8010666:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d103      	bne.n	8010676 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801066e:	f06f 0303 	mvn.w	r3, #3
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e03e      	b.n	80106f4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010676:	f3ef 8305 	mrs	r3, IPSR
 801067a:	617b      	str	r3, [r7, #20]
  return(result);
 801067c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801067e:	2b00      	cmp	r3, #0
 8010680:	d10f      	bne.n	80106a2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010682:	f3ef 8310 	mrs	r3, PRIMASK
 8010686:	613b      	str	r3, [r7, #16]
  return(result);
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801068e:	f3ef 8311 	mrs	r3, BASEPRI
 8010692:	60fb      	str	r3, [r7, #12]
  return(result);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d01e      	beq.n	80106d8 <osSemaphoreRelease+0x80>
 801069a:	4b19      	ldr	r3, [pc, #100]	@ (8010700 <osSemaphoreRelease+0xa8>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b02      	cmp	r3, #2
 80106a0:	d11a      	bne.n	80106d8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106a6:	f107 0308 	add.w	r3, r7, #8
 80106aa:	4619      	mov	r1, r3
 80106ac:	69b8      	ldr	r0, [r7, #24]
 80106ae:	f000 fc90 	bl	8010fd2 <xQueueGiveFromISR>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b01      	cmp	r3, #1
 80106b6:	d003      	beq.n	80106c0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80106b8:	f06f 0302 	mvn.w	r3, #2
 80106bc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106be:	e018      	b.n	80106f2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d015      	beq.n	80106f2 <osSemaphoreRelease+0x9a>
 80106c6:	4b0f      	ldr	r3, [pc, #60]	@ (8010704 <osSemaphoreRelease+0xac>)
 80106c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106cc:	601a      	str	r2, [r3, #0]
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106d6:	e00c      	b.n	80106f2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80106d8:	2300      	movs	r3, #0
 80106da:	2200      	movs	r2, #0
 80106dc:	2100      	movs	r1, #0
 80106de:	69b8      	ldr	r0, [r7, #24]
 80106e0:	f000 faca 	bl	8010c78 <xQueueGenericSend>
 80106e4:	4603      	mov	r3, r0
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d004      	beq.n	80106f4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80106ea:	f06f 0302 	mvn.w	r3, #2
 80106ee:	61fb      	str	r3, [r7, #28]
 80106f0:	e000      	b.n	80106f4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80106f2:	bf00      	nop
    }
  }

  return (stat);
 80106f4:	69fb      	ldr	r3, [r7, #28]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	3720      	adds	r7, #32
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	bf00      	nop
 8010700:	200014dc 	.word	0x200014dc
 8010704:	e000ed04 	.word	0xe000ed04

08010708 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010708:	b480      	push	{r7}
 801070a:	b085      	sub	sp, #20
 801070c:	af00      	add	r7, sp, #0
 801070e:	60f8      	str	r0, [r7, #12]
 8010710:	60b9      	str	r1, [r7, #8]
 8010712:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4a07      	ldr	r2, [pc, #28]	@ (8010734 <vApplicationGetIdleTaskMemory+0x2c>)
 8010718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	4a06      	ldr	r2, [pc, #24]	@ (8010738 <vApplicationGetIdleTaskMemory+0x30>)
 801071e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2280      	movs	r2, #128	@ 0x80
 8010724:	601a      	str	r2, [r3, #0]
}
 8010726:	bf00      	nop
 8010728:	3714      	adds	r7, #20
 801072a:	46bd      	mov	sp, r7
 801072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	200014e0 	.word	0x200014e0
 8010738:	20001588 	.word	0x20001588

0801073c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	60f8      	str	r0, [r7, #12]
 8010744:	60b9      	str	r1, [r7, #8]
 8010746:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	4a07      	ldr	r2, [pc, #28]	@ (8010768 <vApplicationGetTimerTaskMemory+0x2c>)
 801074c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4a06      	ldr	r2, [pc, #24]	@ (801076c <vApplicationGetTimerTaskMemory+0x30>)
 8010752:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801075a:	601a      	str	r2, [r3, #0]
}
 801075c:	bf00      	nop
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr
 8010768:	20001788 	.word	0x20001788
 801076c:	20001830 	.word	0x20001830

08010770 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f103 0208 	add.w	r2, r3, #8
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f04f 32ff 	mov.w	r2, #4294967295
 8010788:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f103 0208 	add.w	r2, r3, #8
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f103 0208 	add.w	r2, r3, #8
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80107a4:	bf00      	nop
 80107a6:	370c      	adds	r7, #12
 80107a8:	46bd      	mov	sp, r7
 80107aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ae:	4770      	bx	lr

080107b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80107be:	bf00      	nop
 80107c0:	370c      	adds	r7, #12
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80107ca:	b480      	push	{r7}
 80107cc:	b085      	sub	sp, #20
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
 80107d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	689a      	ldr	r2, [r3, #8]
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	689b      	ldr	r3, [r3, #8]
 80107ec:	683a      	ldr	r2, [r7, #0]
 80107ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	601a      	str	r2, [r3, #0]
}
 8010806:	bf00      	nop
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010812:	b480      	push	{r7}
 8010814:	b085      	sub	sp, #20
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
 801081a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010822:	68bb      	ldr	r3, [r7, #8]
 8010824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010828:	d103      	bne.n	8010832 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	e00c      	b.n	801084c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	3308      	adds	r3, #8
 8010836:	60fb      	str	r3, [r7, #12]
 8010838:	e002      	b.n	8010840 <vListInsert+0x2e>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	60fb      	str	r3, [r7, #12]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	68ba      	ldr	r2, [r7, #8]
 8010848:	429a      	cmp	r2, r3
 801084a:	d2f6      	bcs.n	801083a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	683a      	ldr	r2, [r7, #0]
 801085a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	683a      	ldr	r2, [r7, #0]
 8010866:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	1c5a      	adds	r2, r3, #1
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	601a      	str	r2, [r3, #0]
}
 8010878:	bf00      	nop
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010884:	b480      	push	{r7}
 8010886:	b085      	sub	sp, #20
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	691b      	ldr	r3, [r3, #16]
 8010890:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	685b      	ldr	r3, [r3, #4]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	6892      	ldr	r2, [r2, #8]
 801089a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	689b      	ldr	r3, [r3, #8]
 80108a0:	687a      	ldr	r2, [r7, #4]
 80108a2:	6852      	ldr	r2, [r2, #4]
 80108a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d103      	bne.n	80108b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689a      	ldr	r2, [r3, #8]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2200      	movs	r2, #0
 80108bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	1e5a      	subs	r2, r3, #1
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3714      	adds	r7, #20
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10d      	bne.n	8010908 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f0:	b672      	cpsid	i
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	b662      	cpsie	i
 8010900:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010902:	bf00      	nop
 8010904:	bf00      	nop
 8010906:	e7fd      	b.n	8010904 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010908:	f002 fd30 	bl	801336c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010914:	68f9      	ldr	r1, [r7, #12]
 8010916:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010918:	fb01 f303 	mul.w	r3, r1, r3
 801091c:	441a      	add	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2200      	movs	r2, #0
 8010926:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010938:	3b01      	subs	r3, #1
 801093a:	68f9      	ldr	r1, [r7, #12]
 801093c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801093e:	fb01 f303 	mul.w	r3, r1, r3
 8010942:	441a      	add	r2, r3
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	22ff      	movs	r2, #255	@ 0xff
 801094c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	22ff      	movs	r2, #255	@ 0xff
 8010954:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d114      	bne.n	8010988 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	691b      	ldr	r3, [r3, #16]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d01a      	beq.n	801099c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	3310      	adds	r3, #16
 801096a:	4618      	mov	r0, r3
 801096c:	f001 fcd2 	bl	8012314 <xTaskRemoveFromEventList>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d012      	beq.n	801099c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010976:	4b0d      	ldr	r3, [pc, #52]	@ (80109ac <xQueueGenericReset+0xd4>)
 8010978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801097c:	601a      	str	r2, [r3, #0]
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	e009      	b.n	801099c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	3310      	adds	r3, #16
 801098c:	4618      	mov	r0, r3
 801098e:	f7ff feef 	bl	8010770 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	3324      	adds	r3, #36	@ 0x24
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff feea 	bl	8010770 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801099c:	f002 fd1c 	bl	80133d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80109a0:	2301      	movs	r3, #1
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3710      	adds	r7, #16
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	e000ed04 	.word	0xe000ed04

080109b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b08e      	sub	sp, #56	@ 0x38
 80109b4:	af02      	add	r7, sp, #8
 80109b6:	60f8      	str	r0, [r7, #12]
 80109b8:	60b9      	str	r1, [r7, #8]
 80109ba:	607a      	str	r2, [r7, #4]
 80109bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10d      	bne.n	80109e0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80109c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109c8:	b672      	cpsid	i
 80109ca:	f383 8811 	msr	BASEPRI, r3
 80109ce:	f3bf 8f6f 	isb	sy
 80109d2:	f3bf 8f4f 	dsb	sy
 80109d6:	b662      	cpsie	i
 80109d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80109da:	bf00      	nop
 80109dc:	bf00      	nop
 80109de:	e7fd      	b.n	80109dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80109e0:	683b      	ldr	r3, [r7, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d10d      	bne.n	8010a02 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80109e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ea:	b672      	cpsid	i
 80109ec:	f383 8811 	msr	BASEPRI, r3
 80109f0:	f3bf 8f6f 	isb	sy
 80109f4:	f3bf 8f4f 	dsb	sy
 80109f8:	b662      	cpsie	i
 80109fa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80109fc:	bf00      	nop
 80109fe:	bf00      	nop
 8010a00:	e7fd      	b.n	80109fe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d002      	beq.n	8010a0e <xQueueGenericCreateStatic+0x5e>
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <xQueueGenericCreateStatic+0x62>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e000      	b.n	8010a14 <xQueueGenericCreateStatic+0x64>
 8010a12:	2300      	movs	r3, #0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10d      	bne.n	8010a34 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a1c:	b672      	cpsid	i
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	b662      	cpsie	i
 8010a2c:	623b      	str	r3, [r7, #32]
}
 8010a2e:	bf00      	nop
 8010a30:	bf00      	nop
 8010a32:	e7fd      	b.n	8010a30 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d102      	bne.n	8010a40 <xQueueGenericCreateStatic+0x90>
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d101      	bne.n	8010a44 <xQueueGenericCreateStatic+0x94>
 8010a40:	2301      	movs	r3, #1
 8010a42:	e000      	b.n	8010a46 <xQueueGenericCreateStatic+0x96>
 8010a44:	2300      	movs	r3, #0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10d      	bne.n	8010a66 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8010a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a4e:	b672      	cpsid	i
 8010a50:	f383 8811 	msr	BASEPRI, r3
 8010a54:	f3bf 8f6f 	isb	sy
 8010a58:	f3bf 8f4f 	dsb	sy
 8010a5c:	b662      	cpsie	i
 8010a5e:	61fb      	str	r3, [r7, #28]
}
 8010a60:	bf00      	nop
 8010a62:	bf00      	nop
 8010a64:	e7fd      	b.n	8010a62 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010a66:	2350      	movs	r3, #80	@ 0x50
 8010a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	2b50      	cmp	r3, #80	@ 0x50
 8010a6e:	d00d      	beq.n	8010a8c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a74:	b672      	cpsid	i
 8010a76:	f383 8811 	msr	BASEPRI, r3
 8010a7a:	f3bf 8f6f 	isb	sy
 8010a7e:	f3bf 8f4f 	dsb	sy
 8010a82:	b662      	cpsie	i
 8010a84:	61bb      	str	r3, [r7, #24]
}
 8010a86:	bf00      	nop
 8010a88:	bf00      	nop
 8010a8a:	e7fd      	b.n	8010a88 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010a8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d00d      	beq.n	8010ab4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9a:	2201      	movs	r2, #1
 8010a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010aa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	68b9      	ldr	r1, [r7, #8]
 8010aae:	68f8      	ldr	r0, [r7, #12]
 8010ab0:	f000 f848 	bl	8010b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3730      	adds	r7, #48	@ 0x30
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}

08010abe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b08a      	sub	sp, #40	@ 0x28
 8010ac2:	af02      	add	r7, sp, #8
 8010ac4:	60f8      	str	r0, [r7, #12]
 8010ac6:	60b9      	str	r1, [r7, #8]
 8010ac8:	4613      	mov	r3, r2
 8010aca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10d      	bne.n	8010aee <xQueueGenericCreate+0x30>
	__asm volatile
 8010ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad6:	b672      	cpsid	i
 8010ad8:	f383 8811 	msr	BASEPRI, r3
 8010adc:	f3bf 8f6f 	isb	sy
 8010ae0:	f3bf 8f4f 	dsb	sy
 8010ae4:	b662      	cpsie	i
 8010ae6:	613b      	str	r3, [r7, #16]
}
 8010ae8:	bf00      	nop
 8010aea:	bf00      	nop
 8010aec:	e7fd      	b.n	8010aea <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d102      	bne.n	8010afa <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010af4:	2300      	movs	r3, #0
 8010af6:	61fb      	str	r3, [r7, #28]
 8010af8:	e004      	b.n	8010b04 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	68ba      	ldr	r2, [r7, #8]
 8010afe:	fb02 f303 	mul.w	r3, r2, r3
 8010b02:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	3350      	adds	r3, #80	@ 0x50
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f002 fd5d 	bl	80135c8 <pvPortMalloc>
 8010b0e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d011      	beq.n	8010b3a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010b16:	69bb      	ldr	r3, [r7, #24]
 8010b18:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010b1a:	697b      	ldr	r3, [r7, #20]
 8010b1c:	3350      	adds	r3, #80	@ 0x50
 8010b1e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010b20:	69bb      	ldr	r3, [r7, #24]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010b28:	79fa      	ldrb	r2, [r7, #7]
 8010b2a:	69bb      	ldr	r3, [r7, #24]
 8010b2c:	9300      	str	r3, [sp, #0]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	697a      	ldr	r2, [r7, #20]
 8010b32:	68b9      	ldr	r1, [r7, #8]
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f000 f805 	bl	8010b44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010b3a:	69bb      	ldr	r3, [r7, #24]
	}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3720      	adds	r7, #32
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d103      	bne.n	8010b60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010b58:	69bb      	ldr	r3, [r7, #24]
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	e002      	b.n	8010b66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010b60:	69bb      	ldr	r3, [r7, #24]
 8010b62:	687a      	ldr	r2, [r7, #4]
 8010b64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	68ba      	ldr	r2, [r7, #8]
 8010b70:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010b72:	2101      	movs	r1, #1
 8010b74:	69b8      	ldr	r0, [r7, #24]
 8010b76:	f7ff feaf 	bl	80108d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	78fa      	ldrb	r2, [r7, #3]
 8010b7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010b82:	bf00      	nop
 8010b84:	3710      	adds	r7, #16
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010b8a:	b580      	push	{r7, lr}
 8010b8c:	b08a      	sub	sp, #40	@ 0x28
 8010b8e:	af02      	add	r7, sp, #8
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	60b9      	str	r1, [r7, #8]
 8010b94:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d10d      	bne.n	8010bb8 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8010b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba0:	b672      	cpsid	i
 8010ba2:	f383 8811 	msr	BASEPRI, r3
 8010ba6:	f3bf 8f6f 	isb	sy
 8010baa:	f3bf 8f4f 	dsb	sy
 8010bae:	b662      	cpsie	i
 8010bb0:	61bb      	str	r3, [r7, #24]
}
 8010bb2:	bf00      	nop
 8010bb4:	bf00      	nop
 8010bb6:	e7fd      	b.n	8010bb4 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	d90d      	bls.n	8010bdc <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc4:	b672      	cpsid	i
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	b662      	cpsie	i
 8010bd4:	617b      	str	r3, [r7, #20]
}
 8010bd6:	bf00      	nop
 8010bd8:	bf00      	nop
 8010bda:	e7fd      	b.n	8010bd8 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010bdc:	2302      	movs	r3, #2
 8010bde:	9300      	str	r3, [sp, #0]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	2100      	movs	r1, #0
 8010be6:	68f8      	ldr	r0, [r7, #12]
 8010be8:	f7ff fee2 	bl	80109b0 <xQueueGenericCreateStatic>
 8010bec:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d002      	beq.n	8010bfa <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010bfa:	69fb      	ldr	r3, [r7, #28]
	}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3720      	adds	r7, #32
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b086      	sub	sp, #24
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d10d      	bne.n	8010c30 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8010c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c18:	b672      	cpsid	i
 8010c1a:	f383 8811 	msr	BASEPRI, r3
 8010c1e:	f3bf 8f6f 	isb	sy
 8010c22:	f3bf 8f4f 	dsb	sy
 8010c26:	b662      	cpsie	i
 8010c28:	613b      	str	r3, [r7, #16]
}
 8010c2a:	bf00      	nop
 8010c2c:	bf00      	nop
 8010c2e:	e7fd      	b.n	8010c2c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d90d      	bls.n	8010c54 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8010c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c3c:	b672      	cpsid	i
 8010c3e:	f383 8811 	msr	BASEPRI, r3
 8010c42:	f3bf 8f6f 	isb	sy
 8010c46:	f3bf 8f4f 	dsb	sy
 8010c4a:	b662      	cpsie	i
 8010c4c:	60fb      	str	r3, [r7, #12]
}
 8010c4e:	bf00      	nop
 8010c50:	bf00      	nop
 8010c52:	e7fd      	b.n	8010c50 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010c54:	2202      	movs	r2, #2
 8010c56:	2100      	movs	r1, #0
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7ff ff30 	bl	8010abe <xQueueGenericCreate>
 8010c5e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d002      	beq.n	8010c6c <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	683a      	ldr	r2, [r7, #0]
 8010c6a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010c6c:	697b      	ldr	r3, [r7, #20]
	}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3718      	adds	r7, #24
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b08e      	sub	sp, #56	@ 0x38
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010c86:	2300      	movs	r3, #0
 8010c88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10d      	bne.n	8010cb0 <xQueueGenericSend+0x38>
	__asm volatile
 8010c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c98:	b672      	cpsid	i
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	b662      	cpsie	i
 8010ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010caa:	bf00      	nop
 8010cac:	bf00      	nop
 8010cae:	e7fd      	b.n	8010cac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d103      	bne.n	8010cbe <xQueueGenericSend+0x46>
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d101      	bne.n	8010cc2 <xQueueGenericSend+0x4a>
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	e000      	b.n	8010cc4 <xQueueGenericSend+0x4c>
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d10d      	bne.n	8010ce4 <xQueueGenericSend+0x6c>
	__asm volatile
 8010cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ccc:	b672      	cpsid	i
 8010cce:	f383 8811 	msr	BASEPRI, r3
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	f3bf 8f4f 	dsb	sy
 8010cda:	b662      	cpsie	i
 8010cdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010cde:	bf00      	nop
 8010ce0:	bf00      	nop
 8010ce2:	e7fd      	b.n	8010ce0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b02      	cmp	r3, #2
 8010ce8:	d103      	bne.n	8010cf2 <xQueueGenericSend+0x7a>
 8010cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d101      	bne.n	8010cf6 <xQueueGenericSend+0x7e>
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	e000      	b.n	8010cf8 <xQueueGenericSend+0x80>
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d10d      	bne.n	8010d18 <xQueueGenericSend+0xa0>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d00:	b672      	cpsid	i
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	b662      	cpsie	i
 8010d10:	623b      	str	r3, [r7, #32]
}
 8010d12:	bf00      	nop
 8010d14:	bf00      	nop
 8010d16:	e7fd      	b.n	8010d14 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d18:	f001 fcca 	bl	80126b0 <xTaskGetSchedulerState>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d102      	bne.n	8010d28 <xQueueGenericSend+0xb0>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d101      	bne.n	8010d2c <xQueueGenericSend+0xb4>
 8010d28:	2301      	movs	r3, #1
 8010d2a:	e000      	b.n	8010d2e <xQueueGenericSend+0xb6>
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d10d      	bne.n	8010d4e <xQueueGenericSend+0xd6>
	__asm volatile
 8010d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d36:	b672      	cpsid	i
 8010d38:	f383 8811 	msr	BASEPRI, r3
 8010d3c:	f3bf 8f6f 	isb	sy
 8010d40:	f3bf 8f4f 	dsb	sy
 8010d44:	b662      	cpsie	i
 8010d46:	61fb      	str	r3, [r7, #28]
}
 8010d48:	bf00      	nop
 8010d4a:	bf00      	nop
 8010d4c:	e7fd      	b.n	8010d4a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d4e:	f002 fb0d 	bl	801336c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d302      	bcc.n	8010d64 <xQueueGenericSend+0xec>
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b02      	cmp	r3, #2
 8010d62:	d129      	bne.n	8010db8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010d64:	683a      	ldr	r2, [r7, #0]
 8010d66:	68b9      	ldr	r1, [r7, #8]
 8010d68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010d6a:	f000 fc91 	bl	8011690 <prvCopyDataToQueue>
 8010d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d010      	beq.n	8010d9a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d7a:	3324      	adds	r3, #36	@ 0x24
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f001 fac9 	bl	8012314 <xTaskRemoveFromEventList>
 8010d82:	4603      	mov	r3, r0
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d013      	beq.n	8010db0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010d88:	4b3f      	ldr	r3, [pc, #252]	@ (8010e88 <xQueueGenericSend+0x210>)
 8010d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d8e:	601a      	str	r2, [r3, #0]
 8010d90:	f3bf 8f4f 	dsb	sy
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	e00a      	b.n	8010db0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d007      	beq.n	8010db0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010da0:	4b39      	ldr	r3, [pc, #228]	@ (8010e88 <xQueueGenericSend+0x210>)
 8010da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010da6:	601a      	str	r2, [r3, #0]
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010db0:	f002 fb12 	bl	80133d8 <vPortExitCritical>
				return pdPASS;
 8010db4:	2301      	movs	r3, #1
 8010db6:	e063      	b.n	8010e80 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d103      	bne.n	8010dc6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010dbe:	f002 fb0b 	bl	80133d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	e05c      	b.n	8010e80 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d106      	bne.n	8010dda <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dcc:	f107 0314 	add.w	r3, r7, #20
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f001 fb05 	bl	80123e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dda:	f002 fafd 	bl	80133d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dde:	f001 f861 	bl	8011ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010de2:	f002 fac3 	bl	801336c <vPortEnterCritical>
 8010de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010de8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010dec:	b25b      	sxtb	r3, r3
 8010dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010df2:	d103      	bne.n	8010dfc <xQueueGenericSend+0x184>
 8010df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df6:	2200      	movs	r2, #0
 8010df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e02:	b25b      	sxtb	r3, r3
 8010e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e08:	d103      	bne.n	8010e12 <xQueueGenericSend+0x19a>
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010e12:	f002 fae1 	bl	80133d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e16:	1d3a      	adds	r2, r7, #4
 8010e18:	f107 0314 	add.w	r3, r7, #20
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f001 faf4 	bl	801240c <xTaskCheckForTimeOut>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d124      	bne.n	8010e74 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010e2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e2c:	f000 fd28 	bl	8011880 <prvIsQueueFull>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d018      	beq.n	8010e68 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e38:	3310      	adds	r3, #16
 8010e3a:	687a      	ldr	r2, [r7, #4]
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f001 fa12 	bl	8012268 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e46:	f000 fcb3 	bl	80117b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010e4a:	f001 f839 	bl	8011ec0 <xTaskResumeAll>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f47f af7c 	bne.w	8010d4e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8010e56:	4b0c      	ldr	r3, [pc, #48]	@ (8010e88 <xQueueGenericSend+0x210>)
 8010e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e5c:	601a      	str	r2, [r3, #0]
 8010e5e:	f3bf 8f4f 	dsb	sy
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	e772      	b.n	8010d4e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010e68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e6a:	f000 fca1 	bl	80117b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e6e:	f001 f827 	bl	8011ec0 <xTaskResumeAll>
 8010e72:	e76c      	b.n	8010d4e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010e74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e76:	f000 fc9b 	bl	80117b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e7a:	f001 f821 	bl	8011ec0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010e7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3738      	adds	r7, #56	@ 0x38
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	e000ed04 	.word	0xe000ed04

08010e8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b08e      	sub	sp, #56	@ 0x38
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	607a      	str	r2, [r7, #4]
 8010e98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d10d      	bne.n	8010ec0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8010ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea8:	b672      	cpsid	i
 8010eaa:	f383 8811 	msr	BASEPRI, r3
 8010eae:	f3bf 8f6f 	isb	sy
 8010eb2:	f3bf 8f4f 	dsb	sy
 8010eb6:	b662      	cpsie	i
 8010eb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010eba:	bf00      	nop
 8010ebc:	bf00      	nop
 8010ebe:	e7fd      	b.n	8010ebc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d103      	bne.n	8010ece <xQueueGenericSendFromISR+0x42>
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d101      	bne.n	8010ed2 <xQueueGenericSendFromISR+0x46>
 8010ece:	2301      	movs	r3, #1
 8010ed0:	e000      	b.n	8010ed4 <xQueueGenericSendFromISR+0x48>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d10d      	bne.n	8010ef4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8010ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010edc:	b672      	cpsid	i
 8010ede:	f383 8811 	msr	BASEPRI, r3
 8010ee2:	f3bf 8f6f 	isb	sy
 8010ee6:	f3bf 8f4f 	dsb	sy
 8010eea:	b662      	cpsie	i
 8010eec:	623b      	str	r3, [r7, #32]
}
 8010eee:	bf00      	nop
 8010ef0:	bf00      	nop
 8010ef2:	e7fd      	b.n	8010ef0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d103      	bne.n	8010f02 <xQueueGenericSendFromISR+0x76>
 8010efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010efe:	2b01      	cmp	r3, #1
 8010f00:	d101      	bne.n	8010f06 <xQueueGenericSendFromISR+0x7a>
 8010f02:	2301      	movs	r3, #1
 8010f04:	e000      	b.n	8010f08 <xQueueGenericSendFromISR+0x7c>
 8010f06:	2300      	movs	r3, #0
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d10d      	bne.n	8010f28 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8010f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f10:	b672      	cpsid	i
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	b662      	cpsie	i
 8010f20:	61fb      	str	r3, [r7, #28]
}
 8010f22:	bf00      	nop
 8010f24:	bf00      	nop
 8010f26:	e7fd      	b.n	8010f24 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f28:	f002 fb08 	bl	801353c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010f2c:	f3ef 8211 	mrs	r2, BASEPRI
 8010f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f34:	b672      	cpsid	i
 8010f36:	f383 8811 	msr	BASEPRI, r3
 8010f3a:	f3bf 8f6f 	isb	sy
 8010f3e:	f3bf 8f4f 	dsb	sy
 8010f42:	b662      	cpsie	i
 8010f44:	61ba      	str	r2, [r7, #24]
 8010f46:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010f48:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d302      	bcc.n	8010f5e <xQueueGenericSendFromISR+0xd2>
 8010f58:	683b      	ldr	r3, [r7, #0]
 8010f5a:	2b02      	cmp	r3, #2
 8010f5c:	d12c      	bne.n	8010fb8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f68:	683a      	ldr	r2, [r7, #0]
 8010f6a:	68b9      	ldr	r1, [r7, #8]
 8010f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f6e:	f000 fb8f 	bl	8011690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f72:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f7a:	d112      	bne.n	8010fa2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d016      	beq.n	8010fb2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f86:	3324      	adds	r3, #36	@ 0x24
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f001 f9c3 	bl	8012314 <xTaskRemoveFromEventList>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d00e      	beq.n	8010fb2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00b      	beq.n	8010fb2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	601a      	str	r2, [r3, #0]
 8010fa0:	e007      	b.n	8010fb2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010fa6:	3301      	adds	r3, #1
 8010fa8:	b2db      	uxtb	r3, r3
 8010faa:	b25a      	sxtb	r2, r3
 8010fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010fb2:	2301      	movs	r3, #1
 8010fb4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8010fb6:	e001      	b.n	8010fbc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	637b      	str	r3, [r7, #52]	@ 0x34
 8010fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fbe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010fc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3738      	adds	r7, #56	@ 0x38
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b08e      	sub	sp, #56	@ 0x38
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
 8010fda:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d10d      	bne.n	8011002 <xQueueGiveFromISR+0x30>
	__asm volatile
 8010fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fea:	b672      	cpsid	i
 8010fec:	f383 8811 	msr	BASEPRI, r3
 8010ff0:	f3bf 8f6f 	isb	sy
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	b662      	cpsie	i
 8010ffa:	623b      	str	r3, [r7, #32]
}
 8010ffc:	bf00      	nop
 8010ffe:	bf00      	nop
 8011000:	e7fd      	b.n	8010ffe <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011006:	2b00      	cmp	r3, #0
 8011008:	d00d      	beq.n	8011026 <xQueueGiveFromISR+0x54>
	__asm volatile
 801100a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801100e:	b672      	cpsid	i
 8011010:	f383 8811 	msr	BASEPRI, r3
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	f3bf 8f4f 	dsb	sy
 801101c:	b662      	cpsie	i
 801101e:	61fb      	str	r3, [r7, #28]
}
 8011020:	bf00      	nop
 8011022:	bf00      	nop
 8011024:	e7fd      	b.n	8011022 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d103      	bne.n	8011036 <xQueueGiveFromISR+0x64>
 801102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <xQueueGiveFromISR+0x68>
 8011036:	2301      	movs	r3, #1
 8011038:	e000      	b.n	801103c <xQueueGiveFromISR+0x6a>
 801103a:	2300      	movs	r3, #0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d10d      	bne.n	801105c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011044:	b672      	cpsid	i
 8011046:	f383 8811 	msr	BASEPRI, r3
 801104a:	f3bf 8f6f 	isb	sy
 801104e:	f3bf 8f4f 	dsb	sy
 8011052:	b662      	cpsie	i
 8011054:	61bb      	str	r3, [r7, #24]
}
 8011056:	bf00      	nop
 8011058:	bf00      	nop
 801105a:	e7fd      	b.n	8011058 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801105c:	f002 fa6e 	bl	801353c <vPortValidateInterruptPriority>
	__asm volatile
 8011060:	f3ef 8211 	mrs	r2, BASEPRI
 8011064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011068:	b672      	cpsid	i
 801106a:	f383 8811 	msr	BASEPRI, r3
 801106e:	f3bf 8f6f 	isb	sy
 8011072:	f3bf 8f4f 	dsb	sy
 8011076:	b662      	cpsie	i
 8011078:	617a      	str	r2, [r7, #20]
 801107a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801107c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801107e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011084:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801108a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801108c:	429a      	cmp	r2, r3
 801108e:	d22b      	bcs.n	80110e8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011092:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109c:	1c5a      	adds	r2, r3, #1
 801109e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110a0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80110a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110aa:	d112      	bne.n	80110d2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80110ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d016      	beq.n	80110e2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80110b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110b6:	3324      	adds	r3, #36	@ 0x24
 80110b8:	4618      	mov	r0, r3
 80110ba:	f001 f92b 	bl	8012314 <xTaskRemoveFromEventList>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d00e      	beq.n	80110e2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00b      	beq.n	80110e2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	2201      	movs	r2, #1
 80110ce:	601a      	str	r2, [r3, #0]
 80110d0:	e007      	b.n	80110e2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80110d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110d6:	3301      	adds	r3, #1
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	b25a      	sxtb	r2, r3
 80110dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80110e2:	2301      	movs	r3, #1
 80110e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80110e6:	e001      	b.n	80110ec <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80110e8:	2300      	movs	r3, #0
 80110ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80110ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f383 8811 	msr	BASEPRI, r3
}
 80110f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3738      	adds	r7, #56	@ 0x38
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
	...

08011104 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08c      	sub	sp, #48	@ 0x30
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011110:	2300      	movs	r3, #0
 8011112:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10d      	bne.n	801113a <xQueueReceive+0x36>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011122:	b672      	cpsid	i
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	b662      	cpsie	i
 8011132:	623b      	str	r3, [r7, #32]
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop
 8011138:	e7fd      	b.n	8011136 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d103      	bne.n	8011148 <xQueueReceive+0x44>
 8011140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011144:	2b00      	cmp	r3, #0
 8011146:	d101      	bne.n	801114c <xQueueReceive+0x48>
 8011148:	2301      	movs	r3, #1
 801114a:	e000      	b.n	801114e <xQueueReceive+0x4a>
 801114c:	2300      	movs	r3, #0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d10d      	bne.n	801116e <xQueueReceive+0x6a>
	__asm volatile
 8011152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011156:	b672      	cpsid	i
 8011158:	f383 8811 	msr	BASEPRI, r3
 801115c:	f3bf 8f6f 	isb	sy
 8011160:	f3bf 8f4f 	dsb	sy
 8011164:	b662      	cpsie	i
 8011166:	61fb      	str	r3, [r7, #28]
}
 8011168:	bf00      	nop
 801116a:	bf00      	nop
 801116c:	e7fd      	b.n	801116a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801116e:	f001 fa9f 	bl	80126b0 <xTaskGetSchedulerState>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d102      	bne.n	801117e <xQueueReceive+0x7a>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <xQueueReceive+0x7e>
 801117e:	2301      	movs	r3, #1
 8011180:	e000      	b.n	8011184 <xQueueReceive+0x80>
 8011182:	2300      	movs	r3, #0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d10d      	bne.n	80111a4 <xQueueReceive+0xa0>
	__asm volatile
 8011188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801118c:	b672      	cpsid	i
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	b662      	cpsie	i
 801119c:	61bb      	str	r3, [r7, #24]
}
 801119e:	bf00      	nop
 80111a0:	bf00      	nop
 80111a2:	e7fd      	b.n	80111a0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111a4:	f002 f8e2 	bl	801336c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80111a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80111ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d01f      	beq.n	80111f4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80111b4:	68b9      	ldr	r1, [r7, #8]
 80111b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80111b8:	f000 fad4 	bl	8011764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80111bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111be:	1e5a      	subs	r2, r3, #1
 80111c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00f      	beq.n	80111ec <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ce:	3310      	adds	r3, #16
 80111d0:	4618      	mov	r0, r3
 80111d2:	f001 f89f 	bl	8012314 <xTaskRemoveFromEventList>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d007      	beq.n	80111ec <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80111dc:	4b3c      	ldr	r3, [pc, #240]	@ (80112d0 <xQueueReceive+0x1cc>)
 80111de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80111e2:	601a      	str	r2, [r3, #0]
 80111e4:	f3bf 8f4f 	dsb	sy
 80111e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80111ec:	f002 f8f4 	bl	80133d8 <vPortExitCritical>
				return pdPASS;
 80111f0:	2301      	movs	r3, #1
 80111f2:	e069      	b.n	80112c8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d103      	bne.n	8011202 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80111fa:	f002 f8ed 	bl	80133d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80111fe:	2300      	movs	r3, #0
 8011200:	e062      	b.n	80112c8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d106      	bne.n	8011216 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011208:	f107 0310 	add.w	r3, r7, #16
 801120c:	4618      	mov	r0, r3
 801120e:	f001 f8e7 	bl	80123e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011212:	2301      	movs	r3, #1
 8011214:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011216:	f002 f8df 	bl	80133d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801121a:	f000 fe43 	bl	8011ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801121e:	f002 f8a5 	bl	801336c <vPortEnterCritical>
 8011222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011224:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011228:	b25b      	sxtb	r3, r3
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122e:	d103      	bne.n	8011238 <xQueueReceive+0x134>
 8011230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801123a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801123e:	b25b      	sxtb	r3, r3
 8011240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011244:	d103      	bne.n	801124e <xQueueReceive+0x14a>
 8011246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011248:	2200      	movs	r2, #0
 801124a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801124e:	f002 f8c3 	bl	80133d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011252:	1d3a      	adds	r2, r7, #4
 8011254:	f107 0310 	add.w	r3, r7, #16
 8011258:	4611      	mov	r1, r2
 801125a:	4618      	mov	r0, r3
 801125c:	f001 f8d6 	bl	801240c <xTaskCheckForTimeOut>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d123      	bne.n	80112ae <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011268:	f000 faf4 	bl	8011854 <prvIsQueueEmpty>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d017      	beq.n	80112a2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011274:	3324      	adds	r3, #36	@ 0x24
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	4611      	mov	r1, r2
 801127a:	4618      	mov	r0, r3
 801127c:	f000 fff4 	bl	8012268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011280:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011282:	f000 fa95 	bl	80117b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011286:	f000 fe1b 	bl	8011ec0 <xTaskResumeAll>
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d189      	bne.n	80111a4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011290:	4b0f      	ldr	r3, [pc, #60]	@ (80112d0 <xQueueReceive+0x1cc>)
 8011292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011296:	601a      	str	r2, [r3, #0]
 8011298:	f3bf 8f4f 	dsb	sy
 801129c:	f3bf 8f6f 	isb	sy
 80112a0:	e780      	b.n	80111a4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80112a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112a4:	f000 fa84 	bl	80117b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80112a8:	f000 fe0a 	bl	8011ec0 <xTaskResumeAll>
 80112ac:	e77a      	b.n	80111a4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80112ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112b0:	f000 fa7e 	bl	80117b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80112b4:	f000 fe04 	bl	8011ec0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112ba:	f000 facb 	bl	8011854 <prvIsQueueEmpty>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	f43f af6f 	beq.w	80111a4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80112c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3730      	adds	r7, #48	@ 0x30
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}
 80112d0:	e000ed04 	.word	0xe000ed04

080112d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08e      	sub	sp, #56	@ 0x38
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80112de:	2300      	movs	r3, #0
 80112e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80112e6:	2300      	movs	r3, #0
 80112e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80112ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d10d      	bne.n	801130c <xQueueSemaphoreTake+0x38>
	__asm volatile
 80112f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112f4:	b672      	cpsid	i
 80112f6:	f383 8811 	msr	BASEPRI, r3
 80112fa:	f3bf 8f6f 	isb	sy
 80112fe:	f3bf 8f4f 	dsb	sy
 8011302:	b662      	cpsie	i
 8011304:	623b      	str	r3, [r7, #32]
}
 8011306:	bf00      	nop
 8011308:	bf00      	nop
 801130a:	e7fd      	b.n	8011308 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801130c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011310:	2b00      	cmp	r3, #0
 8011312:	d00d      	beq.n	8011330 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8011314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011318:	b672      	cpsid	i
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	b662      	cpsie	i
 8011328:	61fb      	str	r3, [r7, #28]
}
 801132a:	bf00      	nop
 801132c:	bf00      	nop
 801132e:	e7fd      	b.n	801132c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011330:	f001 f9be 	bl	80126b0 <xTaskGetSchedulerState>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d102      	bne.n	8011340 <xQueueSemaphoreTake+0x6c>
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d101      	bne.n	8011344 <xQueueSemaphoreTake+0x70>
 8011340:	2301      	movs	r3, #1
 8011342:	e000      	b.n	8011346 <xQueueSemaphoreTake+0x72>
 8011344:	2300      	movs	r3, #0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10d      	bne.n	8011366 <xQueueSemaphoreTake+0x92>
	__asm volatile
 801134a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801134e:	b672      	cpsid	i
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	b662      	cpsie	i
 801135e:	61bb      	str	r3, [r7, #24]
}
 8011360:	bf00      	nop
 8011362:	bf00      	nop
 8011364:	e7fd      	b.n	8011362 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011366:	f002 f801 	bl	801336c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801136e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011372:	2b00      	cmp	r3, #0
 8011374:	d024      	beq.n	80113c0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011378:	1e5a      	subs	r2, r3, #1
 801137a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801137e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d104      	bne.n	8011390 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011386:	f001 fb15 	bl	80129b4 <pvTaskIncrementMutexHeldCount>
 801138a:	4602      	mov	r2, r0
 801138c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801138e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011392:	691b      	ldr	r3, [r3, #16]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d00f      	beq.n	80113b8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139a:	3310      	adds	r3, #16
 801139c:	4618      	mov	r0, r3
 801139e:	f000 ffb9 	bl	8012314 <xTaskRemoveFromEventList>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d007      	beq.n	80113b8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80113a8:	4b55      	ldr	r3, [pc, #340]	@ (8011500 <xQueueSemaphoreTake+0x22c>)
 80113aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113ae:	601a      	str	r2, [r3, #0]
 80113b0:	f3bf 8f4f 	dsb	sy
 80113b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80113b8:	f002 f80e 	bl	80133d8 <vPortExitCritical>
				return pdPASS;
 80113bc:	2301      	movs	r3, #1
 80113be:	e09a      	b.n	80114f6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d114      	bne.n	80113f0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80113c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d00d      	beq.n	80113e8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80113cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113d0:	b672      	cpsid	i
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	b662      	cpsie	i
 80113e0:	617b      	str	r3, [r7, #20]
}
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
 80113e6:	e7fd      	b.n	80113e4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80113e8:	f001 fff6 	bl	80133d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80113ec:	2300      	movs	r3, #0
 80113ee:	e082      	b.n	80114f6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80113f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113f6:	f107 030c 	add.w	r3, r7, #12
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 fff0 	bl	80123e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011400:	2301      	movs	r3, #1
 8011402:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011404:	f001 ffe8 	bl	80133d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011408:	f000 fd4c 	bl	8011ea4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801140c:	f001 ffae 	bl	801336c <vPortEnterCritical>
 8011410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011412:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011416:	b25b      	sxtb	r3, r3
 8011418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801141c:	d103      	bne.n	8011426 <xQueueSemaphoreTake+0x152>
 801141e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011420:	2200      	movs	r2, #0
 8011422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801142c:	b25b      	sxtb	r3, r3
 801142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011432:	d103      	bne.n	801143c <xQueueSemaphoreTake+0x168>
 8011434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011436:	2200      	movs	r2, #0
 8011438:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801143c:	f001 ffcc 	bl	80133d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011440:	463a      	mov	r2, r7
 8011442:	f107 030c 	add.w	r3, r7, #12
 8011446:	4611      	mov	r1, r2
 8011448:	4618      	mov	r0, r3
 801144a:	f000 ffdf 	bl	801240c <xTaskCheckForTimeOut>
 801144e:	4603      	mov	r3, r0
 8011450:	2b00      	cmp	r3, #0
 8011452:	d132      	bne.n	80114ba <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011454:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011456:	f000 f9fd 	bl	8011854 <prvIsQueueEmpty>
 801145a:	4603      	mov	r3, r0
 801145c:	2b00      	cmp	r3, #0
 801145e:	d026      	beq.n	80114ae <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d109      	bne.n	801147c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8011468:	f001 ff80 	bl	801336c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801146c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	4618      	mov	r0, r3
 8011472:	f001 f93b 	bl	80126ec <xTaskPriorityInherit>
 8011476:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8011478:	f001 ffae 	bl	80133d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801147e:	3324      	adds	r3, #36	@ 0x24
 8011480:	683a      	ldr	r2, [r7, #0]
 8011482:	4611      	mov	r1, r2
 8011484:	4618      	mov	r0, r3
 8011486:	f000 feef 	bl	8012268 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801148a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801148c:	f000 f990 	bl	80117b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011490:	f000 fd16 	bl	8011ec0 <xTaskResumeAll>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	f47f af65 	bne.w	8011366 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801149c:	4b18      	ldr	r3, [pc, #96]	@ (8011500 <xQueueSemaphoreTake+0x22c>)
 801149e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114a2:	601a      	str	r2, [r3, #0]
 80114a4:	f3bf 8f4f 	dsb	sy
 80114a8:	f3bf 8f6f 	isb	sy
 80114ac:	e75b      	b.n	8011366 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80114ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114b0:	f000 f97e 	bl	80117b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114b4:	f000 fd04 	bl	8011ec0 <xTaskResumeAll>
 80114b8:	e755      	b.n	8011366 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80114ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114bc:	f000 f978 	bl	80117b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80114c0:	f000 fcfe 	bl	8011ec0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114c6:	f000 f9c5 	bl	8011854 <prvIsQueueEmpty>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	f43f af4a 	beq.w	8011366 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80114d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d00d      	beq.n	80114f4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80114d8:	f001 ff48 	bl	801336c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80114dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80114de:	f000 f8bf 	bl	8011660 <prvGetDisinheritPriorityAfterTimeout>
 80114e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80114e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e6:	689b      	ldr	r3, [r3, #8]
 80114e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80114ea:	4618      	mov	r0, r3
 80114ec:	f001 f9da 	bl	80128a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80114f0:	f001 ff72 	bl	80133d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80114f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3738      	adds	r7, #56	@ 0x38
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	e000ed04 	.word	0xe000ed04

08011504 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08e      	sub	sp, #56	@ 0x38
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10d      	bne.n	8011536 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801151a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801151e:	b672      	cpsid	i
 8011520:	f383 8811 	msr	BASEPRI, r3
 8011524:	f3bf 8f6f 	isb	sy
 8011528:	f3bf 8f4f 	dsb	sy
 801152c:	b662      	cpsie	i
 801152e:	623b      	str	r3, [r7, #32]
}
 8011530:	bf00      	nop
 8011532:	bf00      	nop
 8011534:	e7fd      	b.n	8011532 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d103      	bne.n	8011544 <xQueueReceiveFromISR+0x40>
 801153c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011540:	2b00      	cmp	r3, #0
 8011542:	d101      	bne.n	8011548 <xQueueReceiveFromISR+0x44>
 8011544:	2301      	movs	r3, #1
 8011546:	e000      	b.n	801154a <xQueueReceiveFromISR+0x46>
 8011548:	2300      	movs	r3, #0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d10d      	bne.n	801156a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011552:	b672      	cpsid	i
 8011554:	f383 8811 	msr	BASEPRI, r3
 8011558:	f3bf 8f6f 	isb	sy
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	b662      	cpsie	i
 8011562:	61fb      	str	r3, [r7, #28]
}
 8011564:	bf00      	nop
 8011566:	bf00      	nop
 8011568:	e7fd      	b.n	8011566 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801156a:	f001 ffe7 	bl	801353c <vPortValidateInterruptPriority>
	__asm volatile
 801156e:	f3ef 8211 	mrs	r2, BASEPRI
 8011572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011576:	b672      	cpsid	i
 8011578:	f383 8811 	msr	BASEPRI, r3
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f3bf 8f4f 	dsb	sy
 8011584:	b662      	cpsie	i
 8011586:	61ba      	str	r2, [r7, #24]
 8011588:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801158a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801158c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801158e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011592:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011596:	2b00      	cmp	r3, #0
 8011598:	d02f      	beq.n	80115fa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801159a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80115a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80115a4:	68b9      	ldr	r1, [r7, #8]
 80115a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80115a8:	f000 f8dc 	bl	8011764 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80115ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115ae:	1e5a      	subs	r2, r3, #1
 80115b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80115b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80115b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115bc:	d112      	bne.n	80115e4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d016      	beq.n	80115f4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c8:	3310      	adds	r3, #16
 80115ca:	4618      	mov	r0, r3
 80115cc:	f000 fea2 	bl	8012314 <xTaskRemoveFromEventList>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00e      	beq.n	80115f4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00b      	beq.n	80115f4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2201      	movs	r2, #1
 80115e0:	601a      	str	r2, [r3, #0]
 80115e2:	e007      	b.n	80115f4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80115e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80115e8:	3301      	adds	r3, #1
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	b25a      	sxtb	r2, r3
 80115ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80115f4:	2301      	movs	r3, #1
 80115f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80115f8:	e001      	b.n	80115fe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80115fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011600:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	f383 8811 	msr	BASEPRI, r3
}
 8011608:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801160a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801160c:	4618      	mov	r0, r3
 801160e:	3738      	adds	r7, #56	@ 0x38
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b084      	sub	sp, #16
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10d      	bne.n	8011642 <vQueueDelete+0x2e>
	__asm volatile
 8011626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162a:	b672      	cpsid	i
 801162c:	f383 8811 	msr	BASEPRI, r3
 8011630:	f3bf 8f6f 	isb	sy
 8011634:	f3bf 8f4f 	dsb	sy
 8011638:	b662      	cpsie	i
 801163a:	60bb      	str	r3, [r7, #8]
}
 801163c:	bf00      	nop
 801163e:	bf00      	nop
 8011640:	e7fd      	b.n	801163e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f000 f95e 	bl	8011904 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801164e:	2b00      	cmp	r3, #0
 8011650:	d102      	bne.n	8011658 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8011652:	68f8      	ldr	r0, [r7, #12]
 8011654:	f002 f886 	bl	8013764 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011658:	bf00      	nop
 801165a:	3710      	adds	r7, #16
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}

08011660 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011660:	b480      	push	{r7}
 8011662:	b085      	sub	sp, #20
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801166c:	2b00      	cmp	r3, #0
 801166e:	d006      	beq.n	801167e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801167a:	60fb      	str	r3, [r7, #12]
 801167c:	e001      	b.n	8011682 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801167e:	2300      	movs	r3, #0
 8011680:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011682:	68fb      	ldr	r3, [r7, #12]
	}
 8011684:	4618      	mov	r0, r3
 8011686:	3714      	adds	r7, #20
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr

08011690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	60f8      	str	r0, [r7, #12]
 8011698:	60b9      	str	r1, [r7, #8]
 801169a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801169c:	2300      	movs	r3, #0
 801169e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d10d      	bne.n	80116ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d14d      	bne.n	8011752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	689b      	ldr	r3, [r3, #8]
 80116ba:	4618      	mov	r0, r3
 80116bc:	f001 f87e 	bl	80127bc <xTaskPriorityDisinherit>
 80116c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2200      	movs	r2, #0
 80116c6:	609a      	str	r2, [r3, #8]
 80116c8:	e043      	b.n	8011752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d119      	bne.n	8011704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	6858      	ldr	r0, [r3, #4]
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116d8:	461a      	mov	r2, r3
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	f002 f9e2 	bl	8013aa4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	685a      	ldr	r2, [r3, #4]
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80116e8:	441a      	add	r2, r3
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	689b      	ldr	r3, [r3, #8]
 80116f6:	429a      	cmp	r2, r3
 80116f8:	d32b      	bcc.n	8011752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	681a      	ldr	r2, [r3, #0]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	605a      	str	r2, [r3, #4]
 8011702:	e026      	b.n	8011752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	68d8      	ldr	r0, [r3, #12]
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801170c:	461a      	mov	r2, r3
 801170e:	68b9      	ldr	r1, [r7, #8]
 8011710:	f002 f9c8 	bl	8013aa4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	68da      	ldr	r2, [r3, #12]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801171c:	425b      	negs	r3, r3
 801171e:	441a      	add	r2, r3
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	68da      	ldr	r2, [r3, #12]
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	429a      	cmp	r2, r3
 801172e:	d207      	bcs.n	8011740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	689a      	ldr	r2, [r3, #8]
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011738:	425b      	negs	r3, r3
 801173a:	441a      	add	r2, r3
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2b02      	cmp	r3, #2
 8011744:	d105      	bne.n	8011752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d002      	beq.n	8011752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	3b01      	subs	r3, #1
 8011750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	1c5a      	adds	r2, r3, #1
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801175a:	697b      	ldr	r3, [r7, #20]
}
 801175c:	4618      	mov	r0, r3
 801175e:	3718      	adds	r7, #24
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011772:	2b00      	cmp	r3, #0
 8011774:	d018      	beq.n	80117a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	68da      	ldr	r2, [r3, #12]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801177e:	441a      	add	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	68da      	ldr	r2, [r3, #12]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	429a      	cmp	r2, r3
 801178e:	d303      	bcc.n	8011798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	68d9      	ldr	r1, [r3, #12]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80117a0:	461a      	mov	r2, r3
 80117a2:	6838      	ldr	r0, [r7, #0]
 80117a4:	f002 f97e 	bl	8013aa4 <memcpy>
	}
}
 80117a8:	bf00      	nop
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b084      	sub	sp, #16
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80117b8:	f001 fdd8 	bl	801336c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80117c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117c4:	e011      	b.n	80117ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d012      	beq.n	80117f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	3324      	adds	r3, #36	@ 0x24
 80117d2:	4618      	mov	r0, r3
 80117d4:	f000 fd9e 	bl	8012314 <xTaskRemoveFromEventList>
 80117d8:	4603      	mov	r3, r0
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d001      	beq.n	80117e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80117de:	f000 fe7d 	bl	80124dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80117e2:	7bfb      	ldrb	r3, [r7, #15]
 80117e4:	3b01      	subs	r3, #1
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80117ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	dce9      	bgt.n	80117c6 <prvUnlockQueue+0x16>
 80117f2:	e000      	b.n	80117f6 <prvUnlockQueue+0x46>
					break;
 80117f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	22ff      	movs	r2, #255	@ 0xff
 80117fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80117fe:	f001 fdeb 	bl	80133d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011802:	f001 fdb3 	bl	801336c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801180c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801180e:	e011      	b.n	8011834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	691b      	ldr	r3, [r3, #16]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d012      	beq.n	801183e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3310      	adds	r3, #16
 801181c:	4618      	mov	r0, r3
 801181e:	f000 fd79 	bl	8012314 <xTaskRemoveFromEventList>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d001      	beq.n	801182c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011828:	f000 fe58 	bl	80124dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801182c:	7bbb      	ldrb	r3, [r7, #14]
 801182e:	3b01      	subs	r3, #1
 8011830:	b2db      	uxtb	r3, r3
 8011832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011838:	2b00      	cmp	r3, #0
 801183a:	dce9      	bgt.n	8011810 <prvUnlockQueue+0x60>
 801183c:	e000      	b.n	8011840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801183e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	22ff      	movs	r2, #255	@ 0xff
 8011844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011848:	f001 fdc6 	bl	80133d8 <vPortExitCritical>
}
 801184c:	bf00      	nop
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}

08011854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801185c:	f001 fd86 	bl	801336c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011864:	2b00      	cmp	r3, #0
 8011866:	d102      	bne.n	801186e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011868:	2301      	movs	r3, #1
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	e001      	b.n	8011872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801186e:	2300      	movs	r3, #0
 8011870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011872:	f001 fdb1 	bl	80133d8 <vPortExitCritical>

	return xReturn;
 8011876:	68fb      	ldr	r3, [r7, #12]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011888:	f001 fd70 	bl	801336c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011894:	429a      	cmp	r2, r3
 8011896:	d102      	bne.n	801189e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011898:	2301      	movs	r3, #1
 801189a:	60fb      	str	r3, [r7, #12]
 801189c:	e001      	b.n	80118a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801189e:	2300      	movs	r3, #0
 80118a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80118a2:	f001 fd99 	bl	80133d8 <vPortExitCritical>

	return xReturn;
 80118a6:	68fb      	ldr	r3, [r7, #12]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118ba:	2300      	movs	r3, #0
 80118bc:	60fb      	str	r3, [r7, #12]
 80118be:	e014      	b.n	80118ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80118c0:	4a0f      	ldr	r2, [pc, #60]	@ (8011900 <vQueueAddToRegistry+0x50>)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10b      	bne.n	80118e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80118cc:	490c      	ldr	r1, [pc, #48]	@ (8011900 <vQueueAddToRegistry+0x50>)
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80118d6:	4a0a      	ldr	r2, [pc, #40]	@ (8011900 <vQueueAddToRegistry+0x50>)
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	00db      	lsls	r3, r3, #3
 80118dc:	4413      	add	r3, r2
 80118de:	687a      	ldr	r2, [r7, #4]
 80118e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80118e2:	e006      	b.n	80118f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	3301      	adds	r3, #1
 80118e8:	60fb      	str	r3, [r7, #12]
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b07      	cmp	r3, #7
 80118ee:	d9e7      	bls.n	80118c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80118f0:	bf00      	nop
 80118f2:	bf00      	nop
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	20001c30 	.word	0x20001c30

08011904 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011904:	b480      	push	{r7}
 8011906:	b085      	sub	sp, #20
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801190c:	2300      	movs	r3, #0
 801190e:	60fb      	str	r3, [r7, #12]
 8011910:	e016      	b.n	8011940 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011912:	4a10      	ldr	r2, [pc, #64]	@ (8011954 <vQueueUnregisterQueue+0x50>)
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	4413      	add	r3, r2
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	429a      	cmp	r2, r3
 8011920:	d10b      	bne.n	801193a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011922:	4a0c      	ldr	r2, [pc, #48]	@ (8011954 <vQueueUnregisterQueue+0x50>)
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	2100      	movs	r1, #0
 8011928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801192c:	4a09      	ldr	r2, [pc, #36]	@ (8011954 <vQueueUnregisterQueue+0x50>)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	00db      	lsls	r3, r3, #3
 8011932:	4413      	add	r3, r2
 8011934:	2200      	movs	r2, #0
 8011936:	605a      	str	r2, [r3, #4]
				break;
 8011938:	e006      	b.n	8011948 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	3301      	adds	r3, #1
 801193e:	60fb      	str	r3, [r7, #12]
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b07      	cmp	r3, #7
 8011944:	d9e5      	bls.n	8011912 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011946:	bf00      	nop
 8011948:	bf00      	nop
 801194a:	3714      	adds	r7, #20
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	20001c30 	.word	0x20001c30

08011958 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011968:	f001 fd00 	bl	801336c <vPortEnterCritical>
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011972:	b25b      	sxtb	r3, r3
 8011974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011978:	d103      	bne.n	8011982 <vQueueWaitForMessageRestricted+0x2a>
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	2200      	movs	r2, #0
 801197e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011988:	b25b      	sxtb	r3, r3
 801198a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801198e:	d103      	bne.n	8011998 <vQueueWaitForMessageRestricted+0x40>
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2200      	movs	r2, #0
 8011994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011998:	f001 fd1e 	bl	80133d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d106      	bne.n	80119b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	3324      	adds	r3, #36	@ 0x24
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	68b9      	ldr	r1, [r7, #8]
 80119ac:	4618      	mov	r0, r3
 80119ae:	f000 fc83 	bl	80122b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80119b2:	6978      	ldr	r0, [r7, #20]
 80119b4:	f7ff fefc 	bl	80117b0 <prvUnlockQueue>
	}
 80119b8:	bf00      	nop
 80119ba:	3718      	adds	r7, #24
 80119bc:	46bd      	mov	sp, r7
 80119be:	bd80      	pop	{r7, pc}

080119c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08e      	sub	sp, #56	@ 0x38
 80119c4:	af04      	add	r7, sp, #16
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
 80119cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80119ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d10d      	bne.n	80119f0 <xTaskCreateStatic+0x30>
	__asm volatile
 80119d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d8:	b672      	cpsid	i
 80119da:	f383 8811 	msr	BASEPRI, r3
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	b662      	cpsie	i
 80119e8:	623b      	str	r3, [r7, #32]
}
 80119ea:	bf00      	nop
 80119ec:	bf00      	nop
 80119ee:	e7fd      	b.n	80119ec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80119f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d10d      	bne.n	8011a12 <xTaskCreateStatic+0x52>
	__asm volatile
 80119f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119fa:	b672      	cpsid	i
 80119fc:	f383 8811 	msr	BASEPRI, r3
 8011a00:	f3bf 8f6f 	isb	sy
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	b662      	cpsie	i
 8011a0a:	61fb      	str	r3, [r7, #28]
}
 8011a0c:	bf00      	nop
 8011a0e:	bf00      	nop
 8011a10:	e7fd      	b.n	8011a0e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011a12:	23a8      	movs	r3, #168	@ 0xa8
 8011a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2ba8      	cmp	r3, #168	@ 0xa8
 8011a1a:	d00d      	beq.n	8011a38 <xTaskCreateStatic+0x78>
	__asm volatile
 8011a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a20:	b672      	cpsid	i
 8011a22:	f383 8811 	msr	BASEPRI, r3
 8011a26:	f3bf 8f6f 	isb	sy
 8011a2a:	f3bf 8f4f 	dsb	sy
 8011a2e:	b662      	cpsie	i
 8011a30:	61bb      	str	r3, [r7, #24]
}
 8011a32:	bf00      	nop
 8011a34:	bf00      	nop
 8011a36:	e7fd      	b.n	8011a34 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d01e      	beq.n	8011a7e <xTaskCreateStatic+0xbe>
 8011a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d01b      	beq.n	8011a7e <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a52:	2202      	movs	r2, #2
 8011a54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011a58:	2300      	movs	r3, #0
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a5e:	9302      	str	r3, [sp, #8]
 8011a60:	f107 0314 	add.w	r3, r7, #20
 8011a64:	9301      	str	r3, [sp, #4]
 8011a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	68b9      	ldr	r1, [r7, #8]
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 f851 	bl	8011b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011a78:	f000 f8f8 	bl	8011c6c <prvAddNewTaskToReadyList>
 8011a7c:	e001      	b.n	8011a82 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011a82:	697b      	ldr	r3, [r7, #20]
	}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3728      	adds	r7, #40	@ 0x28
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b08c      	sub	sp, #48	@ 0x30
 8011a90:	af04      	add	r7, sp, #16
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	603b      	str	r3, [r7, #0]
 8011a98:	4613      	mov	r3, r2
 8011a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011a9c:	88fb      	ldrh	r3, [r7, #6]
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f001 fd91 	bl	80135c8 <pvPortMalloc>
 8011aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00e      	beq.n	8011acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011aae:	20a8      	movs	r0, #168	@ 0xa8
 8011ab0:	f001 fd8a 	bl	80135c8 <pvPortMalloc>
 8011ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d003      	beq.n	8011ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	697a      	ldr	r2, [r7, #20]
 8011ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ac2:	e005      	b.n	8011ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011ac4:	6978      	ldr	r0, [r7, #20]
 8011ac6:	f001 fe4d 	bl	8013764 <vPortFree>
 8011aca:	e001      	b.n	8011ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011acc:	2300      	movs	r3, #0
 8011ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d017      	beq.n	8011b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ad6:	69fb      	ldr	r3, [r7, #28]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011ade:	88fa      	ldrh	r2, [r7, #6]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	9303      	str	r3, [sp, #12]
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	9302      	str	r3, [sp, #8]
 8011ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aea:	9301      	str	r3, [sp, #4]
 8011aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aee:	9300      	str	r3, [sp, #0]
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	68b9      	ldr	r1, [r7, #8]
 8011af4:	68f8      	ldr	r0, [r7, #12]
 8011af6:	f000 f80f 	bl	8011b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011afa:	69f8      	ldr	r0, [r7, #28]
 8011afc:	f000 f8b6 	bl	8011c6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011b00:	2301      	movs	r3, #1
 8011b02:	61bb      	str	r3, [r7, #24]
 8011b04:	e002      	b.n	8011b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011b06:	f04f 33ff 	mov.w	r3, #4294967295
 8011b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3720      	adds	r7, #32
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
	...

08011b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b088      	sub	sp, #32
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
 8011b24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	461a      	mov	r2, r3
 8011b30:	21a5      	movs	r1, #165	@ 0xa5
 8011b32:	f001 ff33 	bl	801399c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011b3a:	6879      	ldr	r1, [r7, #4]
 8011b3c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011b40:	440b      	add	r3, r1
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	f023 0307 	bic.w	r3, r3, #7
 8011b4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	f003 0307 	and.w	r3, r3, #7
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00d      	beq.n	8011b76 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8011b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b5e:	b672      	cpsid	i
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	b662      	cpsie	i
 8011b6e:	617b      	str	r3, [r7, #20]
}
 8011b70:	bf00      	nop
 8011b72:	bf00      	nop
 8011b74:	e7fd      	b.n	8011b72 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d01f      	beq.n	8011bbc <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	61fb      	str	r3, [r7, #28]
 8011b80:	e012      	b.n	8011ba8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	4413      	add	r3, r2
 8011b88:	7819      	ldrb	r1, [r3, #0]
 8011b8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	4413      	add	r3, r2
 8011b90:	3334      	adds	r3, #52	@ 0x34
 8011b92:	460a      	mov	r2, r1
 8011b94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	4413      	add	r3, r2
 8011b9c:	781b      	ldrb	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d006      	beq.n	8011bb0 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011ba2:	69fb      	ldr	r3, [r7, #28]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	61fb      	str	r3, [r7, #28]
 8011ba8:	69fb      	ldr	r3, [r7, #28]
 8011baa:	2b0f      	cmp	r3, #15
 8011bac:	d9e9      	bls.n	8011b82 <prvInitialiseNewTask+0x6a>
 8011bae:	e000      	b.n	8011bb2 <prvInitialiseNewTask+0x9a>
			{
				break;
 8011bb0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011bba:	e003      	b.n	8011bc4 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc6:	2b37      	cmp	r3, #55	@ 0x37
 8011bc8:	d901      	bls.n	8011bce <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011bca:	2337      	movs	r3, #55	@ 0x37
 8011bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bdc:	2200      	movs	r2, #0
 8011bde:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be2:	3304      	adds	r3, #4
 8011be4:	4618      	mov	r0, r3
 8011be6:	f7fe fde3 	bl	80107b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bec:	3318      	adds	r3, #24
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fdde 	bl	80107b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c08:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c14:	2200      	movs	r2, #0
 8011c16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c1c:	3354      	adds	r3, #84	@ 0x54
 8011c1e:	224c      	movs	r2, #76	@ 0x4c
 8011c20:	2100      	movs	r1, #0
 8011c22:	4618      	mov	r0, r3
 8011c24:	f001 feba 	bl	801399c <memset>
 8011c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8011c60 <prvInitialiseNewTask+0x148>)
 8011c2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8011c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c30:	4a0c      	ldr	r2, [pc, #48]	@ (8011c64 <prvInitialiseNewTask+0x14c>)
 8011c32:	65da      	str	r2, [r3, #92]	@ 0x5c
 8011c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c36:	4a0c      	ldr	r2, [pc, #48]	@ (8011c68 <prvInitialiseNewTask+0x150>)
 8011c38:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011c3a:	683a      	ldr	r2, [r7, #0]
 8011c3c:	68f9      	ldr	r1, [r7, #12]
 8011c3e:	69b8      	ldr	r0, [r7, #24]
 8011c40:	f001 fa88 	bl	8013154 <pxPortInitialiseStack>
 8011c44:	4602      	mov	r2, r0
 8011c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c48:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011c56:	bf00      	nop
 8011c58:	3720      	adds	r7, #32
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	20005ebc 	.word	0x20005ebc
 8011c64:	20005f24 	.word	0x20005f24
 8011c68:	20005f8c 	.word	0x20005f8c

08011c6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b082      	sub	sp, #8
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011c74:	f001 fb7a 	bl	801336c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011c78:	4b2d      	ldr	r3, [pc, #180]	@ (8011d30 <prvAddNewTaskToReadyList+0xc4>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8011d30 <prvAddNewTaskToReadyList+0xc4>)
 8011c80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011c82:	4b2c      	ldr	r3, [pc, #176]	@ (8011d34 <prvAddNewTaskToReadyList+0xc8>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d109      	bne.n	8011c9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8011d34 <prvAddNewTaskToReadyList+0xc8>)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011c90:	4b27      	ldr	r3, [pc, #156]	@ (8011d30 <prvAddNewTaskToReadyList+0xc4>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d110      	bne.n	8011cba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011c98:	f000 fc44 	bl	8012524 <prvInitialiseTaskLists>
 8011c9c:	e00d      	b.n	8011cba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011c9e:	4b26      	ldr	r3, [pc, #152]	@ (8011d38 <prvAddNewTaskToReadyList+0xcc>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d109      	bne.n	8011cba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011ca6:	4b23      	ldr	r3, [pc, #140]	@ (8011d34 <prvAddNewTaskToReadyList+0xc8>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d802      	bhi.n	8011cba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011cb4:	4a1f      	ldr	r2, [pc, #124]	@ (8011d34 <prvAddNewTaskToReadyList+0xc8>)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011cba:	4b20      	ldr	r3, [pc, #128]	@ (8011d3c <prvAddNewTaskToReadyList+0xd0>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	3301      	adds	r3, #1
 8011cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8011d3c <prvAddNewTaskToReadyList+0xd0>)
 8011cc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8011d3c <prvAddNewTaskToReadyList+0xd0>)
 8011cc6:	681a      	ldr	r2, [r3, #0]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8011d40 <prvAddNewTaskToReadyList+0xd4>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	d903      	bls.n	8011ce0 <prvAddNewTaskToReadyList+0x74>
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cdc:	4a18      	ldr	r2, [pc, #96]	@ (8011d40 <prvAddNewTaskToReadyList+0xd4>)
 8011cde:	6013      	str	r3, [r2, #0]
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	4413      	add	r3, r2
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	4a15      	ldr	r2, [pc, #84]	@ (8011d44 <prvAddNewTaskToReadyList+0xd8>)
 8011cee:	441a      	add	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	3304      	adds	r3, #4
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	4610      	mov	r0, r2
 8011cf8:	f7fe fd67 	bl	80107ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011cfc:	f001 fb6c 	bl	80133d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011d00:	4b0d      	ldr	r3, [pc, #52]	@ (8011d38 <prvAddNewTaskToReadyList+0xcc>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d00e      	beq.n	8011d26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011d08:	4b0a      	ldr	r3, [pc, #40]	@ (8011d34 <prvAddNewTaskToReadyList+0xc8>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d207      	bcs.n	8011d26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011d16:	4b0c      	ldr	r3, [pc, #48]	@ (8011d48 <prvAddNewTaskToReadyList+0xdc>)
 8011d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d1c:	601a      	str	r2, [r3, #0]
 8011d1e:	f3bf 8f4f 	dsb	sy
 8011d22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d26:	bf00      	nop
 8011d28:	3708      	adds	r7, #8
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	20002144 	.word	0x20002144
 8011d34:	20001c70 	.word	0x20001c70
 8011d38:	20002150 	.word	0x20002150
 8011d3c:	20002160 	.word	0x20002160
 8011d40:	2000214c 	.word	0x2000214c
 8011d44:	20001c74 	.word	0x20001c74
 8011d48:	e000ed04 	.word	0xe000ed04

08011d4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011d54:	2300      	movs	r3, #0
 8011d56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d01a      	beq.n	8011d94 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011d5e:	4b15      	ldr	r3, [pc, #84]	@ (8011db4 <vTaskDelay+0x68>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d00d      	beq.n	8011d82 <vTaskDelay+0x36>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d6a:	b672      	cpsid	i
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	b662      	cpsie	i
 8011d7a:	60bb      	str	r3, [r7, #8]
}
 8011d7c:	bf00      	nop
 8011d7e:	bf00      	nop
 8011d80:	e7fd      	b.n	8011d7e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011d82:	f000 f88f 	bl	8011ea4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011d86:	2100      	movs	r1, #0
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f000 fe27 	bl	80129dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011d8e:	f000 f897 	bl	8011ec0 <xTaskResumeAll>
 8011d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d107      	bne.n	8011daa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8011d9a:	4b07      	ldr	r3, [pc, #28]	@ (8011db8 <vTaskDelay+0x6c>)
 8011d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da0:	601a      	str	r2, [r3, #0]
 8011da2:	f3bf 8f4f 	dsb	sy
 8011da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011daa:	bf00      	nop
 8011dac:	3710      	adds	r7, #16
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}
 8011db2:	bf00      	nop
 8011db4:	2000216c 	.word	0x2000216c
 8011db8:	e000ed04 	.word	0xe000ed04

08011dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b08a      	sub	sp, #40	@ 0x28
 8011dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011dca:	463a      	mov	r2, r7
 8011dcc:	1d39      	adds	r1, r7, #4
 8011dce:	f107 0308 	add.w	r3, r7, #8
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fe fc98 	bl	8010708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011dd8:	6839      	ldr	r1, [r7, #0]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	68ba      	ldr	r2, [r7, #8]
 8011dde:	9202      	str	r2, [sp, #8]
 8011de0:	9301      	str	r3, [sp, #4]
 8011de2:	2300      	movs	r3, #0
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	2300      	movs	r3, #0
 8011de8:	460a      	mov	r2, r1
 8011dea:	4926      	ldr	r1, [pc, #152]	@ (8011e84 <vTaskStartScheduler+0xc8>)
 8011dec:	4826      	ldr	r0, [pc, #152]	@ (8011e88 <vTaskStartScheduler+0xcc>)
 8011dee:	f7ff fde7 	bl	80119c0 <xTaskCreateStatic>
 8011df2:	4603      	mov	r3, r0
 8011df4:	4a25      	ldr	r2, [pc, #148]	@ (8011e8c <vTaskStartScheduler+0xd0>)
 8011df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011df8:	4b24      	ldr	r3, [pc, #144]	@ (8011e8c <vTaskStartScheduler+0xd0>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011e00:	2301      	movs	r3, #1
 8011e02:	617b      	str	r3, [r7, #20]
 8011e04:	e001      	b.n	8011e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011e06:	2300      	movs	r3, #0
 8011e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d102      	bne.n	8011e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011e10:	f000 fe38 	bl	8012a84 <xTimerCreateTimerTask>
 8011e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d11d      	bne.n	8011e58 <vTaskStartScheduler+0x9c>
	__asm volatile
 8011e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e20:	b672      	cpsid	i
 8011e22:	f383 8811 	msr	BASEPRI, r3
 8011e26:	f3bf 8f6f 	isb	sy
 8011e2a:	f3bf 8f4f 	dsb	sy
 8011e2e:	b662      	cpsie	i
 8011e30:	613b      	str	r3, [r7, #16]
}
 8011e32:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011e34:	4b16      	ldr	r3, [pc, #88]	@ (8011e90 <vTaskStartScheduler+0xd4>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	3354      	adds	r3, #84	@ 0x54
 8011e3a:	4a16      	ldr	r2, [pc, #88]	@ (8011e94 <vTaskStartScheduler+0xd8>)
 8011e3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011e3e:	4b16      	ldr	r3, [pc, #88]	@ (8011e98 <vTaskStartScheduler+0xdc>)
 8011e40:	f04f 32ff 	mov.w	r2, #4294967295
 8011e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011e46:	4b15      	ldr	r3, [pc, #84]	@ (8011e9c <vTaskStartScheduler+0xe0>)
 8011e48:	2201      	movs	r2, #1
 8011e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011e4c:	4b14      	ldr	r3, [pc, #80]	@ (8011ea0 <vTaskStartScheduler+0xe4>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011e52:	f001 fa0d 	bl	8013270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011e56:	e011      	b.n	8011e7c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5e:	d10d      	bne.n	8011e7c <vTaskStartScheduler+0xc0>
	__asm volatile
 8011e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e64:	b672      	cpsid	i
 8011e66:	f383 8811 	msr	BASEPRI, r3
 8011e6a:	f3bf 8f6f 	isb	sy
 8011e6e:	f3bf 8f4f 	dsb	sy
 8011e72:	b662      	cpsie	i
 8011e74:	60fb      	str	r3, [r7, #12]
}
 8011e76:	bf00      	nop
 8011e78:	bf00      	nop
 8011e7a:	e7fd      	b.n	8011e78 <vTaskStartScheduler+0xbc>
}
 8011e7c:	bf00      	nop
 8011e7e:	3718      	adds	r7, #24
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}
 8011e84:	08013c14 	.word	0x08013c14
 8011e88:	080124f5 	.word	0x080124f5
 8011e8c:	20002168 	.word	0x20002168
 8011e90:	20001c70 	.word	0x20001c70
 8011e94:	20000064 	.word	0x20000064
 8011e98:	20002164 	.word	0x20002164
 8011e9c:	20002150 	.word	0x20002150
 8011ea0:	20002148 	.word	0x20002148

08011ea4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011ea8:	4b04      	ldr	r3, [pc, #16]	@ (8011ebc <vTaskSuspendAll+0x18>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	3301      	adds	r3, #1
 8011eae:	4a03      	ldr	r2, [pc, #12]	@ (8011ebc <vTaskSuspendAll+0x18>)
 8011eb0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011eb2:	bf00      	nop
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	2000216c 	.word	0x2000216c

08011ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011ece:	4b43      	ldr	r3, [pc, #268]	@ (8011fdc <xTaskResumeAll+0x11c>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10d      	bne.n	8011ef2 <xTaskResumeAll+0x32>
	__asm volatile
 8011ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eda:	b672      	cpsid	i
 8011edc:	f383 8811 	msr	BASEPRI, r3
 8011ee0:	f3bf 8f6f 	isb	sy
 8011ee4:	f3bf 8f4f 	dsb	sy
 8011ee8:	b662      	cpsie	i
 8011eea:	603b      	str	r3, [r7, #0]
}
 8011eec:	bf00      	nop
 8011eee:	bf00      	nop
 8011ef0:	e7fd      	b.n	8011eee <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011ef2:	f001 fa3b 	bl	801336c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011ef6:	4b39      	ldr	r3, [pc, #228]	@ (8011fdc <xTaskResumeAll+0x11c>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	3b01      	subs	r3, #1
 8011efc:	4a37      	ldr	r2, [pc, #220]	@ (8011fdc <xTaskResumeAll+0x11c>)
 8011efe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f00:	4b36      	ldr	r3, [pc, #216]	@ (8011fdc <xTaskResumeAll+0x11c>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d162      	bne.n	8011fce <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011f08:	4b35      	ldr	r3, [pc, #212]	@ (8011fe0 <xTaskResumeAll+0x120>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d05e      	beq.n	8011fce <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f10:	e02f      	b.n	8011f72 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f12:	4b34      	ldr	r3, [pc, #208]	@ (8011fe4 <xTaskResumeAll+0x124>)
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	3318      	adds	r3, #24
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fcb0 	bl	8010884 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	3304      	adds	r3, #4
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7fe fcab 	bl	8010884 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f32:	4b2d      	ldr	r3, [pc, #180]	@ (8011fe8 <xTaskResumeAll+0x128>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d903      	bls.n	8011f42 <xTaskResumeAll+0x82>
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3e:	4a2a      	ldr	r2, [pc, #168]	@ (8011fe8 <xTaskResumeAll+0x128>)
 8011f40:	6013      	str	r3, [r2, #0]
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f46:	4613      	mov	r3, r2
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	009b      	lsls	r3, r3, #2
 8011f4e:	4a27      	ldr	r2, [pc, #156]	@ (8011fec <xTaskResumeAll+0x12c>)
 8011f50:	441a      	add	r2, r3
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	3304      	adds	r3, #4
 8011f56:	4619      	mov	r1, r3
 8011f58:	4610      	mov	r0, r2
 8011f5a:	f7fe fc36 	bl	80107ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f62:	4b23      	ldr	r3, [pc, #140]	@ (8011ff0 <xTaskResumeAll+0x130>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f68:	429a      	cmp	r2, r3
 8011f6a:	d302      	bcc.n	8011f72 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8011f6c:	4b21      	ldr	r3, [pc, #132]	@ (8011ff4 <xTaskResumeAll+0x134>)
 8011f6e:	2201      	movs	r2, #1
 8011f70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f72:	4b1c      	ldr	r3, [pc, #112]	@ (8011fe4 <xTaskResumeAll+0x124>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1cb      	bne.n	8011f12 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011f80:	f000 fb76 	bl	8012670 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011f84:	4b1c      	ldr	r3, [pc, #112]	@ (8011ff8 <xTaskResumeAll+0x138>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d010      	beq.n	8011fb2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011f90:	f000 f846 	bl	8012020 <xTaskIncrementTick>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d002      	beq.n	8011fa0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8011f9a:	4b16      	ldr	r3, [pc, #88]	@ (8011ff4 <xTaskResumeAll+0x134>)
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	3b01      	subs	r3, #1
 8011fa4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1f1      	bne.n	8011f90 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8011fac:	4b12      	ldr	r3, [pc, #72]	@ (8011ff8 <xTaskResumeAll+0x138>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011fb2:	4b10      	ldr	r3, [pc, #64]	@ (8011ff4 <xTaskResumeAll+0x134>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d009      	beq.n	8011fce <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011fba:	2301      	movs	r3, #1
 8011fbc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8011ffc <xTaskResumeAll+0x13c>)
 8011fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fc4:	601a      	str	r2, [r3, #0]
 8011fc6:	f3bf 8f4f 	dsb	sy
 8011fca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011fce:	f001 fa03 	bl	80133d8 <vPortExitCritical>

	return xAlreadyYielded;
 8011fd2:	68bb      	ldr	r3, [r7, #8]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	2000216c 	.word	0x2000216c
 8011fe0:	20002144 	.word	0x20002144
 8011fe4:	20002104 	.word	0x20002104
 8011fe8:	2000214c 	.word	0x2000214c
 8011fec:	20001c74 	.word	0x20001c74
 8011ff0:	20001c70 	.word	0x20001c70
 8011ff4:	20002158 	.word	0x20002158
 8011ff8:	20002154 	.word	0x20002154
 8011ffc:	e000ed04 	.word	0xe000ed04

08012000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012000:	b480      	push	{r7}
 8012002:	b083      	sub	sp, #12
 8012004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012006:	4b05      	ldr	r3, [pc, #20]	@ (801201c <xTaskGetTickCount+0x1c>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801200c:	687b      	ldr	r3, [r7, #4]
}
 801200e:	4618      	mov	r0, r3
 8012010:	370c      	adds	r7, #12
 8012012:	46bd      	mov	sp, r7
 8012014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop
 801201c:	20002148 	.word	0x20002148

08012020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b086      	sub	sp, #24
 8012024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012026:	2300      	movs	r3, #0
 8012028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801202a:	4b50      	ldr	r3, [pc, #320]	@ (801216c <xTaskIncrementTick+0x14c>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	f040 808c 	bne.w	801214c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012034:	4b4e      	ldr	r3, [pc, #312]	@ (8012170 <xTaskIncrementTick+0x150>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801203c:	4a4c      	ldr	r2, [pc, #304]	@ (8012170 <xTaskIncrementTick+0x150>)
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d123      	bne.n	8012090 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8012048:	4b4a      	ldr	r3, [pc, #296]	@ (8012174 <xTaskIncrementTick+0x154>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d00d      	beq.n	801206e <xTaskIncrementTick+0x4e>
	__asm volatile
 8012052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012056:	b672      	cpsid	i
 8012058:	f383 8811 	msr	BASEPRI, r3
 801205c:	f3bf 8f6f 	isb	sy
 8012060:	f3bf 8f4f 	dsb	sy
 8012064:	b662      	cpsie	i
 8012066:	603b      	str	r3, [r7, #0]
}
 8012068:	bf00      	nop
 801206a:	bf00      	nop
 801206c:	e7fd      	b.n	801206a <xTaskIncrementTick+0x4a>
 801206e:	4b41      	ldr	r3, [pc, #260]	@ (8012174 <xTaskIncrementTick+0x154>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	4b40      	ldr	r3, [pc, #256]	@ (8012178 <xTaskIncrementTick+0x158>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	4a3e      	ldr	r2, [pc, #248]	@ (8012174 <xTaskIncrementTick+0x154>)
 801207a:	6013      	str	r3, [r2, #0]
 801207c:	4a3e      	ldr	r2, [pc, #248]	@ (8012178 <xTaskIncrementTick+0x158>)
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6013      	str	r3, [r2, #0]
 8012082:	4b3e      	ldr	r3, [pc, #248]	@ (801217c <xTaskIncrementTick+0x15c>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	3301      	adds	r3, #1
 8012088:	4a3c      	ldr	r2, [pc, #240]	@ (801217c <xTaskIncrementTick+0x15c>)
 801208a:	6013      	str	r3, [r2, #0]
 801208c:	f000 faf0 	bl	8012670 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012090:	4b3b      	ldr	r3, [pc, #236]	@ (8012180 <xTaskIncrementTick+0x160>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	693a      	ldr	r2, [r7, #16]
 8012096:	429a      	cmp	r2, r3
 8012098:	d349      	bcc.n	801212e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801209a:	4b36      	ldr	r3, [pc, #216]	@ (8012174 <xTaskIncrementTick+0x154>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d104      	bne.n	80120ae <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120a4:	4b36      	ldr	r3, [pc, #216]	@ (8012180 <xTaskIncrementTick+0x160>)
 80120a6:	f04f 32ff 	mov.w	r2, #4294967295
 80120aa:	601a      	str	r2, [r3, #0]
					break;
 80120ac:	e03f      	b.n	801212e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120ae:	4b31      	ldr	r3, [pc, #196]	@ (8012174 <xTaskIncrementTick+0x154>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	68db      	ldr	r3, [r3, #12]
 80120b4:	68db      	ldr	r3, [r3, #12]
 80120b6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80120be:	693a      	ldr	r2, [r7, #16]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d203      	bcs.n	80120ce <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80120c6:	4a2e      	ldr	r2, [pc, #184]	@ (8012180 <xTaskIncrementTick+0x160>)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80120cc:	e02f      	b.n	801212e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	3304      	adds	r3, #4
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fbd6 	bl	8010884 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d004      	beq.n	80120ea <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	3318      	adds	r3, #24
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fe fbcd 	bl	8010884 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120ee:	4b25      	ldr	r3, [pc, #148]	@ (8012184 <xTaskIncrementTick+0x164>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d903      	bls.n	80120fe <xTaskIncrementTick+0xde>
 80120f6:	68bb      	ldr	r3, [r7, #8]
 80120f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120fa:	4a22      	ldr	r2, [pc, #136]	@ (8012184 <xTaskIncrementTick+0x164>)
 80120fc:	6013      	str	r3, [r2, #0]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012102:	4613      	mov	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4413      	add	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4a1f      	ldr	r2, [pc, #124]	@ (8012188 <xTaskIncrementTick+0x168>)
 801210c:	441a      	add	r2, r3
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	3304      	adds	r3, #4
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fe fb58 	bl	80107ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801211e:	4b1b      	ldr	r3, [pc, #108]	@ (801218c <xTaskIncrementTick+0x16c>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012124:	429a      	cmp	r2, r3
 8012126:	d3b8      	bcc.n	801209a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8012128:	2301      	movs	r3, #1
 801212a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801212c:	e7b5      	b.n	801209a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801212e:	4b17      	ldr	r3, [pc, #92]	@ (801218c <xTaskIncrementTick+0x16c>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012134:	4914      	ldr	r1, [pc, #80]	@ (8012188 <xTaskIncrementTick+0x168>)
 8012136:	4613      	mov	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4413      	add	r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	440b      	add	r3, r1
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2b01      	cmp	r3, #1
 8012144:	d907      	bls.n	8012156 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8012146:	2301      	movs	r3, #1
 8012148:	617b      	str	r3, [r7, #20]
 801214a:	e004      	b.n	8012156 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801214c:	4b10      	ldr	r3, [pc, #64]	@ (8012190 <xTaskIncrementTick+0x170>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3301      	adds	r3, #1
 8012152:	4a0f      	ldr	r2, [pc, #60]	@ (8012190 <xTaskIncrementTick+0x170>)
 8012154:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012156:	4b0f      	ldr	r3, [pc, #60]	@ (8012194 <xTaskIncrementTick+0x174>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 801215e:	2301      	movs	r3, #1
 8012160:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012162:	697b      	ldr	r3, [r7, #20]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3718      	adds	r7, #24
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}
 801216c:	2000216c 	.word	0x2000216c
 8012170:	20002148 	.word	0x20002148
 8012174:	200020fc 	.word	0x200020fc
 8012178:	20002100 	.word	0x20002100
 801217c:	2000215c 	.word	0x2000215c
 8012180:	20002164 	.word	0x20002164
 8012184:	2000214c 	.word	0x2000214c
 8012188:	20001c74 	.word	0x20001c74
 801218c:	20001c70 	.word	0x20001c70
 8012190:	20002154 	.word	0x20002154
 8012194:	20002158 	.word	0x20002158

08012198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012198:	b480      	push	{r7}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801219e:	4b2c      	ldr	r3, [pc, #176]	@ (8012250 <vTaskSwitchContext+0xb8>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d003      	beq.n	80121ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80121a6:	4b2b      	ldr	r3, [pc, #172]	@ (8012254 <vTaskSwitchContext+0xbc>)
 80121a8:	2201      	movs	r2, #1
 80121aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80121ac:	e049      	b.n	8012242 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80121ae:	4b29      	ldr	r3, [pc, #164]	@ (8012254 <vTaskSwitchContext+0xbc>)
 80121b0:	2200      	movs	r2, #0
 80121b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121b4:	4b28      	ldr	r3, [pc, #160]	@ (8012258 <vTaskSwitchContext+0xc0>)
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	60fb      	str	r3, [r7, #12]
 80121ba:	e013      	b.n	80121e4 <vTaskSwitchContext+0x4c>
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d10d      	bne.n	80121de <vTaskSwitchContext+0x46>
	__asm volatile
 80121c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121c6:	b672      	cpsid	i
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	b662      	cpsie	i
 80121d6:	607b      	str	r3, [r7, #4]
}
 80121d8:	bf00      	nop
 80121da:	bf00      	nop
 80121dc:	e7fd      	b.n	80121da <vTaskSwitchContext+0x42>
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	3b01      	subs	r3, #1
 80121e2:	60fb      	str	r3, [r7, #12]
 80121e4:	491d      	ldr	r1, [pc, #116]	@ (801225c <vTaskSwitchContext+0xc4>)
 80121e6:	68fa      	ldr	r2, [r7, #12]
 80121e8:	4613      	mov	r3, r2
 80121ea:	009b      	lsls	r3, r3, #2
 80121ec:	4413      	add	r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	440b      	add	r3, r1
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d0e1      	beq.n	80121bc <vTaskSwitchContext+0x24>
 80121f8:	68fa      	ldr	r2, [r7, #12]
 80121fa:	4613      	mov	r3, r2
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	4413      	add	r3, r2
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	4a16      	ldr	r2, [pc, #88]	@ (801225c <vTaskSwitchContext+0xc4>)
 8012204:	4413      	add	r3, r2
 8012206:	60bb      	str	r3, [r7, #8]
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	685a      	ldr	r2, [r3, #4]
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	605a      	str	r2, [r3, #4]
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	685a      	ldr	r2, [r3, #4]
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	3308      	adds	r3, #8
 801221a:	429a      	cmp	r2, r3
 801221c:	d104      	bne.n	8012228 <vTaskSwitchContext+0x90>
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	685b      	ldr	r3, [r3, #4]
 8012222:	685a      	ldr	r2, [r3, #4]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	605a      	str	r2, [r3, #4]
 8012228:	68bb      	ldr	r3, [r7, #8]
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	4a0c      	ldr	r2, [pc, #48]	@ (8012260 <vTaskSwitchContext+0xc8>)
 8012230:	6013      	str	r3, [r2, #0]
 8012232:	4a09      	ldr	r2, [pc, #36]	@ (8012258 <vTaskSwitchContext+0xc0>)
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012238:	4b09      	ldr	r3, [pc, #36]	@ (8012260 <vTaskSwitchContext+0xc8>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	3354      	adds	r3, #84	@ 0x54
 801223e:	4a09      	ldr	r2, [pc, #36]	@ (8012264 <vTaskSwitchContext+0xcc>)
 8012240:	6013      	str	r3, [r2, #0]
}
 8012242:	bf00      	nop
 8012244:	3714      	adds	r7, #20
 8012246:	46bd      	mov	sp, r7
 8012248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224c:	4770      	bx	lr
 801224e:	bf00      	nop
 8012250:	2000216c 	.word	0x2000216c
 8012254:	20002158 	.word	0x20002158
 8012258:	2000214c 	.word	0x2000214c
 801225c:	20001c74 	.word	0x20001c74
 8012260:	20001c70 	.word	0x20001c70
 8012264:	20000064 	.word	0x20000064

08012268 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b084      	sub	sp, #16
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d10d      	bne.n	8012294 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8012278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801227c:	b672      	cpsid	i
 801227e:	f383 8811 	msr	BASEPRI, r3
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	f3bf 8f4f 	dsb	sy
 801228a:	b662      	cpsie	i
 801228c:	60fb      	str	r3, [r7, #12]
}
 801228e:	bf00      	nop
 8012290:	bf00      	nop
 8012292:	e7fd      	b.n	8012290 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012294:	4b07      	ldr	r3, [pc, #28]	@ (80122b4 <vTaskPlaceOnEventList+0x4c>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	3318      	adds	r3, #24
 801229a:	4619      	mov	r1, r3
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f7fe fab8 	bl	8010812 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80122a2:	2101      	movs	r1, #1
 80122a4:	6838      	ldr	r0, [r7, #0]
 80122a6:	f000 fb99 	bl	80129dc <prvAddCurrentTaskToDelayedList>
}
 80122aa:	bf00      	nop
 80122ac:	3710      	adds	r7, #16
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
 80122b2:	bf00      	nop
 80122b4:	20001c70 	.word	0x20001c70

080122b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b086      	sub	sp, #24
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d10d      	bne.n	80122e6 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 80122ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122ce:	b672      	cpsid	i
 80122d0:	f383 8811 	msr	BASEPRI, r3
 80122d4:	f3bf 8f6f 	isb	sy
 80122d8:	f3bf 8f4f 	dsb	sy
 80122dc:	b662      	cpsie	i
 80122de:	617b      	str	r3, [r7, #20]
}
 80122e0:	bf00      	nop
 80122e2:	bf00      	nop
 80122e4:	e7fd      	b.n	80122e2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80122e6:	4b0a      	ldr	r3, [pc, #40]	@ (8012310 <vTaskPlaceOnEventListRestricted+0x58>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3318      	adds	r3, #24
 80122ec:	4619      	mov	r1, r3
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7fe fa6b 	bl	80107ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d002      	beq.n	8012300 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80122fa:	f04f 33ff 	mov.w	r3, #4294967295
 80122fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012300:	6879      	ldr	r1, [r7, #4]
 8012302:	68b8      	ldr	r0, [r7, #8]
 8012304:	f000 fb6a 	bl	80129dc <prvAddCurrentTaskToDelayedList>
	}
 8012308:	bf00      	nop
 801230a:	3718      	adds	r7, #24
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20001c70 	.word	0x20001c70

08012314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b086      	sub	sp, #24
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d10d      	bne.n	8012346 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801232a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801232e:	b672      	cpsid	i
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
 8012338:	f3bf 8f4f 	dsb	sy
 801233c:	b662      	cpsie	i
 801233e:	60fb      	str	r3, [r7, #12]
}
 8012340:	bf00      	nop
 8012342:	bf00      	nop
 8012344:	e7fd      	b.n	8012342 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	3318      	adds	r3, #24
 801234a:	4618      	mov	r0, r3
 801234c:	f7fe fa9a 	bl	8010884 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012350:	4b1d      	ldr	r3, [pc, #116]	@ (80123c8 <xTaskRemoveFromEventList+0xb4>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d11d      	bne.n	8012394 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	3304      	adds	r3, #4
 801235c:	4618      	mov	r0, r3
 801235e:	f7fe fa91 	bl	8010884 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012366:	4b19      	ldr	r3, [pc, #100]	@ (80123cc <xTaskRemoveFromEventList+0xb8>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	429a      	cmp	r2, r3
 801236c:	d903      	bls.n	8012376 <xTaskRemoveFromEventList+0x62>
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012372:	4a16      	ldr	r2, [pc, #88]	@ (80123cc <xTaskRemoveFromEventList+0xb8>)
 8012374:	6013      	str	r3, [r2, #0]
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801237a:	4613      	mov	r3, r2
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	4413      	add	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	4a13      	ldr	r2, [pc, #76]	@ (80123d0 <xTaskRemoveFromEventList+0xbc>)
 8012384:	441a      	add	r2, r3
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	3304      	adds	r3, #4
 801238a:	4619      	mov	r1, r3
 801238c:	4610      	mov	r0, r2
 801238e:	f7fe fa1c 	bl	80107ca <vListInsertEnd>
 8012392:	e005      	b.n	80123a0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	3318      	adds	r3, #24
 8012398:	4619      	mov	r1, r3
 801239a:	480e      	ldr	r0, [pc, #56]	@ (80123d4 <xTaskRemoveFromEventList+0xc0>)
 801239c:	f7fe fa15 	bl	80107ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123a4:	4b0c      	ldr	r3, [pc, #48]	@ (80123d8 <xTaskRemoveFromEventList+0xc4>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d905      	bls.n	80123ba <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80123ae:	2301      	movs	r3, #1
 80123b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80123b2:	4b0a      	ldr	r3, [pc, #40]	@ (80123dc <xTaskRemoveFromEventList+0xc8>)
 80123b4:	2201      	movs	r2, #1
 80123b6:	601a      	str	r2, [r3, #0]
 80123b8:	e001      	b.n	80123be <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 80123ba:	2300      	movs	r3, #0
 80123bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80123be:	697b      	ldr	r3, [r7, #20]
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3718      	adds	r7, #24
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}
 80123c8:	2000216c 	.word	0x2000216c
 80123cc:	2000214c 	.word	0x2000214c
 80123d0:	20001c74 	.word	0x20001c74
 80123d4:	20002104 	.word	0x20002104
 80123d8:	20001c70 	.word	0x20001c70
 80123dc:	20002158 	.word	0x20002158

080123e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80123e8:	4b06      	ldr	r3, [pc, #24]	@ (8012404 <vTaskInternalSetTimeOutState+0x24>)
 80123ea:	681a      	ldr	r2, [r3, #0]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80123f0:	4b05      	ldr	r3, [pc, #20]	@ (8012408 <vTaskInternalSetTimeOutState+0x28>)
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	605a      	str	r2, [r3, #4]
}
 80123f8:	bf00      	nop
 80123fa:	370c      	adds	r7, #12
 80123fc:	46bd      	mov	sp, r7
 80123fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012402:	4770      	bx	lr
 8012404:	2000215c 	.word	0x2000215c
 8012408:	20002148 	.word	0x20002148

0801240c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b088      	sub	sp, #32
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10d      	bne.n	8012438 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801241c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012420:	b672      	cpsid	i
 8012422:	f383 8811 	msr	BASEPRI, r3
 8012426:	f3bf 8f6f 	isb	sy
 801242a:	f3bf 8f4f 	dsb	sy
 801242e:	b662      	cpsie	i
 8012430:	613b      	str	r3, [r7, #16]
}
 8012432:	bf00      	nop
 8012434:	bf00      	nop
 8012436:	e7fd      	b.n	8012434 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d10d      	bne.n	801245a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012442:	b672      	cpsid	i
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	b662      	cpsie	i
 8012452:	60fb      	str	r3, [r7, #12]
}
 8012454:	bf00      	nop
 8012456:	bf00      	nop
 8012458:	e7fd      	b.n	8012456 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801245a:	f000 ff87 	bl	801336c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801245e:	4b1d      	ldr	r3, [pc, #116]	@ (80124d4 <xTaskCheckForTimeOut+0xc8>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012476:	d102      	bne.n	801247e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012478:	2300      	movs	r3, #0
 801247a:	61fb      	str	r3, [r7, #28]
 801247c:	e023      	b.n	80124c6 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681a      	ldr	r2, [r3, #0]
 8012482:	4b15      	ldr	r3, [pc, #84]	@ (80124d8 <xTaskCheckForTimeOut+0xcc>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	429a      	cmp	r2, r3
 8012488:	d007      	beq.n	801249a <xTaskCheckForTimeOut+0x8e>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	69ba      	ldr	r2, [r7, #24]
 8012490:	429a      	cmp	r2, r3
 8012492:	d302      	bcc.n	801249a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012494:	2301      	movs	r3, #1
 8012496:	61fb      	str	r3, [r7, #28]
 8012498:	e015      	b.n	80124c6 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	697a      	ldr	r2, [r7, #20]
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d20b      	bcs.n	80124bc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80124a4:	683b      	ldr	r3, [r7, #0]
 80124a6:	681a      	ldr	r2, [r3, #0]
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	1ad2      	subs	r2, r2, r3
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff ff95 	bl	80123e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80124b6:	2300      	movs	r3, #0
 80124b8:	61fb      	str	r3, [r7, #28]
 80124ba:	e004      	b.n	80124c6 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 80124bc:	683b      	ldr	r3, [r7, #0]
 80124be:	2200      	movs	r2, #0
 80124c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80124c2:	2301      	movs	r3, #1
 80124c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80124c6:	f000 ff87 	bl	80133d8 <vPortExitCritical>

	return xReturn;
 80124ca:	69fb      	ldr	r3, [r7, #28]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3720      	adds	r7, #32
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	20002148 	.word	0x20002148
 80124d8:	2000215c 	.word	0x2000215c

080124dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80124dc:	b480      	push	{r7}
 80124de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80124e0:	4b03      	ldr	r3, [pc, #12]	@ (80124f0 <vTaskMissedYield+0x14>)
 80124e2:	2201      	movs	r2, #1
 80124e4:	601a      	str	r2, [r3, #0]
}
 80124e6:	bf00      	nop
 80124e8:	46bd      	mov	sp, r7
 80124ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ee:	4770      	bx	lr
 80124f0:	20002158 	.word	0x20002158

080124f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80124f4:	b580      	push	{r7, lr}
 80124f6:	b082      	sub	sp, #8
 80124f8:	af00      	add	r7, sp, #0
 80124fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80124fc:	f000 f852 	bl	80125a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012500:	4b06      	ldr	r3, [pc, #24]	@ (801251c <prvIdleTask+0x28>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	2b01      	cmp	r3, #1
 8012506:	d9f9      	bls.n	80124fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8012508:	4b05      	ldr	r3, [pc, #20]	@ (8012520 <prvIdleTask+0x2c>)
 801250a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801250e:	601a      	str	r2, [r3, #0]
 8012510:	f3bf 8f4f 	dsb	sy
 8012514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012518:	e7f0      	b.n	80124fc <prvIdleTask+0x8>
 801251a:	bf00      	nop
 801251c:	20001c74 	.word	0x20001c74
 8012520:	e000ed04 	.word	0xe000ed04

08012524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b082      	sub	sp, #8
 8012528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801252a:	2300      	movs	r3, #0
 801252c:	607b      	str	r3, [r7, #4]
 801252e:	e00c      	b.n	801254a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	4613      	mov	r3, r2
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	4413      	add	r3, r2
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4a12      	ldr	r2, [pc, #72]	@ (8012584 <prvInitialiseTaskLists+0x60>)
 801253c:	4413      	add	r3, r2
 801253e:	4618      	mov	r0, r3
 8012540:	f7fe f916 	bl	8010770 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	3301      	adds	r3, #1
 8012548:	607b      	str	r3, [r7, #4]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b37      	cmp	r3, #55	@ 0x37
 801254e:	d9ef      	bls.n	8012530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012550:	480d      	ldr	r0, [pc, #52]	@ (8012588 <prvInitialiseTaskLists+0x64>)
 8012552:	f7fe f90d 	bl	8010770 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012556:	480d      	ldr	r0, [pc, #52]	@ (801258c <prvInitialiseTaskLists+0x68>)
 8012558:	f7fe f90a 	bl	8010770 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801255c:	480c      	ldr	r0, [pc, #48]	@ (8012590 <prvInitialiseTaskLists+0x6c>)
 801255e:	f7fe f907 	bl	8010770 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012562:	480c      	ldr	r0, [pc, #48]	@ (8012594 <prvInitialiseTaskLists+0x70>)
 8012564:	f7fe f904 	bl	8010770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012568:	480b      	ldr	r0, [pc, #44]	@ (8012598 <prvInitialiseTaskLists+0x74>)
 801256a:	f7fe f901 	bl	8010770 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801256e:	4b0b      	ldr	r3, [pc, #44]	@ (801259c <prvInitialiseTaskLists+0x78>)
 8012570:	4a05      	ldr	r2, [pc, #20]	@ (8012588 <prvInitialiseTaskLists+0x64>)
 8012572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012574:	4b0a      	ldr	r3, [pc, #40]	@ (80125a0 <prvInitialiseTaskLists+0x7c>)
 8012576:	4a05      	ldr	r2, [pc, #20]	@ (801258c <prvInitialiseTaskLists+0x68>)
 8012578:	601a      	str	r2, [r3, #0]
}
 801257a:	bf00      	nop
 801257c:	3708      	adds	r7, #8
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	20001c74 	.word	0x20001c74
 8012588:	200020d4 	.word	0x200020d4
 801258c:	200020e8 	.word	0x200020e8
 8012590:	20002104 	.word	0x20002104
 8012594:	20002118 	.word	0x20002118
 8012598:	20002130 	.word	0x20002130
 801259c:	200020fc 	.word	0x200020fc
 80125a0:	20002100 	.word	0x20002100

080125a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b082      	sub	sp, #8
 80125a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80125aa:	e019      	b.n	80125e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80125ac:	f000 fede 	bl	801336c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125b0:	4b10      	ldr	r3, [pc, #64]	@ (80125f4 <prvCheckTasksWaitingTermination+0x50>)
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	3304      	adds	r3, #4
 80125bc:	4618      	mov	r0, r3
 80125be:	f7fe f961 	bl	8010884 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80125c2:	4b0d      	ldr	r3, [pc, #52]	@ (80125f8 <prvCheckTasksWaitingTermination+0x54>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	3b01      	subs	r3, #1
 80125c8:	4a0b      	ldr	r2, [pc, #44]	@ (80125f8 <prvCheckTasksWaitingTermination+0x54>)
 80125ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80125cc:	4b0b      	ldr	r3, [pc, #44]	@ (80125fc <prvCheckTasksWaitingTermination+0x58>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	3b01      	subs	r3, #1
 80125d2:	4a0a      	ldr	r2, [pc, #40]	@ (80125fc <prvCheckTasksWaitingTermination+0x58>)
 80125d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80125d6:	f000 feff 	bl	80133d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f000 f810 	bl	8012600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80125e0:	4b06      	ldr	r3, [pc, #24]	@ (80125fc <prvCheckTasksWaitingTermination+0x58>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d1e1      	bne.n	80125ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80125e8:	bf00      	nop
 80125ea:	bf00      	nop
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
 80125f2:	bf00      	nop
 80125f4:	20002118 	.word	0x20002118
 80125f8:	20002144 	.word	0x20002144
 80125fc:	2000212c 	.word	0x2000212c

08012600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012600:	b580      	push	{r7, lr}
 8012602:	b084      	sub	sp, #16
 8012604:	af00      	add	r7, sp, #0
 8012606:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	3354      	adds	r3, #84	@ 0x54
 801260c:	4618      	mov	r0, r3
 801260e:	f001 f9cd 	bl	80139ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012618:	2b00      	cmp	r3, #0
 801261a:	d108      	bne.n	801262e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012620:	4618      	mov	r0, r3
 8012622:	f001 f89f 	bl	8013764 <vPortFree>
				vPortFree( pxTCB );
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	f001 f89c 	bl	8013764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801262c:	e01b      	b.n	8012666 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012634:	2b01      	cmp	r3, #1
 8012636:	d103      	bne.n	8012640 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	f001 f893 	bl	8013764 <vPortFree>
	}
 801263e:	e012      	b.n	8012666 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012646:	2b02      	cmp	r3, #2
 8012648:	d00d      	beq.n	8012666 <prvDeleteTCB+0x66>
	__asm volatile
 801264a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801264e:	b672      	cpsid	i
 8012650:	f383 8811 	msr	BASEPRI, r3
 8012654:	f3bf 8f6f 	isb	sy
 8012658:	f3bf 8f4f 	dsb	sy
 801265c:	b662      	cpsie	i
 801265e:	60fb      	str	r3, [r7, #12]
}
 8012660:	bf00      	nop
 8012662:	bf00      	nop
 8012664:	e7fd      	b.n	8012662 <prvDeleteTCB+0x62>
	}
 8012666:	bf00      	nop
 8012668:	3710      	adds	r7, #16
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
	...

08012670 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012676:	4b0c      	ldr	r3, [pc, #48]	@ (80126a8 <prvResetNextTaskUnblockTime+0x38>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d104      	bne.n	801268a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012680:	4b0a      	ldr	r3, [pc, #40]	@ (80126ac <prvResetNextTaskUnblockTime+0x3c>)
 8012682:	f04f 32ff 	mov.w	r2, #4294967295
 8012686:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012688:	e008      	b.n	801269c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801268a:	4b07      	ldr	r3, [pc, #28]	@ (80126a8 <prvResetNextTaskUnblockTime+0x38>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	68db      	ldr	r3, [r3, #12]
 8012692:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	4a04      	ldr	r2, [pc, #16]	@ (80126ac <prvResetNextTaskUnblockTime+0x3c>)
 801269a:	6013      	str	r3, [r2, #0]
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr
 80126a8:	200020fc 	.word	0x200020fc
 80126ac:	20002164 	.word	0x20002164

080126b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80126b6:	4b0b      	ldr	r3, [pc, #44]	@ (80126e4 <xTaskGetSchedulerState+0x34>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d102      	bne.n	80126c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80126be:	2301      	movs	r3, #1
 80126c0:	607b      	str	r3, [r7, #4]
 80126c2:	e008      	b.n	80126d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126c4:	4b08      	ldr	r3, [pc, #32]	@ (80126e8 <xTaskGetSchedulerState+0x38>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80126cc:	2302      	movs	r3, #2
 80126ce:	607b      	str	r3, [r7, #4]
 80126d0:	e001      	b.n	80126d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80126d2:	2300      	movs	r3, #0
 80126d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80126d6:	687b      	ldr	r3, [r7, #4]
	}
 80126d8:	4618      	mov	r0, r3
 80126da:	370c      	adds	r7, #12
 80126dc:	46bd      	mov	sp, r7
 80126de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e2:	4770      	bx	lr
 80126e4:	20002150 	.word	0x20002150
 80126e8:	2000216c 	.word	0x2000216c

080126ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80126f8:	2300      	movs	r3, #0
 80126fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d051      	beq.n	80127a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012706:	4b2a      	ldr	r3, [pc, #168]	@ (80127b0 <xTaskPriorityInherit+0xc4>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801270c:	429a      	cmp	r2, r3
 801270e:	d241      	bcs.n	8012794 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	699b      	ldr	r3, [r3, #24]
 8012714:	2b00      	cmp	r3, #0
 8012716:	db06      	blt.n	8012726 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012718:	4b25      	ldr	r3, [pc, #148]	@ (80127b0 <xTaskPriorityInherit+0xc4>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801271e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	6959      	ldr	r1, [r3, #20]
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801272e:	4613      	mov	r3, r2
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	4413      	add	r3, r2
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	4a1f      	ldr	r2, [pc, #124]	@ (80127b4 <xTaskPriorityInherit+0xc8>)
 8012738:	4413      	add	r3, r2
 801273a:	4299      	cmp	r1, r3
 801273c:	d122      	bne.n	8012784 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	3304      	adds	r3, #4
 8012742:	4618      	mov	r0, r3
 8012744:	f7fe f89e 	bl	8010884 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012748:	4b19      	ldr	r3, [pc, #100]	@ (80127b0 <xTaskPriorityInherit+0xc4>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012756:	4b18      	ldr	r3, [pc, #96]	@ (80127b8 <xTaskPriorityInherit+0xcc>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d903      	bls.n	8012766 <xTaskPriorityInherit+0x7a>
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012762:	4a15      	ldr	r2, [pc, #84]	@ (80127b8 <xTaskPriorityInherit+0xcc>)
 8012764:	6013      	str	r3, [r2, #0]
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801276a:	4613      	mov	r3, r2
 801276c:	009b      	lsls	r3, r3, #2
 801276e:	4413      	add	r3, r2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	4a10      	ldr	r2, [pc, #64]	@ (80127b4 <xTaskPriorityInherit+0xc8>)
 8012774:	441a      	add	r2, r3
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	3304      	adds	r3, #4
 801277a:	4619      	mov	r1, r3
 801277c:	4610      	mov	r0, r2
 801277e:	f7fe f824 	bl	80107ca <vListInsertEnd>
 8012782:	e004      	b.n	801278e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012784:	4b0a      	ldr	r3, [pc, #40]	@ (80127b0 <xTaskPriorityInherit+0xc4>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801278e:	2301      	movs	r3, #1
 8012790:	60fb      	str	r3, [r7, #12]
 8012792:	e008      	b.n	80127a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012794:	68bb      	ldr	r3, [r7, #8]
 8012796:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012798:	4b05      	ldr	r3, [pc, #20]	@ (80127b0 <xTaskPriorityInherit+0xc4>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801279e:	429a      	cmp	r2, r3
 80127a0:	d201      	bcs.n	80127a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80127a2:	2301      	movs	r3, #1
 80127a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80127a6:	68fb      	ldr	r3, [r7, #12]
	}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20001c70 	.word	0x20001c70
 80127b4:	20001c74 	.word	0x20001c74
 80127b8:	2000214c 	.word	0x2000214c

080127bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b086      	sub	sp, #24
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80127c8:	2300      	movs	r3, #0
 80127ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d05c      	beq.n	801288c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80127d2:	4b31      	ldr	r3, [pc, #196]	@ (8012898 <xTaskPriorityDisinherit+0xdc>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	693a      	ldr	r2, [r7, #16]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d00d      	beq.n	80127f8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80127dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127e0:	b672      	cpsid	i
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	b662      	cpsie	i
 80127f0:	60fb      	str	r3, [r7, #12]
}
 80127f2:	bf00      	nop
 80127f4:	bf00      	nop
 80127f6:	e7fd      	b.n	80127f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10d      	bne.n	801281c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012804:	b672      	cpsid	i
 8012806:	f383 8811 	msr	BASEPRI, r3
 801280a:	f3bf 8f6f 	isb	sy
 801280e:	f3bf 8f4f 	dsb	sy
 8012812:	b662      	cpsie	i
 8012814:	60bb      	str	r3, [r7, #8]
}
 8012816:	bf00      	nop
 8012818:	bf00      	nop
 801281a:	e7fd      	b.n	8012818 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012820:	1e5a      	subs	r2, r3, #1
 8012822:	693b      	ldr	r3, [r7, #16]
 8012824:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012826:	693b      	ldr	r3, [r7, #16]
 8012828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801282e:	429a      	cmp	r2, r3
 8012830:	d02c      	beq.n	801288c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012836:	2b00      	cmp	r3, #0
 8012838:	d128      	bne.n	801288c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	3304      	adds	r3, #4
 801283e:	4618      	mov	r0, r3
 8012840:	f7fe f820 	bl	8010884 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012850:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012854:	693b      	ldr	r3, [r7, #16]
 8012856:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801285c:	4b0f      	ldr	r3, [pc, #60]	@ (801289c <xTaskPriorityDisinherit+0xe0>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	429a      	cmp	r2, r3
 8012862:	d903      	bls.n	801286c <xTaskPriorityDisinherit+0xb0>
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012868:	4a0c      	ldr	r2, [pc, #48]	@ (801289c <xTaskPriorityDisinherit+0xe0>)
 801286a:	6013      	str	r3, [r2, #0]
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	4a09      	ldr	r2, [pc, #36]	@ (80128a0 <xTaskPriorityDisinherit+0xe4>)
 801287a:	441a      	add	r2, r3
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	3304      	adds	r3, #4
 8012880:	4619      	mov	r1, r3
 8012882:	4610      	mov	r0, r2
 8012884:	f7fd ffa1 	bl	80107ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012888:	2301      	movs	r3, #1
 801288a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801288c:	697b      	ldr	r3, [r7, #20]
	}
 801288e:	4618      	mov	r0, r3
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	20001c70 	.word	0x20001c70
 801289c:	2000214c 	.word	0x2000214c
 80128a0:	20001c74 	.word	0x20001c74

080128a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b088      	sub	sp, #32
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80128b2:	2301      	movs	r3, #1
 80128b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d070      	beq.n	801299e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80128bc:	69bb      	ldr	r3, [r7, #24]
 80128be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d10d      	bne.n	80128e0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80128c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c8:	b672      	cpsid	i
 80128ca:	f383 8811 	msr	BASEPRI, r3
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f3bf 8f4f 	dsb	sy
 80128d6:	b662      	cpsie	i
 80128d8:	60fb      	str	r3, [r7, #12]
}
 80128da:	bf00      	nop
 80128dc:	bf00      	nop
 80128de:	e7fd      	b.n	80128dc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80128e4:	683a      	ldr	r2, [r7, #0]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d902      	bls.n	80128f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	61fb      	str	r3, [r7, #28]
 80128ee:	e002      	b.n	80128f6 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80128f0:	69bb      	ldr	r3, [r7, #24]
 80128f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80128f4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80128f6:	69bb      	ldr	r3, [r7, #24]
 80128f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128fa:	69fa      	ldr	r2, [r7, #28]
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d04e      	beq.n	801299e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	429a      	cmp	r2, r3
 8012908:	d149      	bne.n	801299e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801290a:	4b27      	ldr	r3, [pc, #156]	@ (80129a8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	69ba      	ldr	r2, [r7, #24]
 8012910:	429a      	cmp	r2, r3
 8012912:	d10d      	bne.n	8012930 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8012914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012918:	b672      	cpsid	i
 801291a:	f383 8811 	msr	BASEPRI, r3
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	f3bf 8f4f 	dsb	sy
 8012926:	b662      	cpsie	i
 8012928:	60bb      	str	r3, [r7, #8]
}
 801292a:	bf00      	nop
 801292c:	bf00      	nop
 801292e:	e7fd      	b.n	801292c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012934:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	69fa      	ldr	r2, [r7, #28]
 801293a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	699b      	ldr	r3, [r3, #24]
 8012940:	2b00      	cmp	r3, #0
 8012942:	db04      	blt.n	801294e <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801294a:	69bb      	ldr	r3, [r7, #24]
 801294c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	6959      	ldr	r1, [r3, #20]
 8012952:	693a      	ldr	r2, [r7, #16]
 8012954:	4613      	mov	r3, r2
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	4413      	add	r3, r2
 801295a:	009b      	lsls	r3, r3, #2
 801295c:	4a13      	ldr	r2, [pc, #76]	@ (80129ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801295e:	4413      	add	r3, r2
 8012960:	4299      	cmp	r1, r3
 8012962:	d11c      	bne.n	801299e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012964:	69bb      	ldr	r3, [r7, #24]
 8012966:	3304      	adds	r3, #4
 8012968:	4618      	mov	r0, r3
 801296a:	f7fd ff8b 	bl	8010884 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012972:	4b0f      	ldr	r3, [pc, #60]	@ (80129b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	429a      	cmp	r2, r3
 8012978:	d903      	bls.n	8012982 <vTaskPriorityDisinheritAfterTimeout+0xde>
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801297e:	4a0c      	ldr	r2, [pc, #48]	@ (80129b0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8012980:	6013      	str	r3, [r2, #0]
 8012982:	69bb      	ldr	r3, [r7, #24]
 8012984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012986:	4613      	mov	r3, r2
 8012988:	009b      	lsls	r3, r3, #2
 801298a:	4413      	add	r3, r2
 801298c:	009b      	lsls	r3, r3, #2
 801298e:	4a07      	ldr	r2, [pc, #28]	@ (80129ac <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8012990:	441a      	add	r2, r3
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	3304      	adds	r3, #4
 8012996:	4619      	mov	r1, r3
 8012998:	4610      	mov	r0, r2
 801299a:	f7fd ff16 	bl	80107ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801299e:	bf00      	nop
 80129a0:	3720      	adds	r7, #32
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	20001c70 	.word	0x20001c70
 80129ac:	20001c74 	.word	0x20001c74
 80129b0:	2000214c 	.word	0x2000214c

080129b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80129b4:	b480      	push	{r7}
 80129b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80129b8:	4b07      	ldr	r3, [pc, #28]	@ (80129d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d004      	beq.n	80129ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80129c0:	4b05      	ldr	r3, [pc, #20]	@ (80129d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80129c6:	3201      	adds	r2, #1
 80129c8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80129ca:	4b03      	ldr	r3, [pc, #12]	@ (80129d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80129cc:	681b      	ldr	r3, [r3, #0]
	}
 80129ce:	4618      	mov	r0, r3
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr
 80129d8:	20001c70 	.word	0x20001c70

080129dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80129e6:	4b21      	ldr	r3, [pc, #132]	@ (8012a6c <prvAddCurrentTaskToDelayedList+0x90>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80129ec:	4b20      	ldr	r3, [pc, #128]	@ (8012a70 <prvAddCurrentTaskToDelayedList+0x94>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	3304      	adds	r3, #4
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fd ff46 	bl	8010884 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129fe:	d10a      	bne.n	8012a16 <prvAddCurrentTaskToDelayedList+0x3a>
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d007      	beq.n	8012a16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012a06:	4b1a      	ldr	r3, [pc, #104]	@ (8012a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	3304      	adds	r3, #4
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4819      	ldr	r0, [pc, #100]	@ (8012a74 <prvAddCurrentTaskToDelayedList+0x98>)
 8012a10:	f7fd fedb 	bl	80107ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012a14:	e026      	b.n	8012a64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012a16:	68fa      	ldr	r2, [r7, #12]
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012a1e:	4b14      	ldr	r3, [pc, #80]	@ (8012a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	68ba      	ldr	r2, [r7, #8]
 8012a24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012a26:	68ba      	ldr	r2, [r7, #8]
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d209      	bcs.n	8012a42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012a2e:	4b12      	ldr	r3, [pc, #72]	@ (8012a78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012a30:	681a      	ldr	r2, [r3, #0]
 8012a32:	4b0f      	ldr	r3, [pc, #60]	@ (8012a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	3304      	adds	r3, #4
 8012a38:	4619      	mov	r1, r3
 8012a3a:	4610      	mov	r0, r2
 8012a3c:	f7fd fee9 	bl	8010812 <vListInsert>
}
 8012a40:	e010      	b.n	8012a64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012a42:	4b0e      	ldr	r3, [pc, #56]	@ (8012a7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	4b0a      	ldr	r3, [pc, #40]	@ (8012a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	3304      	adds	r3, #4
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	4610      	mov	r0, r2
 8012a50:	f7fd fedf 	bl	8010812 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012a54:	4b0a      	ldr	r3, [pc, #40]	@ (8012a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d202      	bcs.n	8012a64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012a5e:	4a08      	ldr	r2, [pc, #32]	@ (8012a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	6013      	str	r3, [r2, #0]
}
 8012a64:	bf00      	nop
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	20002148 	.word	0x20002148
 8012a70:	20001c70 	.word	0x20001c70
 8012a74:	20002130 	.word	0x20002130
 8012a78:	20002100 	.word	0x20002100
 8012a7c:	200020fc 	.word	0x200020fc
 8012a80:	20002164 	.word	0x20002164

08012a84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b08a      	sub	sp, #40	@ 0x28
 8012a88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012a8e:	f000 fb21 	bl	80130d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012a92:	4b1e      	ldr	r3, [pc, #120]	@ (8012b0c <xTimerCreateTimerTask+0x88>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d021      	beq.n	8012ade <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012aa2:	1d3a      	adds	r2, r7, #4
 8012aa4:	f107 0108 	add.w	r1, r7, #8
 8012aa8:	f107 030c 	add.w	r3, r7, #12
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fd fe45 	bl	801073c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012ab2:	6879      	ldr	r1, [r7, #4]
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	9202      	str	r2, [sp, #8]
 8012aba:	9301      	str	r3, [sp, #4]
 8012abc:	2302      	movs	r3, #2
 8012abe:	9300      	str	r3, [sp, #0]
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	460a      	mov	r2, r1
 8012ac4:	4912      	ldr	r1, [pc, #72]	@ (8012b10 <xTimerCreateTimerTask+0x8c>)
 8012ac6:	4813      	ldr	r0, [pc, #76]	@ (8012b14 <xTimerCreateTimerTask+0x90>)
 8012ac8:	f7fe ff7a 	bl	80119c0 <xTaskCreateStatic>
 8012acc:	4603      	mov	r3, r0
 8012ace:	4a12      	ldr	r2, [pc, #72]	@ (8012b18 <xTimerCreateTimerTask+0x94>)
 8012ad0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012ad2:	4b11      	ldr	r3, [pc, #68]	@ (8012b18 <xTimerCreateTimerTask+0x94>)
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012ada:	2301      	movs	r3, #1
 8012adc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d10d      	bne.n	8012b00 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8012ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ae8:	b672      	cpsid	i
 8012aea:	f383 8811 	msr	BASEPRI, r3
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	f3bf 8f4f 	dsb	sy
 8012af6:	b662      	cpsie	i
 8012af8:	613b      	str	r3, [r7, #16]
}
 8012afa:	bf00      	nop
 8012afc:	bf00      	nop
 8012afe:	e7fd      	b.n	8012afc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8012b00:	697b      	ldr	r3, [r7, #20]
}
 8012b02:	4618      	mov	r0, r3
 8012b04:	3718      	adds	r7, #24
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}
 8012b0a:	bf00      	nop
 8012b0c:	200021a0 	.word	0x200021a0
 8012b10:	08013c1c 	.word	0x08013c1c
 8012b14:	08012c5d 	.word	0x08012c5d
 8012b18:	200021a4 	.word	0x200021a4

08012b1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08a      	sub	sp, #40	@ 0x28
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
 8012b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d10d      	bne.n	8012b50 <xTimerGenericCommand+0x34>
	__asm volatile
 8012b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b38:	b672      	cpsid	i
 8012b3a:	f383 8811 	msr	BASEPRI, r3
 8012b3e:	f3bf 8f6f 	isb	sy
 8012b42:	f3bf 8f4f 	dsb	sy
 8012b46:	b662      	cpsie	i
 8012b48:	623b      	str	r3, [r7, #32]
}
 8012b4a:	bf00      	nop
 8012b4c:	bf00      	nop
 8012b4e:	e7fd      	b.n	8012b4c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012b50:	4b19      	ldr	r3, [pc, #100]	@ (8012bb8 <xTimerGenericCommand+0x9c>)
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d02a      	beq.n	8012bae <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b05      	cmp	r3, #5
 8012b68:	dc18      	bgt.n	8012b9c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012b6a:	f7ff fda1 	bl	80126b0 <xTaskGetSchedulerState>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b02      	cmp	r3, #2
 8012b72:	d109      	bne.n	8012b88 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012b74:	4b10      	ldr	r3, [pc, #64]	@ (8012bb8 <xTimerGenericCommand+0x9c>)
 8012b76:	6818      	ldr	r0, [r3, #0]
 8012b78:	f107 0110 	add.w	r1, r7, #16
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b80:	f7fe f87a 	bl	8010c78 <xQueueGenericSend>
 8012b84:	6278      	str	r0, [r7, #36]	@ 0x24
 8012b86:	e012      	b.n	8012bae <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012b88:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb8 <xTimerGenericCommand+0x9c>)
 8012b8a:	6818      	ldr	r0, [r3, #0]
 8012b8c:	f107 0110 	add.w	r1, r7, #16
 8012b90:	2300      	movs	r3, #0
 8012b92:	2200      	movs	r2, #0
 8012b94:	f7fe f870 	bl	8010c78 <xQueueGenericSend>
 8012b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8012b9a:	e008      	b.n	8012bae <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012b9c:	4b06      	ldr	r3, [pc, #24]	@ (8012bb8 <xTimerGenericCommand+0x9c>)
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	f107 0110 	add.w	r1, r7, #16
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	683a      	ldr	r2, [r7, #0]
 8012ba8:	f7fe f970 	bl	8010e8c <xQueueGenericSendFromISR>
 8012bac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3728      	adds	r7, #40	@ 0x28
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	200021a0 	.word	0x200021a0

08012bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b088      	sub	sp, #32
 8012bc0:	af02      	add	r7, sp, #8
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bc6:	4b24      	ldr	r3, [pc, #144]	@ (8012c58 <prvProcessExpiredTimer+0x9c>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	68db      	ldr	r3, [r3, #12]
 8012bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	3304      	adds	r3, #4
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fd fe55 	bl	8010884 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012bda:	697b      	ldr	r3, [r7, #20]
 8012bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012be0:	f003 0304 	and.w	r3, r3, #4
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d025      	beq.n	8012c34 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	699a      	ldr	r2, [r3, #24]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	18d1      	adds	r1, r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	683a      	ldr	r2, [r7, #0]
 8012bf4:	6978      	ldr	r0, [r7, #20]
 8012bf6:	f000 f8d7 	bl	8012da8 <prvInsertTimerInActiveList>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d022      	beq.n	8012c46 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012c00:	2300      	movs	r3, #0
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	2300      	movs	r3, #0
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	2100      	movs	r1, #0
 8012c0a:	6978      	ldr	r0, [r7, #20]
 8012c0c:	f7ff ff86 	bl	8012b1c <xTimerGenericCommand>
 8012c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d116      	bne.n	8012c46 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c1c:	b672      	cpsid	i
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	b662      	cpsie	i
 8012c2c:	60fb      	str	r3, [r7, #12]
}
 8012c2e:	bf00      	nop
 8012c30:	bf00      	nop
 8012c32:	e7fd      	b.n	8012c30 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012c3a:	f023 0301 	bic.w	r3, r3, #1
 8012c3e:	b2da      	uxtb	r2, r3
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012c46:	697b      	ldr	r3, [r7, #20]
 8012c48:	6a1b      	ldr	r3, [r3, #32]
 8012c4a:	6978      	ldr	r0, [r7, #20]
 8012c4c:	4798      	blx	r3
}
 8012c4e:	bf00      	nop
 8012c50:	3718      	adds	r7, #24
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}
 8012c56:	bf00      	nop
 8012c58:	20002198 	.word	0x20002198

08012c5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012c64:	f107 0308 	add.w	r3, r7, #8
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f000 f859 	bl	8012d20 <prvGetNextExpireTime>
 8012c6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	4619      	mov	r1, r3
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f000 f805 	bl	8012c84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012c7a:	f000 f8d7 	bl	8012e2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012c7e:	bf00      	nop
 8012c80:	e7f0      	b.n	8012c64 <prvTimerTask+0x8>
	...

08012c84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
 8012c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012c8e:	f7ff f909 	bl	8011ea4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012c92:	f107 0308 	add.w	r3, r7, #8
 8012c96:	4618      	mov	r0, r3
 8012c98:	f000 f866 	bl	8012d68 <prvSampleTimeNow>
 8012c9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d130      	bne.n	8012d06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012ca4:	683b      	ldr	r3, [r7, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d10a      	bne.n	8012cc0 <prvProcessTimerOrBlockTask+0x3c>
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d806      	bhi.n	8012cc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012cb2:	f7ff f905 	bl	8011ec0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012cb6:	68f9      	ldr	r1, [r7, #12]
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7ff ff7f 	bl	8012bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012cbe:	e024      	b.n	8012d0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d008      	beq.n	8012cd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012cc6:	4b13      	ldr	r3, [pc, #76]	@ (8012d14 <prvProcessTimerOrBlockTask+0x90>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d101      	bne.n	8012cd4 <prvProcessTimerOrBlockTask+0x50>
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	e000      	b.n	8012cd6 <prvProcessTimerOrBlockTask+0x52>
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8012d18 <prvProcessTimerOrBlockTask+0x94>)
 8012cda:	6818      	ldr	r0, [r3, #0]
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	1ad3      	subs	r3, r2, r3
 8012ce2:	683a      	ldr	r2, [r7, #0]
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	f7fe fe37 	bl	8011958 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012cea:	f7ff f8e9 	bl	8011ec0 <xTaskResumeAll>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d10a      	bne.n	8012d0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012cf4:	4b09      	ldr	r3, [pc, #36]	@ (8012d1c <prvProcessTimerOrBlockTask+0x98>)
 8012cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012cfa:	601a      	str	r2, [r3, #0]
 8012cfc:	f3bf 8f4f 	dsb	sy
 8012d00:	f3bf 8f6f 	isb	sy
}
 8012d04:	e001      	b.n	8012d0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012d06:	f7ff f8db 	bl	8011ec0 <xTaskResumeAll>
}
 8012d0a:	bf00      	nop
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	2000219c 	.word	0x2000219c
 8012d18:	200021a0 	.word	0x200021a0
 8012d1c:	e000ed04 	.word	0xe000ed04

08012d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012d20:	b480      	push	{r7}
 8012d22:	b085      	sub	sp, #20
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012d28:	4b0e      	ldr	r3, [pc, #56]	@ (8012d64 <prvGetNextExpireTime+0x44>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d101      	bne.n	8012d36 <prvGetNextExpireTime+0x16>
 8012d32:	2201      	movs	r2, #1
 8012d34:	e000      	b.n	8012d38 <prvGetNextExpireTime+0x18>
 8012d36:	2200      	movs	r2, #0
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d105      	bne.n	8012d50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012d44:	4b07      	ldr	r3, [pc, #28]	@ (8012d64 <prvGetNextExpireTime+0x44>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	60fb      	str	r3, [r7, #12]
 8012d4e:	e001      	b.n	8012d54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012d50:	2300      	movs	r3, #0
 8012d52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012d54:	68fb      	ldr	r3, [r7, #12]
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3714      	adds	r7, #20
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d60:	4770      	bx	lr
 8012d62:	bf00      	nop
 8012d64:	20002198 	.word	0x20002198

08012d68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012d70:	f7ff f946 	bl	8012000 <xTaskGetTickCount>
 8012d74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012d76:	4b0b      	ldr	r3, [pc, #44]	@ (8012da4 <prvSampleTimeNow+0x3c>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d205      	bcs.n	8012d8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012d80:	f000 f940 	bl	8013004 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2201      	movs	r2, #1
 8012d88:	601a      	str	r2, [r3, #0]
 8012d8a:	e002      	b.n	8012d92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	2200      	movs	r2, #0
 8012d90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012d92:	4a04      	ldr	r2, [pc, #16]	@ (8012da4 <prvSampleTimeNow+0x3c>)
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012d98:	68fb      	ldr	r3, [r7, #12]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	200021a8 	.word	0x200021a8

08012da8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b086      	sub	sp, #24
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	607a      	str	r2, [r7, #4]
 8012db4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012db6:	2300      	movs	r3, #0
 8012db8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	68ba      	ldr	r2, [r7, #8]
 8012dbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	68fa      	ldr	r2, [r7, #12]
 8012dc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d812      	bhi.n	8012df4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	1ad2      	subs	r2, r2, r3
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	699b      	ldr	r3, [r3, #24]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d302      	bcc.n	8012de2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012ddc:	2301      	movs	r3, #1
 8012dde:	617b      	str	r3, [r7, #20]
 8012de0:	e01b      	b.n	8012e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012de2:	4b10      	ldr	r3, [pc, #64]	@ (8012e24 <prvInsertTimerInActiveList+0x7c>)
 8012de4:	681a      	ldr	r2, [r3, #0]
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	3304      	adds	r3, #4
 8012dea:	4619      	mov	r1, r3
 8012dec:	4610      	mov	r0, r2
 8012dee:	f7fd fd10 	bl	8010812 <vListInsert>
 8012df2:	e012      	b.n	8012e1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012df4:	687a      	ldr	r2, [r7, #4]
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d206      	bcs.n	8012e0a <prvInsertTimerInActiveList+0x62>
 8012dfc:	68ba      	ldr	r2, [r7, #8]
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d302      	bcc.n	8012e0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012e04:	2301      	movs	r3, #1
 8012e06:	617b      	str	r3, [r7, #20]
 8012e08:	e007      	b.n	8012e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012e0a:	4b07      	ldr	r3, [pc, #28]	@ (8012e28 <prvInsertTimerInActiveList+0x80>)
 8012e0c:	681a      	ldr	r2, [r3, #0]
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	3304      	adds	r3, #4
 8012e12:	4619      	mov	r1, r3
 8012e14:	4610      	mov	r0, r2
 8012e16:	f7fd fcfc 	bl	8010812 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012e1a:	697b      	ldr	r3, [r7, #20]
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3718      	adds	r7, #24
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}
 8012e24:	2000219c 	.word	0x2000219c
 8012e28:	20002198 	.word	0x20002198

08012e2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b08e      	sub	sp, #56	@ 0x38
 8012e30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012e32:	e0d4      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	da1b      	bge.n	8012e72 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012e3a:	1d3b      	adds	r3, r7, #4
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d10d      	bne.n	8012e62 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8012e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e4a:	b672      	cpsid	i
 8012e4c:	f383 8811 	msr	BASEPRI, r3
 8012e50:	f3bf 8f6f 	isb	sy
 8012e54:	f3bf 8f4f 	dsb	sy
 8012e58:	b662      	cpsie	i
 8012e5a:	61fb      	str	r3, [r7, #28]
}
 8012e5c:	bf00      	nop
 8012e5e:	bf00      	nop
 8012e60:	e7fd      	b.n	8012e5e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e68:	6850      	ldr	r0, [r2, #4]
 8012e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012e6c:	6892      	ldr	r2, [r2, #8]
 8012e6e:	4611      	mov	r1, r2
 8012e70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f2c0 80b2 	blt.w	8012fde <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e80:	695b      	ldr	r3, [r3, #20]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d004      	beq.n	8012e90 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e88:	3304      	adds	r3, #4
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fd fcfa 	bl	8010884 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e90:	463b      	mov	r3, r7
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7ff ff68 	bl	8012d68 <prvSampleTimeNow>
 8012e98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b09      	cmp	r3, #9
 8012e9e:	f200 809b 	bhi.w	8012fd8 <prvProcessReceivedCommands+0x1ac>
 8012ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ea8 <prvProcessReceivedCommands+0x7c>)
 8012ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ea8:	08012ed1 	.word	0x08012ed1
 8012eac:	08012ed1 	.word	0x08012ed1
 8012eb0:	08012ed1 	.word	0x08012ed1
 8012eb4:	08012f4b 	.word	0x08012f4b
 8012eb8:	08012f5f 	.word	0x08012f5f
 8012ebc:	08012faf 	.word	0x08012faf
 8012ec0:	08012ed1 	.word	0x08012ed1
 8012ec4:	08012ed1 	.word	0x08012ed1
 8012ec8:	08012f4b 	.word	0x08012f4b
 8012ecc:	08012f5f 	.word	0x08012f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012ed6:	f043 0301 	orr.w	r3, r3, #1
 8012eda:	b2da      	uxtb	r2, r3
 8012edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012ee2:	68ba      	ldr	r2, [r7, #8]
 8012ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ee6:	699b      	ldr	r3, [r3, #24]
 8012ee8:	18d1      	adds	r1, r2, r3
 8012eea:	68bb      	ldr	r3, [r7, #8]
 8012eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012ef0:	f7ff ff5a 	bl	8012da8 <prvInsertTimerInActiveList>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d070      	beq.n	8012fdc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012efc:	6a1b      	ldr	r3, [r3, #32]
 8012efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012f08:	f003 0304 	and.w	r3, r3, #4
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d065      	beq.n	8012fdc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012f10:	68ba      	ldr	r2, [r7, #8]
 8012f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f14:	699b      	ldr	r3, [r3, #24]
 8012f16:	441a      	add	r2, r3
 8012f18:	2300      	movs	r3, #0
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	2100      	movs	r1, #0
 8012f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f22:	f7ff fdfb 	bl	8012b1c <xTimerGenericCommand>
 8012f26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012f28:	6a3b      	ldr	r3, [r7, #32]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d156      	bne.n	8012fdc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8012f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f32:	b672      	cpsid	i
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	b662      	cpsie	i
 8012f42:	61bb      	str	r3, [r7, #24]
}
 8012f44:	bf00      	nop
 8012f46:	bf00      	nop
 8012f48:	e7fd      	b.n	8012f46 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012f50:	f023 0301 	bic.w	r3, r3, #1
 8012f54:	b2da      	uxtb	r2, r3
 8012f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012f5c:	e03f      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012f64:	f043 0301 	orr.w	r3, r3, #1
 8012f68:	b2da      	uxtb	r2, r3
 8012f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012f70:	68ba      	ldr	r2, [r7, #8]
 8012f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d10d      	bne.n	8012f9a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8012f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f82:	b672      	cpsid	i
 8012f84:	f383 8811 	msr	BASEPRI, r3
 8012f88:	f3bf 8f6f 	isb	sy
 8012f8c:	f3bf 8f4f 	dsb	sy
 8012f90:	b662      	cpsie	i
 8012f92:	617b      	str	r3, [r7, #20]
}
 8012f94:	bf00      	nop
 8012f96:	bf00      	nop
 8012f98:	e7fd      	b.n	8012f96 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f9c:	699a      	ldr	r2, [r3, #24]
 8012f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa0:	18d1      	adds	r1, r2, r3
 8012fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012fa8:	f7ff fefe 	bl	8012da8 <prvInsertTimerInActiveList>
					break;
 8012fac:	e017      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012fb4:	f003 0302 	and.w	r3, r3, #2
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d103      	bne.n	8012fc4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8012fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012fbe:	f000 fbd1 	bl	8013764 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012fc2:	e00c      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012fca:	f023 0301 	bic.w	r3, r3, #1
 8012fce:	b2da      	uxtb	r2, r3
 8012fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012fd6:	e002      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8012fd8:	bf00      	nop
 8012fda:	e000      	b.n	8012fde <prvProcessReceivedCommands+0x1b2>
					break;
 8012fdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012fde:	4b08      	ldr	r3, [pc, #32]	@ (8013000 <prvProcessReceivedCommands+0x1d4>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	1d39      	adds	r1, r7, #4
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fe f88c 	bl	8011104 <xQueueReceive>
 8012fec:	4603      	mov	r3, r0
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	f47f af20 	bne.w	8012e34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012ff4:	bf00      	nop
 8012ff6:	bf00      	nop
 8012ff8:	3730      	adds	r7, #48	@ 0x30
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	200021a0 	.word	0x200021a0

08013004 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801300a:	e04b      	b.n	80130a4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801300c:	4b2f      	ldr	r3, [pc, #188]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013016:	4b2d      	ldr	r3, [pc, #180]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	3304      	adds	r3, #4
 8013024:	4618      	mov	r0, r3
 8013026:	f7fd fc2d 	bl	8010884 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	6a1b      	ldr	r3, [r3, #32]
 801302e:	68f8      	ldr	r0, [r7, #12]
 8013030:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013038:	f003 0304 	and.w	r3, r3, #4
 801303c:	2b00      	cmp	r3, #0
 801303e:	d031      	beq.n	80130a4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	699b      	ldr	r3, [r3, #24]
 8013044:	693a      	ldr	r2, [r7, #16]
 8013046:	4413      	add	r3, r2
 8013048:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801304a:	68ba      	ldr	r2, [r7, #8]
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	429a      	cmp	r2, r3
 8013050:	d90e      	bls.n	8013070 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	68ba      	ldr	r2, [r7, #8]
 8013056:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	68fa      	ldr	r2, [r7, #12]
 801305c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801305e:	4b1b      	ldr	r3, [pc, #108]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3304      	adds	r3, #4
 8013066:	4619      	mov	r1, r3
 8013068:	4610      	mov	r0, r2
 801306a:	f7fd fbd2 	bl	8010812 <vListInsert>
 801306e:	e019      	b.n	80130a4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013070:	2300      	movs	r3, #0
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	2300      	movs	r3, #0
 8013076:	693a      	ldr	r2, [r7, #16]
 8013078:	2100      	movs	r1, #0
 801307a:	68f8      	ldr	r0, [r7, #12]
 801307c:	f7ff fd4e 	bl	8012b1c <xTimerGenericCommand>
 8013080:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d10d      	bne.n	80130a4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8013088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801308c:	b672      	cpsid	i
 801308e:	f383 8811 	msr	BASEPRI, r3
 8013092:	f3bf 8f6f 	isb	sy
 8013096:	f3bf 8f4f 	dsb	sy
 801309a:	b662      	cpsie	i
 801309c:	603b      	str	r3, [r7, #0]
}
 801309e:	bf00      	nop
 80130a0:	bf00      	nop
 80130a2:	e7fd      	b.n	80130a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80130a4:	4b09      	ldr	r3, [pc, #36]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1ae      	bne.n	801300c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80130ae:	4b07      	ldr	r3, [pc, #28]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80130b4:	4b06      	ldr	r3, [pc, #24]	@ (80130d0 <prvSwitchTimerLists+0xcc>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a04      	ldr	r2, [pc, #16]	@ (80130cc <prvSwitchTimerLists+0xc8>)
 80130ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80130bc:	4a04      	ldr	r2, [pc, #16]	@ (80130d0 <prvSwitchTimerLists+0xcc>)
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	6013      	str	r3, [r2, #0]
}
 80130c2:	bf00      	nop
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	20002198 	.word	0x20002198
 80130d0:	2000219c 	.word	0x2000219c

080130d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80130da:	f000 f947 	bl	801336c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80130de:	4b15      	ldr	r3, [pc, #84]	@ (8013134 <prvCheckForValidListAndQueue+0x60>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d120      	bne.n	8013128 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80130e6:	4814      	ldr	r0, [pc, #80]	@ (8013138 <prvCheckForValidListAndQueue+0x64>)
 80130e8:	f7fd fb42 	bl	8010770 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80130ec:	4813      	ldr	r0, [pc, #76]	@ (801313c <prvCheckForValidListAndQueue+0x68>)
 80130ee:	f7fd fb3f 	bl	8010770 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80130f2:	4b13      	ldr	r3, [pc, #76]	@ (8013140 <prvCheckForValidListAndQueue+0x6c>)
 80130f4:	4a10      	ldr	r2, [pc, #64]	@ (8013138 <prvCheckForValidListAndQueue+0x64>)
 80130f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80130f8:	4b12      	ldr	r3, [pc, #72]	@ (8013144 <prvCheckForValidListAndQueue+0x70>)
 80130fa:	4a10      	ldr	r2, [pc, #64]	@ (801313c <prvCheckForValidListAndQueue+0x68>)
 80130fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80130fe:	2300      	movs	r3, #0
 8013100:	9300      	str	r3, [sp, #0]
 8013102:	4b11      	ldr	r3, [pc, #68]	@ (8013148 <prvCheckForValidListAndQueue+0x74>)
 8013104:	4a11      	ldr	r2, [pc, #68]	@ (801314c <prvCheckForValidListAndQueue+0x78>)
 8013106:	2110      	movs	r1, #16
 8013108:	200a      	movs	r0, #10
 801310a:	f7fd fc51 	bl	80109b0 <xQueueGenericCreateStatic>
 801310e:	4603      	mov	r3, r0
 8013110:	4a08      	ldr	r2, [pc, #32]	@ (8013134 <prvCheckForValidListAndQueue+0x60>)
 8013112:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013114:	4b07      	ldr	r3, [pc, #28]	@ (8013134 <prvCheckForValidListAndQueue+0x60>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d005      	beq.n	8013128 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801311c:	4b05      	ldr	r3, [pc, #20]	@ (8013134 <prvCheckForValidListAndQueue+0x60>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	490b      	ldr	r1, [pc, #44]	@ (8013150 <prvCheckForValidListAndQueue+0x7c>)
 8013122:	4618      	mov	r0, r3
 8013124:	f7fe fbc4 	bl	80118b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013128:	f000 f956 	bl	80133d8 <vPortExitCritical>
}
 801312c:	bf00      	nop
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	200021a0 	.word	0x200021a0
 8013138:	20002170 	.word	0x20002170
 801313c:	20002184 	.word	0x20002184
 8013140:	20002198 	.word	0x20002198
 8013144:	2000219c 	.word	0x2000219c
 8013148:	2000224c 	.word	0x2000224c
 801314c:	200021ac 	.word	0x200021ac
 8013150:	08013c24 	.word	0x08013c24

08013154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013154:	b480      	push	{r7}
 8013156:	b085      	sub	sp, #20
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3b04      	subs	r3, #4
 8013164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801316c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	3b04      	subs	r3, #4
 8013172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	f023 0201 	bic.w	r2, r3, #1
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	3b04      	subs	r3, #4
 8013182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013184:	4a0c      	ldr	r2, [pc, #48]	@ (80131b8 <pxPortInitialiseStack+0x64>)
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	3b14      	subs	r3, #20
 801318e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	3b04      	subs	r3, #4
 801319a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f06f 0202 	mvn.w	r2, #2
 80131a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	3b20      	subs	r3, #32
 80131a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80131aa:	68fb      	ldr	r3, [r7, #12]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3714      	adds	r7, #20
 80131b0:	46bd      	mov	sp, r7
 80131b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b6:	4770      	bx	lr
 80131b8:	080131bd 	.word	0x080131bd

080131bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80131c2:	2300      	movs	r3, #0
 80131c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80131c6:	4b15      	ldr	r3, [pc, #84]	@ (801321c <prvTaskExitError+0x60>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ce:	d00d      	beq.n	80131ec <prvTaskExitError+0x30>
	__asm volatile
 80131d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131d4:	b672      	cpsid	i
 80131d6:	f383 8811 	msr	BASEPRI, r3
 80131da:	f3bf 8f6f 	isb	sy
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	b662      	cpsie	i
 80131e4:	60fb      	str	r3, [r7, #12]
}
 80131e6:	bf00      	nop
 80131e8:	bf00      	nop
 80131ea:	e7fd      	b.n	80131e8 <prvTaskExitError+0x2c>
	__asm volatile
 80131ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f0:	b672      	cpsid	i
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	b662      	cpsie	i
 8013200:	60bb      	str	r3, [r7, #8]
}
 8013202:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013204:	bf00      	nop
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d0fc      	beq.n	8013206 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801320c:	bf00      	nop
 801320e:	bf00      	nop
 8013210:	3714      	adds	r7, #20
 8013212:	46bd      	mov	sp, r7
 8013214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013218:	4770      	bx	lr
 801321a:	bf00      	nop
 801321c:	20000060 	.word	0x20000060

08013220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013220:	4b07      	ldr	r3, [pc, #28]	@ (8013240 <pxCurrentTCBConst2>)
 8013222:	6819      	ldr	r1, [r3, #0]
 8013224:	6808      	ldr	r0, [r1, #0]
 8013226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801322a:	f380 8809 	msr	PSP, r0
 801322e:	f3bf 8f6f 	isb	sy
 8013232:	f04f 0000 	mov.w	r0, #0
 8013236:	f380 8811 	msr	BASEPRI, r0
 801323a:	4770      	bx	lr
 801323c:	f3af 8000 	nop.w

08013240 <pxCurrentTCBConst2>:
 8013240:	20001c70 	.word	0x20001c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013244:	bf00      	nop
 8013246:	bf00      	nop

08013248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013248:	4808      	ldr	r0, [pc, #32]	@ (801326c <prvPortStartFirstTask+0x24>)
 801324a:	6800      	ldr	r0, [r0, #0]
 801324c:	6800      	ldr	r0, [r0, #0]
 801324e:	f380 8808 	msr	MSP, r0
 8013252:	f04f 0000 	mov.w	r0, #0
 8013256:	f380 8814 	msr	CONTROL, r0
 801325a:	b662      	cpsie	i
 801325c:	b661      	cpsie	f
 801325e:	f3bf 8f4f 	dsb	sy
 8013262:	f3bf 8f6f 	isb	sy
 8013266:	df00      	svc	0
 8013268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801326a:	bf00      	nop
 801326c:	e000ed08 	.word	0xe000ed08

08013270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013276:	4b37      	ldr	r3, [pc, #220]	@ (8013354 <xPortStartScheduler+0xe4>)
 8013278:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	781b      	ldrb	r3, [r3, #0]
 801327e:	b2db      	uxtb	r3, r3
 8013280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	22ff      	movs	r2, #255	@ 0xff
 8013286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	b2db      	uxtb	r3, r3
 801328e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013290:	78fb      	ldrb	r3, [r7, #3]
 8013292:	b2db      	uxtb	r3, r3
 8013294:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013298:	b2da      	uxtb	r2, r3
 801329a:	4b2f      	ldr	r3, [pc, #188]	@ (8013358 <xPortStartScheduler+0xe8>)
 801329c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801329e:	4b2f      	ldr	r3, [pc, #188]	@ (801335c <xPortStartScheduler+0xec>)
 80132a0:	2207      	movs	r2, #7
 80132a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80132a4:	e009      	b.n	80132ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80132a6:	4b2d      	ldr	r3, [pc, #180]	@ (801335c <xPortStartScheduler+0xec>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	3b01      	subs	r3, #1
 80132ac:	4a2b      	ldr	r2, [pc, #172]	@ (801335c <xPortStartScheduler+0xec>)
 80132ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80132b0:	78fb      	ldrb	r3, [r7, #3]
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	005b      	lsls	r3, r3, #1
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80132ba:	78fb      	ldrb	r3, [r7, #3]
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80132c2:	2b80      	cmp	r3, #128	@ 0x80
 80132c4:	d0ef      	beq.n	80132a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80132c6:	4b25      	ldr	r3, [pc, #148]	@ (801335c <xPortStartScheduler+0xec>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f1c3 0307 	rsb	r3, r3, #7
 80132ce:	2b04      	cmp	r3, #4
 80132d0:	d00d      	beq.n	80132ee <xPortStartScheduler+0x7e>
	__asm volatile
 80132d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132d6:	b672      	cpsid	i
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	b662      	cpsie	i
 80132e6:	60bb      	str	r3, [r7, #8]
}
 80132e8:	bf00      	nop
 80132ea:	bf00      	nop
 80132ec:	e7fd      	b.n	80132ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80132ee:	4b1b      	ldr	r3, [pc, #108]	@ (801335c <xPortStartScheduler+0xec>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	021b      	lsls	r3, r3, #8
 80132f4:	4a19      	ldr	r2, [pc, #100]	@ (801335c <xPortStartScheduler+0xec>)
 80132f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80132f8:	4b18      	ldr	r3, [pc, #96]	@ (801335c <xPortStartScheduler+0xec>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013300:	4a16      	ldr	r2, [pc, #88]	@ (801335c <xPortStartScheduler+0xec>)
 8013302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	b2da      	uxtb	r2, r3
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801330c:	4b14      	ldr	r3, [pc, #80]	@ (8013360 <xPortStartScheduler+0xf0>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4a13      	ldr	r2, [pc, #76]	@ (8013360 <xPortStartScheduler+0xf0>)
 8013312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013318:	4b11      	ldr	r3, [pc, #68]	@ (8013360 <xPortStartScheduler+0xf0>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	4a10      	ldr	r2, [pc, #64]	@ (8013360 <xPortStartScheduler+0xf0>)
 801331e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013324:	f000 f8dc 	bl	80134e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013328:	4b0e      	ldr	r3, [pc, #56]	@ (8013364 <xPortStartScheduler+0xf4>)
 801332a:	2200      	movs	r2, #0
 801332c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801332e:	f000 f8fb 	bl	8013528 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013332:	4b0d      	ldr	r3, [pc, #52]	@ (8013368 <xPortStartScheduler+0xf8>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	4a0c      	ldr	r2, [pc, #48]	@ (8013368 <xPortStartScheduler+0xf8>)
 8013338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801333c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801333e:	f7ff ff83 	bl	8013248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013342:	f7fe ff29 	bl	8012198 <vTaskSwitchContext>
	prvTaskExitError();
 8013346:	f7ff ff39 	bl	80131bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3710      	adds	r7, #16
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	e000e400 	.word	0xe000e400
 8013358:	2000229c 	.word	0x2000229c
 801335c:	200022a0 	.word	0x200022a0
 8013360:	e000ed20 	.word	0xe000ed20
 8013364:	20000060 	.word	0x20000060
 8013368:	e000ef34 	.word	0xe000ef34

0801336c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
	__asm volatile
 8013372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013376:	b672      	cpsid	i
 8013378:	f383 8811 	msr	BASEPRI, r3
 801337c:	f3bf 8f6f 	isb	sy
 8013380:	f3bf 8f4f 	dsb	sy
 8013384:	b662      	cpsie	i
 8013386:	607b      	str	r3, [r7, #4]
}
 8013388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801338a:	4b11      	ldr	r3, [pc, #68]	@ (80133d0 <vPortEnterCritical+0x64>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	3301      	adds	r3, #1
 8013390:	4a0f      	ldr	r2, [pc, #60]	@ (80133d0 <vPortEnterCritical+0x64>)
 8013392:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013394:	4b0e      	ldr	r3, [pc, #56]	@ (80133d0 <vPortEnterCritical+0x64>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	2b01      	cmp	r3, #1
 801339a:	d112      	bne.n	80133c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801339c:	4b0d      	ldr	r3, [pc, #52]	@ (80133d4 <vPortEnterCritical+0x68>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	b2db      	uxtb	r3, r3
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d00d      	beq.n	80133c2 <vPortEnterCritical+0x56>
	__asm volatile
 80133a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133aa:	b672      	cpsid	i
 80133ac:	f383 8811 	msr	BASEPRI, r3
 80133b0:	f3bf 8f6f 	isb	sy
 80133b4:	f3bf 8f4f 	dsb	sy
 80133b8:	b662      	cpsie	i
 80133ba:	603b      	str	r3, [r7, #0]
}
 80133bc:	bf00      	nop
 80133be:	bf00      	nop
 80133c0:	e7fd      	b.n	80133be <vPortEnterCritical+0x52>
	}
}
 80133c2:	bf00      	nop
 80133c4:	370c      	adds	r7, #12
 80133c6:	46bd      	mov	sp, r7
 80133c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133cc:	4770      	bx	lr
 80133ce:	bf00      	nop
 80133d0:	20000060 	.word	0x20000060
 80133d4:	e000ed04 	.word	0xe000ed04

080133d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80133de:	4b13      	ldr	r3, [pc, #76]	@ (801342c <vPortExitCritical+0x54>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d10d      	bne.n	8013402 <vPortExitCritical+0x2a>
	__asm volatile
 80133e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ea:	b672      	cpsid	i
 80133ec:	f383 8811 	msr	BASEPRI, r3
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	f3bf 8f4f 	dsb	sy
 80133f8:	b662      	cpsie	i
 80133fa:	607b      	str	r3, [r7, #4]
}
 80133fc:	bf00      	nop
 80133fe:	bf00      	nop
 8013400:	e7fd      	b.n	80133fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013402:	4b0a      	ldr	r3, [pc, #40]	@ (801342c <vPortExitCritical+0x54>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3b01      	subs	r3, #1
 8013408:	4a08      	ldr	r2, [pc, #32]	@ (801342c <vPortExitCritical+0x54>)
 801340a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801340c:	4b07      	ldr	r3, [pc, #28]	@ (801342c <vPortExitCritical+0x54>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d105      	bne.n	8013420 <vPortExitCritical+0x48>
 8013414:	2300      	movs	r3, #0
 8013416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	f383 8811 	msr	BASEPRI, r3
}
 801341e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013420:	bf00      	nop
 8013422:	370c      	adds	r7, #12
 8013424:	46bd      	mov	sp, r7
 8013426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801342a:	4770      	bx	lr
 801342c:	20000060 	.word	0x20000060

08013430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013430:	f3ef 8009 	mrs	r0, PSP
 8013434:	f3bf 8f6f 	isb	sy
 8013438:	4b15      	ldr	r3, [pc, #84]	@ (8013490 <pxCurrentTCBConst>)
 801343a:	681a      	ldr	r2, [r3, #0]
 801343c:	f01e 0f10 	tst.w	lr, #16
 8013440:	bf08      	it	eq
 8013442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344a:	6010      	str	r0, [r2, #0]
 801344c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013454:	b672      	cpsid	i
 8013456:	f380 8811 	msr	BASEPRI, r0
 801345a:	f3bf 8f4f 	dsb	sy
 801345e:	f3bf 8f6f 	isb	sy
 8013462:	b662      	cpsie	i
 8013464:	f7fe fe98 	bl	8012198 <vTaskSwitchContext>
 8013468:	f04f 0000 	mov.w	r0, #0
 801346c:	f380 8811 	msr	BASEPRI, r0
 8013470:	bc09      	pop	{r0, r3}
 8013472:	6819      	ldr	r1, [r3, #0]
 8013474:	6808      	ldr	r0, [r1, #0]
 8013476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801347a:	f01e 0f10 	tst.w	lr, #16
 801347e:	bf08      	it	eq
 8013480:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013484:	f380 8809 	msr	PSP, r0
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop

08013490 <pxCurrentTCBConst>:
 8013490:	20001c70 	.word	0x20001c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013494:	bf00      	nop
 8013496:	bf00      	nop

08013498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
	__asm volatile
 801349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a2:	b672      	cpsid	i
 80134a4:	f383 8811 	msr	BASEPRI, r3
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	f3bf 8f4f 	dsb	sy
 80134b0:	b662      	cpsie	i
 80134b2:	607b      	str	r3, [r7, #4]
}
 80134b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80134b6:	f7fe fdb3 	bl	8012020 <xTaskIncrementTick>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d003      	beq.n	80134c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80134c0:	4b06      	ldr	r3, [pc, #24]	@ (80134dc <SysTick_Handler+0x44>)
 80134c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	2300      	movs	r3, #0
 80134ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	f383 8811 	msr	BASEPRI, r3
}
 80134d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80134d4:	bf00      	nop
 80134d6:	3708      	adds	r7, #8
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	e000ed04 	.word	0xe000ed04

080134e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80134e0:	b480      	push	{r7}
 80134e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80134e4:	4b0b      	ldr	r3, [pc, #44]	@ (8013514 <vPortSetupTimerInterrupt+0x34>)
 80134e6:	2200      	movs	r2, #0
 80134e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80134ea:	4b0b      	ldr	r3, [pc, #44]	@ (8013518 <vPortSetupTimerInterrupt+0x38>)
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80134f0:	4b0a      	ldr	r3, [pc, #40]	@ (801351c <vPortSetupTimerInterrupt+0x3c>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	4a0a      	ldr	r2, [pc, #40]	@ (8013520 <vPortSetupTimerInterrupt+0x40>)
 80134f6:	fba2 2303 	umull	r2, r3, r2, r3
 80134fa:	099b      	lsrs	r3, r3, #6
 80134fc:	4a09      	ldr	r2, [pc, #36]	@ (8013524 <vPortSetupTimerInterrupt+0x44>)
 80134fe:	3b01      	subs	r3, #1
 8013500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013502:	4b04      	ldr	r3, [pc, #16]	@ (8013514 <vPortSetupTimerInterrupt+0x34>)
 8013504:	2207      	movs	r2, #7
 8013506:	601a      	str	r2, [r3, #0]
}
 8013508:	bf00      	nop
 801350a:	46bd      	mov	sp, r7
 801350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013510:	4770      	bx	lr
 8013512:	bf00      	nop
 8013514:	e000e010 	.word	0xe000e010
 8013518:	e000e018 	.word	0xe000e018
 801351c:	20000018 	.word	0x20000018
 8013520:	10624dd3 	.word	0x10624dd3
 8013524:	e000e014 	.word	0xe000e014

08013528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013528:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013538 <vPortEnableVFP+0x10>
 801352c:	6801      	ldr	r1, [r0, #0]
 801352e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013532:	6001      	str	r1, [r0, #0]
 8013534:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013536:	bf00      	nop
 8013538:	e000ed88 	.word	0xe000ed88

0801353c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801353c:	b480      	push	{r7}
 801353e:	b085      	sub	sp, #20
 8013540:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013542:	f3ef 8305 	mrs	r3, IPSR
 8013546:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	2b0f      	cmp	r3, #15
 801354c:	d917      	bls.n	801357e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801354e:	4a1a      	ldr	r2, [pc, #104]	@ (80135b8 <vPortValidateInterruptPriority+0x7c>)
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	781b      	ldrb	r3, [r3, #0]
 8013556:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013558:	4b18      	ldr	r3, [pc, #96]	@ (80135bc <vPortValidateInterruptPriority+0x80>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	7afa      	ldrb	r2, [r7, #11]
 801355e:	429a      	cmp	r2, r3
 8013560:	d20d      	bcs.n	801357e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013566:	b672      	cpsid	i
 8013568:	f383 8811 	msr	BASEPRI, r3
 801356c:	f3bf 8f6f 	isb	sy
 8013570:	f3bf 8f4f 	dsb	sy
 8013574:	b662      	cpsie	i
 8013576:	607b      	str	r3, [r7, #4]
}
 8013578:	bf00      	nop
 801357a:	bf00      	nop
 801357c:	e7fd      	b.n	801357a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801357e:	4b10      	ldr	r3, [pc, #64]	@ (80135c0 <vPortValidateInterruptPriority+0x84>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013586:	4b0f      	ldr	r3, [pc, #60]	@ (80135c4 <vPortValidateInterruptPriority+0x88>)
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d90d      	bls.n	80135aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801358e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013592:	b672      	cpsid	i
 8013594:	f383 8811 	msr	BASEPRI, r3
 8013598:	f3bf 8f6f 	isb	sy
 801359c:	f3bf 8f4f 	dsb	sy
 80135a0:	b662      	cpsie	i
 80135a2:	603b      	str	r3, [r7, #0]
}
 80135a4:	bf00      	nop
 80135a6:	bf00      	nop
 80135a8:	e7fd      	b.n	80135a6 <vPortValidateInterruptPriority+0x6a>
	}
 80135aa:	bf00      	nop
 80135ac:	3714      	adds	r7, #20
 80135ae:	46bd      	mov	sp, r7
 80135b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	e000e3f0 	.word	0xe000e3f0
 80135bc:	2000229c 	.word	0x2000229c
 80135c0:	e000ed0c 	.word	0xe000ed0c
 80135c4:	200022a0 	.word	0x200022a0

080135c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b08a      	sub	sp, #40	@ 0x28
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80135d0:	2300      	movs	r3, #0
 80135d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80135d4:	f7fe fc66 	bl	8011ea4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80135d8:	4b5d      	ldr	r3, [pc, #372]	@ (8013750 <pvPortMalloc+0x188>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d101      	bne.n	80135e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80135e0:	f000 f920 	bl	8013824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80135e4:	4b5b      	ldr	r3, [pc, #364]	@ (8013754 <pvPortMalloc+0x18c>)
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	4013      	ands	r3, r2
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	f040 8094 	bne.w	801371a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d020      	beq.n	801363a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80135f8:	2208      	movs	r2, #8
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4413      	add	r3, r2
 80135fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f003 0307 	and.w	r3, r3, #7
 8013606:	2b00      	cmp	r3, #0
 8013608:	d017      	beq.n	801363a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f023 0307 	bic.w	r3, r3, #7
 8013610:	3308      	adds	r3, #8
 8013612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	f003 0307 	and.w	r3, r3, #7
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00d      	beq.n	801363a <pvPortMalloc+0x72>
	__asm volatile
 801361e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013622:	b672      	cpsid	i
 8013624:	f383 8811 	msr	BASEPRI, r3
 8013628:	f3bf 8f6f 	isb	sy
 801362c:	f3bf 8f4f 	dsb	sy
 8013630:	b662      	cpsie	i
 8013632:	617b      	str	r3, [r7, #20]
}
 8013634:	bf00      	nop
 8013636:	bf00      	nop
 8013638:	e7fd      	b.n	8013636 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d06c      	beq.n	801371a <pvPortMalloc+0x152>
 8013640:	4b45      	ldr	r3, [pc, #276]	@ (8013758 <pvPortMalloc+0x190>)
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	429a      	cmp	r2, r3
 8013648:	d867      	bhi.n	801371a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801364a:	4b44      	ldr	r3, [pc, #272]	@ (801375c <pvPortMalloc+0x194>)
 801364c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801364e:	4b43      	ldr	r3, [pc, #268]	@ (801375c <pvPortMalloc+0x194>)
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013654:	e004      	b.n	8013660 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013662:	685b      	ldr	r3, [r3, #4]
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	429a      	cmp	r2, r3
 8013668:	d903      	bls.n	8013672 <pvPortMalloc+0xaa>
 801366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1f1      	bne.n	8013656 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013672:	4b37      	ldr	r3, [pc, #220]	@ (8013750 <pvPortMalloc+0x188>)
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013678:	429a      	cmp	r2, r3
 801367a:	d04e      	beq.n	801371a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801367c:	6a3b      	ldr	r3, [r7, #32]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2208      	movs	r2, #8
 8013682:	4413      	add	r3, r2
 8013684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	6a3b      	ldr	r3, [r7, #32]
 801368c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013690:	685a      	ldr	r2, [r3, #4]
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	1ad2      	subs	r2, r2, r3
 8013696:	2308      	movs	r3, #8
 8013698:	005b      	lsls	r3, r3, #1
 801369a:	429a      	cmp	r2, r3
 801369c:	d922      	bls.n	80136e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801369e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	4413      	add	r3, r2
 80136a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	f003 0307 	and.w	r3, r3, #7
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d00d      	beq.n	80136cc <pvPortMalloc+0x104>
	__asm volatile
 80136b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136b4:	b672      	cpsid	i
 80136b6:	f383 8811 	msr	BASEPRI, r3
 80136ba:	f3bf 8f6f 	isb	sy
 80136be:	f3bf 8f4f 	dsb	sy
 80136c2:	b662      	cpsie	i
 80136c4:	613b      	str	r3, [r7, #16]
}
 80136c6:	bf00      	nop
 80136c8:	bf00      	nop
 80136ca:	e7fd      	b.n	80136c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80136cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ce:	685a      	ldr	r2, [r3, #4]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	1ad2      	subs	r2, r2, r3
 80136d4:	69bb      	ldr	r3, [r7, #24]
 80136d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80136d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136da:	687a      	ldr	r2, [r7, #4]
 80136dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80136de:	69b8      	ldr	r0, [r7, #24]
 80136e0:	f000 f902 	bl	80138e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80136e4:	4b1c      	ldr	r3, [pc, #112]	@ (8013758 <pvPortMalloc+0x190>)
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	1ad3      	subs	r3, r2, r3
 80136ee:	4a1a      	ldr	r2, [pc, #104]	@ (8013758 <pvPortMalloc+0x190>)
 80136f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80136f2:	4b19      	ldr	r3, [pc, #100]	@ (8013758 <pvPortMalloc+0x190>)
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	4b1a      	ldr	r3, [pc, #104]	@ (8013760 <pvPortMalloc+0x198>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d203      	bcs.n	8013706 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80136fe:	4b16      	ldr	r3, [pc, #88]	@ (8013758 <pvPortMalloc+0x190>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4a17      	ldr	r2, [pc, #92]	@ (8013760 <pvPortMalloc+0x198>)
 8013704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013708:	685a      	ldr	r2, [r3, #4]
 801370a:	4b12      	ldr	r3, [pc, #72]	@ (8013754 <pvPortMalloc+0x18c>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	431a      	orrs	r2, r3
 8013710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013716:	2200      	movs	r2, #0
 8013718:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801371a:	f7fe fbd1 	bl	8011ec0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	f003 0307 	and.w	r3, r3, #7
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00d      	beq.n	8013744 <pvPortMalloc+0x17c>
	__asm volatile
 8013728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801372c:	b672      	cpsid	i
 801372e:	f383 8811 	msr	BASEPRI, r3
 8013732:	f3bf 8f6f 	isb	sy
 8013736:	f3bf 8f4f 	dsb	sy
 801373a:	b662      	cpsie	i
 801373c:	60fb      	str	r3, [r7, #12]
}
 801373e:	bf00      	nop
 8013740:	bf00      	nop
 8013742:	e7fd      	b.n	8013740 <pvPortMalloc+0x178>
	return pvReturn;
 8013744:	69fb      	ldr	r3, [r7, #28]
}
 8013746:	4618      	mov	r0, r3
 8013748:	3728      	adds	r7, #40	@ 0x28
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}
 801374e:	bf00      	nop
 8013750:	20005eac 	.word	0x20005eac
 8013754:	20005eb8 	.word	0x20005eb8
 8013758:	20005eb0 	.word	0x20005eb0
 801375c:	20005ea4 	.word	0x20005ea4
 8013760:	20005eb4 	.word	0x20005eb4

08013764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d04e      	beq.n	8013814 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013776:	2308      	movs	r3, #8
 8013778:	425b      	negs	r3, r3
 801377a:	697a      	ldr	r2, [r7, #20]
 801377c:	4413      	add	r3, r2
 801377e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	685a      	ldr	r2, [r3, #4]
 8013788:	4b24      	ldr	r3, [pc, #144]	@ (801381c <vPortFree+0xb8>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	4013      	ands	r3, r2
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10d      	bne.n	80137ae <vPortFree+0x4a>
	__asm volatile
 8013792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013796:	b672      	cpsid	i
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	b662      	cpsie	i
 80137a6:	60fb      	str	r3, [r7, #12]
}
 80137a8:	bf00      	nop
 80137aa:	bf00      	nop
 80137ac:	e7fd      	b.n	80137aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80137ae:	693b      	ldr	r3, [r7, #16]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00d      	beq.n	80137d2 <vPortFree+0x6e>
	__asm volatile
 80137b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137ba:	b672      	cpsid	i
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	b662      	cpsie	i
 80137ca:	60bb      	str	r3, [r7, #8]
}
 80137cc:	bf00      	nop
 80137ce:	bf00      	nop
 80137d0:	e7fd      	b.n	80137ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	685a      	ldr	r2, [r3, #4]
 80137d6:	4b11      	ldr	r3, [pc, #68]	@ (801381c <vPortFree+0xb8>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4013      	ands	r3, r2
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d019      	beq.n	8013814 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d115      	bne.n	8013814 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	685a      	ldr	r2, [r3, #4]
 80137ec:	4b0b      	ldr	r3, [pc, #44]	@ (801381c <vPortFree+0xb8>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	43db      	mvns	r3, r3
 80137f2:	401a      	ands	r2, r3
 80137f4:	693b      	ldr	r3, [r7, #16]
 80137f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80137f8:	f7fe fb54 	bl	8011ea4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	685a      	ldr	r2, [r3, #4]
 8013800:	4b07      	ldr	r3, [pc, #28]	@ (8013820 <vPortFree+0xbc>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	4413      	add	r3, r2
 8013806:	4a06      	ldr	r2, [pc, #24]	@ (8013820 <vPortFree+0xbc>)
 8013808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801380a:	6938      	ldr	r0, [r7, #16]
 801380c:	f000 f86c 	bl	80138e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013810:	f7fe fb56 	bl	8011ec0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013814:	bf00      	nop
 8013816:	3718      	adds	r7, #24
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}
 801381c:	20005eb8 	.word	0x20005eb8
 8013820:	20005eb0 	.word	0x20005eb0

08013824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013824:	b480      	push	{r7}
 8013826:	b085      	sub	sp, #20
 8013828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801382a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801382e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013830:	4b27      	ldr	r3, [pc, #156]	@ (80138d0 <prvHeapInit+0xac>)
 8013832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f003 0307 	and.w	r3, r3, #7
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00c      	beq.n	8013858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	3307      	adds	r3, #7
 8013842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f023 0307 	bic.w	r3, r3, #7
 801384a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801384c:	68ba      	ldr	r2, [r7, #8]
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	1ad3      	subs	r3, r2, r3
 8013852:	4a1f      	ldr	r2, [pc, #124]	@ (80138d0 <prvHeapInit+0xac>)
 8013854:	4413      	add	r3, r2
 8013856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801385c:	4a1d      	ldr	r2, [pc, #116]	@ (80138d4 <prvHeapInit+0xb0>)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013862:	4b1c      	ldr	r3, [pc, #112]	@ (80138d4 <prvHeapInit+0xb0>)
 8013864:	2200      	movs	r2, #0
 8013866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	68ba      	ldr	r2, [r7, #8]
 801386c:	4413      	add	r3, r2
 801386e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013870:	2208      	movs	r2, #8
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	1a9b      	subs	r3, r3, r2
 8013876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	f023 0307 	bic.w	r3, r3, #7
 801387e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	4a15      	ldr	r2, [pc, #84]	@ (80138d8 <prvHeapInit+0xb4>)
 8013884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013886:	4b14      	ldr	r3, [pc, #80]	@ (80138d8 <prvHeapInit+0xb4>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2200      	movs	r2, #0
 801388c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801388e:	4b12      	ldr	r3, [pc, #72]	@ (80138d8 <prvHeapInit+0xb4>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	2200      	movs	r2, #0
 8013894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801389a:	683b      	ldr	r3, [r7, #0]
 801389c:	68fa      	ldr	r2, [r7, #12]
 801389e:	1ad2      	subs	r2, r2, r3
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80138a4:	4b0c      	ldr	r3, [pc, #48]	@ (80138d8 <prvHeapInit+0xb4>)
 80138a6:	681a      	ldr	r2, [r3, #0]
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	4a0a      	ldr	r2, [pc, #40]	@ (80138dc <prvHeapInit+0xb8>)
 80138b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	4a09      	ldr	r2, [pc, #36]	@ (80138e0 <prvHeapInit+0xbc>)
 80138ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80138bc:	4b09      	ldr	r3, [pc, #36]	@ (80138e4 <prvHeapInit+0xc0>)
 80138be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80138c2:	601a      	str	r2, [r3, #0]
}
 80138c4:	bf00      	nop
 80138c6:	3714      	adds	r7, #20
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr
 80138d0:	200022a4 	.word	0x200022a4
 80138d4:	20005ea4 	.word	0x20005ea4
 80138d8:	20005eac 	.word	0x20005eac
 80138dc:	20005eb4 	.word	0x20005eb4
 80138e0:	20005eb0 	.word	0x20005eb0
 80138e4:	20005eb8 	.word	0x20005eb8

080138e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80138e8:	b480      	push	{r7}
 80138ea:	b085      	sub	sp, #20
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80138f0:	4b28      	ldr	r3, [pc, #160]	@ (8013994 <prvInsertBlockIntoFreeList+0xac>)
 80138f2:	60fb      	str	r3, [r7, #12]
 80138f4:	e002      	b.n	80138fc <prvInsertBlockIntoFreeList+0x14>
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	60fb      	str	r3, [r7, #12]
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	429a      	cmp	r2, r3
 8013904:	d8f7      	bhi.n	80138f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	4413      	add	r3, r2
 8013912:	687a      	ldr	r2, [r7, #4]
 8013914:	429a      	cmp	r2, r3
 8013916:	d108      	bne.n	801392a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	685a      	ldr	r2, [r3, #4]
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	685b      	ldr	r3, [r3, #4]
 8013920:	441a      	add	r2, r3
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	68ba      	ldr	r2, [r7, #8]
 8013934:	441a      	add	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	429a      	cmp	r2, r3
 801393c:	d118      	bne.n	8013970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	681a      	ldr	r2, [r3, #0]
 8013942:	4b15      	ldr	r3, [pc, #84]	@ (8013998 <prvInsertBlockIntoFreeList+0xb0>)
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	429a      	cmp	r2, r3
 8013948:	d00d      	beq.n	8013966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	685a      	ldr	r2, [r3, #4]
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	441a      	add	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	681a      	ldr	r2, [r3, #0]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	601a      	str	r2, [r3, #0]
 8013964:	e008      	b.n	8013978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013966:	4b0c      	ldr	r3, [pc, #48]	@ (8013998 <prvInsertBlockIntoFreeList+0xb0>)
 8013968:	681a      	ldr	r2, [r3, #0]
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	601a      	str	r2, [r3, #0]
 801396e:	e003      	b.n	8013978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681a      	ldr	r2, [r3, #0]
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013978:	68fa      	ldr	r2, [r7, #12]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	429a      	cmp	r2, r3
 801397e:	d002      	beq.n	8013986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013986:	bf00      	nop
 8013988:	3714      	adds	r7, #20
 801398a:	46bd      	mov	sp, r7
 801398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop
 8013994:	20005ea4 	.word	0x20005ea4
 8013998:	20005eac 	.word	0x20005eac

0801399c <memset>:
 801399c:	4402      	add	r2, r0
 801399e:	4603      	mov	r3, r0
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d100      	bne.n	80139a6 <memset+0xa>
 80139a4:	4770      	bx	lr
 80139a6:	f803 1b01 	strb.w	r1, [r3], #1
 80139aa:	e7f9      	b.n	80139a0 <memset+0x4>

080139ac <_reclaim_reent>:
 80139ac:	4b29      	ldr	r3, [pc, #164]	@ (8013a54 <_reclaim_reent+0xa8>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	4283      	cmp	r3, r0
 80139b2:	b570      	push	{r4, r5, r6, lr}
 80139b4:	4604      	mov	r4, r0
 80139b6:	d04b      	beq.n	8013a50 <_reclaim_reent+0xa4>
 80139b8:	69c3      	ldr	r3, [r0, #28]
 80139ba:	b1ab      	cbz	r3, 80139e8 <_reclaim_reent+0x3c>
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	b16b      	cbz	r3, 80139dc <_reclaim_reent+0x30>
 80139c0:	2500      	movs	r5, #0
 80139c2:	69e3      	ldr	r3, [r4, #28]
 80139c4:	68db      	ldr	r3, [r3, #12]
 80139c6:	5959      	ldr	r1, [r3, r5]
 80139c8:	2900      	cmp	r1, #0
 80139ca:	d13b      	bne.n	8013a44 <_reclaim_reent+0x98>
 80139cc:	3504      	adds	r5, #4
 80139ce:	2d80      	cmp	r5, #128	@ 0x80
 80139d0:	d1f7      	bne.n	80139c2 <_reclaim_reent+0x16>
 80139d2:	69e3      	ldr	r3, [r4, #28]
 80139d4:	4620      	mov	r0, r4
 80139d6:	68d9      	ldr	r1, [r3, #12]
 80139d8:	f000 f872 	bl	8013ac0 <_free_r>
 80139dc:	69e3      	ldr	r3, [r4, #28]
 80139de:	6819      	ldr	r1, [r3, #0]
 80139e0:	b111      	cbz	r1, 80139e8 <_reclaim_reent+0x3c>
 80139e2:	4620      	mov	r0, r4
 80139e4:	f000 f86c 	bl	8013ac0 <_free_r>
 80139e8:	6961      	ldr	r1, [r4, #20]
 80139ea:	b111      	cbz	r1, 80139f2 <_reclaim_reent+0x46>
 80139ec:	4620      	mov	r0, r4
 80139ee:	f000 f867 	bl	8013ac0 <_free_r>
 80139f2:	69e1      	ldr	r1, [r4, #28]
 80139f4:	b111      	cbz	r1, 80139fc <_reclaim_reent+0x50>
 80139f6:	4620      	mov	r0, r4
 80139f8:	f000 f862 	bl	8013ac0 <_free_r>
 80139fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80139fe:	b111      	cbz	r1, 8013a06 <_reclaim_reent+0x5a>
 8013a00:	4620      	mov	r0, r4
 8013a02:	f000 f85d 	bl	8013ac0 <_free_r>
 8013a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a08:	b111      	cbz	r1, 8013a10 <_reclaim_reent+0x64>
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	f000 f858 	bl	8013ac0 <_free_r>
 8013a10:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8013a12:	b111      	cbz	r1, 8013a1a <_reclaim_reent+0x6e>
 8013a14:	4620      	mov	r0, r4
 8013a16:	f000 f853 	bl	8013ac0 <_free_r>
 8013a1a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013a1c:	b111      	cbz	r1, 8013a24 <_reclaim_reent+0x78>
 8013a1e:	4620      	mov	r0, r4
 8013a20:	f000 f84e 	bl	8013ac0 <_free_r>
 8013a24:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013a26:	b111      	cbz	r1, 8013a2e <_reclaim_reent+0x82>
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f000 f849 	bl	8013ac0 <_free_r>
 8013a2e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013a30:	b111      	cbz	r1, 8013a38 <_reclaim_reent+0x8c>
 8013a32:	4620      	mov	r0, r4
 8013a34:	f000 f844 	bl	8013ac0 <_free_r>
 8013a38:	6a23      	ldr	r3, [r4, #32]
 8013a3a:	b14b      	cbz	r3, 8013a50 <_reclaim_reent+0xa4>
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a42:	4718      	bx	r3
 8013a44:	680e      	ldr	r6, [r1, #0]
 8013a46:	4620      	mov	r0, r4
 8013a48:	f000 f83a 	bl	8013ac0 <_free_r>
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	e7bb      	b.n	80139c8 <_reclaim_reent+0x1c>
 8013a50:	bd70      	pop	{r4, r5, r6, pc}
 8013a52:	bf00      	nop
 8013a54:	20000064 	.word	0x20000064

08013a58 <__libc_init_array>:
 8013a58:	b570      	push	{r4, r5, r6, lr}
 8013a5a:	4d0d      	ldr	r5, [pc, #52]	@ (8013a90 <__libc_init_array+0x38>)
 8013a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8013a94 <__libc_init_array+0x3c>)
 8013a5e:	1b64      	subs	r4, r4, r5
 8013a60:	10a4      	asrs	r4, r4, #2
 8013a62:	2600      	movs	r6, #0
 8013a64:	42a6      	cmp	r6, r4
 8013a66:	d109      	bne.n	8013a7c <__libc_init_array+0x24>
 8013a68:	4d0b      	ldr	r5, [pc, #44]	@ (8013a98 <__libc_init_array+0x40>)
 8013a6a:	4c0c      	ldr	r4, [pc, #48]	@ (8013a9c <__libc_init_array+0x44>)
 8013a6c:	f000 f87e 	bl	8013b6c <_init>
 8013a70:	1b64      	subs	r4, r4, r5
 8013a72:	10a4      	asrs	r4, r4, #2
 8013a74:	2600      	movs	r6, #0
 8013a76:	42a6      	cmp	r6, r4
 8013a78:	d105      	bne.n	8013a86 <__libc_init_array+0x2e>
 8013a7a:	bd70      	pop	{r4, r5, r6, pc}
 8013a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a80:	4798      	blx	r3
 8013a82:	3601      	adds	r6, #1
 8013a84:	e7ee      	b.n	8013a64 <__libc_init_array+0xc>
 8013a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8013a8a:	4798      	blx	r3
 8013a8c:	3601      	adds	r6, #1
 8013a8e:	e7f2      	b.n	8013a76 <__libc_init_array+0x1e>
 8013a90:	08015968 	.word	0x08015968
 8013a94:	08015968 	.word	0x08015968
 8013a98:	08015968 	.word	0x08015968
 8013a9c:	0801596c 	.word	0x0801596c

08013aa0 <__retarget_lock_acquire_recursive>:
 8013aa0:	4770      	bx	lr

08013aa2 <__retarget_lock_release_recursive>:
 8013aa2:	4770      	bx	lr

08013aa4 <memcpy>:
 8013aa4:	440a      	add	r2, r1
 8013aa6:	4291      	cmp	r1, r2
 8013aa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8013aac:	d100      	bne.n	8013ab0 <memcpy+0xc>
 8013aae:	4770      	bx	lr
 8013ab0:	b510      	push	{r4, lr}
 8013ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013aba:	4291      	cmp	r1, r2
 8013abc:	d1f9      	bne.n	8013ab2 <memcpy+0xe>
 8013abe:	bd10      	pop	{r4, pc}

08013ac0 <_free_r>:
 8013ac0:	b538      	push	{r3, r4, r5, lr}
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	2900      	cmp	r1, #0
 8013ac6:	d041      	beq.n	8013b4c <_free_r+0x8c>
 8013ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013acc:	1f0c      	subs	r4, r1, #4
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	bfb8      	it	lt
 8013ad2:	18e4      	addlt	r4, r4, r3
 8013ad4:	f000 f83e 	bl	8013b54 <__malloc_lock>
 8013ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8013b50 <_free_r+0x90>)
 8013ada:	6813      	ldr	r3, [r2, #0]
 8013adc:	b933      	cbnz	r3, 8013aec <_free_r+0x2c>
 8013ade:	6063      	str	r3, [r4, #4]
 8013ae0:	6014      	str	r4, [r2, #0]
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ae8:	f000 b83a 	b.w	8013b60 <__malloc_unlock>
 8013aec:	42a3      	cmp	r3, r4
 8013aee:	d908      	bls.n	8013b02 <_free_r+0x42>
 8013af0:	6820      	ldr	r0, [r4, #0]
 8013af2:	1821      	adds	r1, r4, r0
 8013af4:	428b      	cmp	r3, r1
 8013af6:	bf01      	itttt	eq
 8013af8:	6819      	ldreq	r1, [r3, #0]
 8013afa:	685b      	ldreq	r3, [r3, #4]
 8013afc:	1809      	addeq	r1, r1, r0
 8013afe:	6021      	streq	r1, [r4, #0]
 8013b00:	e7ed      	b.n	8013ade <_free_r+0x1e>
 8013b02:	461a      	mov	r2, r3
 8013b04:	685b      	ldr	r3, [r3, #4]
 8013b06:	b10b      	cbz	r3, 8013b0c <_free_r+0x4c>
 8013b08:	42a3      	cmp	r3, r4
 8013b0a:	d9fa      	bls.n	8013b02 <_free_r+0x42>
 8013b0c:	6811      	ldr	r1, [r2, #0]
 8013b0e:	1850      	adds	r0, r2, r1
 8013b10:	42a0      	cmp	r0, r4
 8013b12:	d10b      	bne.n	8013b2c <_free_r+0x6c>
 8013b14:	6820      	ldr	r0, [r4, #0]
 8013b16:	4401      	add	r1, r0
 8013b18:	1850      	adds	r0, r2, r1
 8013b1a:	4283      	cmp	r3, r0
 8013b1c:	6011      	str	r1, [r2, #0]
 8013b1e:	d1e0      	bne.n	8013ae2 <_free_r+0x22>
 8013b20:	6818      	ldr	r0, [r3, #0]
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	6053      	str	r3, [r2, #4]
 8013b26:	4408      	add	r0, r1
 8013b28:	6010      	str	r0, [r2, #0]
 8013b2a:	e7da      	b.n	8013ae2 <_free_r+0x22>
 8013b2c:	d902      	bls.n	8013b34 <_free_r+0x74>
 8013b2e:	230c      	movs	r3, #12
 8013b30:	602b      	str	r3, [r5, #0]
 8013b32:	e7d6      	b.n	8013ae2 <_free_r+0x22>
 8013b34:	6820      	ldr	r0, [r4, #0]
 8013b36:	1821      	adds	r1, r4, r0
 8013b38:	428b      	cmp	r3, r1
 8013b3a:	bf04      	itt	eq
 8013b3c:	6819      	ldreq	r1, [r3, #0]
 8013b3e:	685b      	ldreq	r3, [r3, #4]
 8013b40:	6063      	str	r3, [r4, #4]
 8013b42:	bf04      	itt	eq
 8013b44:	1809      	addeq	r1, r1, r0
 8013b46:	6021      	streq	r1, [r4, #0]
 8013b48:	6054      	str	r4, [r2, #4]
 8013b4a:	e7ca      	b.n	8013ae2 <_free_r+0x22>
 8013b4c:	bd38      	pop	{r3, r4, r5, pc}
 8013b4e:	bf00      	nop
 8013b50:	20005ff8 	.word	0x20005ff8

08013b54 <__malloc_lock>:
 8013b54:	4801      	ldr	r0, [pc, #4]	@ (8013b5c <__malloc_lock+0x8>)
 8013b56:	f7ff bfa3 	b.w	8013aa0 <__retarget_lock_acquire_recursive>
 8013b5a:	bf00      	nop
 8013b5c:	20005ff4 	.word	0x20005ff4

08013b60 <__malloc_unlock>:
 8013b60:	4801      	ldr	r0, [pc, #4]	@ (8013b68 <__malloc_unlock+0x8>)
 8013b62:	f7ff bf9e 	b.w	8013aa2 <__retarget_lock_release_recursive>
 8013b66:	bf00      	nop
 8013b68:	20005ff4 	.word	0x20005ff4

08013b6c <_init>:
 8013b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6e:	bf00      	nop
 8013b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b72:	bc08      	pop	{r3}
 8013b74:	469e      	mov	lr, r3
 8013b76:	4770      	bx	lr

08013b78 <_fini>:
 8013b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7a:	bf00      	nop
 8013b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b7e:	bc08      	pop	{r3}
 8013b80:	469e      	mov	lr, r3
 8013b82:	4770      	bx	lr
